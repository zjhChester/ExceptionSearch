/*
 Navicat Premium Data Transfer

 Source Server         : 148.70.72.182
 Source Server Type    : MySQL
 Source Server Version : 80011
 Source Host           : 148.70.72.182:3306
 Source Schema         : exception

 Target Server Type    : MySQL
 Target Server Version : 80011
 File Encoding         : 65001

 Date: 30/09/2020 17:51:20
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for approve
-- ----------------------------
DROP TABLE IF EXISTS `approve`;
CREATE TABLE `approve`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exceptionId` int(255) NULL DEFAULT NULL,
  `userId` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 21 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of approve
-- ----------------------------
INSERT INTO `approve` VALUES (15, 99080, 'zjh', '2020-09-14 15:18:07', '');
INSERT INTO `approve` VALUES (16, 99085, 'zjh', '2020-09-29 18:11:37', '');
INSERT INTO `approve` VALUES (17, 99082, 'zjh', '2020-09-29 18:13:25', '');
INSERT INTO `approve` VALUES (18, 99073, 'zjh', '2020-09-29 18:15:22', '');
INSERT INTO `approve` VALUES (19, 99062, 'zjh', '2020-09-29 18:16:37', '');
INSERT INTO `approve` VALUES (20, 99071, 'zjh', '2020-09-29 18:18:09', '');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exceptionId` int(11) NULL DEFAULT NULL,
  `userId` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 17 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (9, 99082, '吴豪,;#', '2020-09-16 14:30:06', '大佬666', '');
INSERT INTO `comment` VALUES (10, 99083, 'z1', '2020-09-18 20:08:43', '21123', '');
INSERT INTO `comment` VALUES (11, 99084, 'zjh', '2020-09-21 20:56:36', '反射获取类对象还可以通过:类名.class.newInstance()', '');
INSERT INTO `comment` VALUES (12, 99084, 'zjh', '2020-09-21 20:57:01', '图片路径去改一下，图片路径有点问题', '');
INSERT INTO `comment` VALUES (13, 99085, 'zjh', '2020-09-30 13:58:56', '优秀', '');
INSERT INTO `comment` VALUES (14, 99085, 'zjh', '2020-09-30 14:00:12', '2', '');
INSERT INTO `comment` VALUES (15, 99085, 'zjh', '2020-09-30 15:59:41', '3', '');
INSERT INTO `comment` VALUES (16, 99085, 'zjh', '2020-09-30 16:02:24', '4', '');

-- ----------------------------
-- Table structure for exception
-- ----------------------------
DROP TABLE IF EXISTS `exception`;
CREATE TABLE `exception`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `desc` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `content` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `createTime` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `author` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `type` varchar(1000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `views` int(11) NULL DEFAULT 0,
  `delStatus` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT '0' COMMENT '删除状态',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `id`(`id`) USING BTREE,
  INDEX `title`(`title`) USING BTREE,
  INDEX `type`(`type`) USING BTREE,
  INDEX `author`(`author`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 99086 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of exception
-- ----------------------------
INSERT INTO `exception` VALUES (99018, '初识IOC（程序的耦合与解耦）', '# 耦合：\r\n\r\n## 含义：\r\n\r\n程序之间的依赖关系\r\n\r\n## 分类：\r\n\r\n1、类之间的依赖', '# 耦合：\n\n## 含义：\n\n程序之间的依赖关系\n\n## 分类：\n\n1、类之间的依赖\n\n2、方法之间的依赖\n\n# 解耦：\n\n## 含义：\n\n降低程序之间的依赖关系\n\n## 实际开发做到：\n\n编译期不依赖，运行时才依赖\n\n![1569223308001](http://zjhxyy.cn/mdImg/程序的耦合与解耦.assets/1569223308001.png)\n\n## 思路：\n\n第一步：使用反射创建对象，避免使用new关键字\n\n~~~java\nClass.forName(beanPath).newInstance();\n~~~\n\n\n\n\n\n![1569232398382](http://zjhxyy.cn/mdImg/程序的耦合与解耦.assets/1569232398382.png)\n\n第二步：通过读取配置文件来获取要创建的对象全限定类名\n\n![1569232418230](http://zjhxyy.cn/mdImg/程序的耦合与解耦.assets/1569232418230.png)\n\n## 注意事项：\n\n加载配置文件（Resources文件夹下通过类加载器去找）\n\n![1569232388425](http://zjhxyy.cn/mdImg/程序的耦合与解耦.assets/1569232388425.png)\n\n', '2020-09-16 14:39:23', 'zjh', NULL, '耦合\r\n---\r', 4, '0');
INSERT INTO `exception` VALUES (99019, '初识IOC（工厂模式）', '# Ioc /DI即用于减少程序之间的耦合性\r\n\r\n## 1、JavaBean（用java编写的可重', '# Ioc /DI即用于减少程序之间的耦合性\n\n## 1、JavaBean（用java编写的可重用组件）》实体类：\n\n![1569224481667](http://zjhxyy.cn/mdImg/工厂模式.assets/1569224481667.png)\n\n### 第一步：编写配置文件bean.properties\n\n需要一个配置文件来配置我们的service 和 dao\n\n注意路径必须是全限定类名（包名+类名）\n\n~~~properties\nDao=dao.impl.DaoImpl\nService=service.ServiceImpl\n~~~\n\n![1569232538446](http://zjhxyy.cn/mdImg/工厂模式.assets/1569232538446.png)\n\n### 第二步：编写BeanFactory类\n\n通过读取配置文件中配置（properties/xml文件）的内容，反射创建对象\n\n~~~java\npackage factory;\n\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class BeanFactory {\n    private static Properties properties;\n\n    /**\n     * 通过静态方法在类被加载的时候就加载配置文件\n     * 注意事项：通过BeanFactory的类加载器加载配置文件流（找到bean.properties）\n     */\n    static {\n        try{\n//            实例化文件\n            properties = new Properties();\n            /*获取properties流对象    通过BeanFactory的类加载器加载配置文件流*/\n            InputStream is = BeanFactory.class.getClassLoader().getResourceAsStream(\"bean.properties\");\n            properties.load(is);\n        }catch (Exception e){\n            throw  new ExceptionInInitializerError(\"初始化失败BeanFactory\");\n        }\n    }\n    /**\n     * 生成Bean的静态方法\n     * @param beanName 从配置文件读取的键--》从而获取需要实例化的类的全限定类名\n     * @return  返回实例化之后的Bean\n     *\n     */\n   public static Object getBean(String beanName){\n        Object bean = null;\n        try{\n            String beanPath = properties.getProperty(beanName);\n            bean = Class.forName(beanPath).newInstance();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return bean;\n    }\n}\n\n~~~\n\n\n\n![1569232499248](http://zjhxyy.cn/mdImg/工厂模式.assets/1569232499248.png)\n\n### 第三步：编写测试类\n\n```java\n/*通过BeanFactory内部反射实例化类，实现低耦合的编程思路**/\nService service = (Service) BeanFactory.getBean(\"Service\");\n```\n\n### 测试结果：成功实例化\n\n![1569234247778](http://zjhxyy.cn/mdImg/工厂模式.assets/1569234247778.png)', '2020-09-16 14:39:50', 'zjh', NULL, '工厂模式\r\n--', 2, '0');
INSERT INTO `exception` VALUES (99020, '初识IOC（工厂模式改进（单例模式））', '# 单例模式(优化工厂模式)：\r\n\r\n## 简述：\r\n\r\n上一步的工厂模式是多例模式，多个线程访问时', '# 单例模式(优化工厂模式)：\n\n## 简述：\n\n上一步的工厂模式是多例模式，多个线程访问时会耗费资源；\n\n## 单例：\n\n1、单例对象只被创建一次，从而类中的成员也只会被初始化一次；\n\n2、效率比多例高\n\n3、反射的newInstance()每次都会调用默认的构造方法创建实例\n\n## 修改\n\n### 思路：\n\n将反射的newInstance()方法只调用一次，而不是反复创建新对象\n\n### 实现：\n\n### 1、创建beans（HashMap）容器存放扫描配置文件中的所有key和对象\n\n~~~java\n //创建beans容器存放配置文件中所有的bean\n    private static Map<String,Object> beans;\n~~~\n\n\n\n### 2、修改BeanFactory中静态方法，使每个key只会被newInstance实例化一次对象：\n\n~~~java\n  //实例化beans容器\n            beans = new HashMap<>();\n            //从配置文件中扫描所有的key\n            Enumeration<Object> keys = properties.keys();\n            //遍历配置文件中的所有key 并存放进beans集合作为取bean的容器\n            while(keys.hasMoreElements()){\n                //获取配置文件中所有的key值\n                String key = keys.nextElement().toString();\n                //通过key值获取需要实例化对象的全限定类名（配置文件的value）\n                String beanPath = properties.getProperty(key);\n                //通过类的全限定类名通过反射的方式创建对象\n                Object bean = Class.forName(beanPath).newInstance();\n                //将配置文件中的key 和 通过全限定类名反射实例化的对象装入beans容器\n                beans.put(key,bean);\n~~~\n\n### 3、修改getbean（）方法，每次只会从已经实例化好的beans容器中取值：\n\n~~~java\n public static Object getBean(String beanName){\n        return beans.get(beanName);\n    }\n~~~\n\n### 4、修改测试主类代码，测试创建的对象是否单例：\n\n~~~java\n for (int i = 0; i < 5; i++) {\n            Service service = (Service) BeanFactory.getBean(\"Service\");\n            System.out.println(service);\n        }\n~~~\n\n### 5、结果：\n\n![1569426347485](http://zjhxyy.cn/mdImg/工厂模式改进（单例模式）.assets/1569426347485.png)\n\n## IOC（Inversion Of Control）：\n\n### 概念：\n\n把创建对象的权力交给框架/工厂，是框架的重要特征，需要注意的是，这个并非面向对象的专业术语\n\n### 目的：\n\n削减计算机程序的耦合', '2020-09-16 14:40:33', 'zjh', NULL, '工厂模式\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99021, 'bean对象的生命周期', '# bean对象的生命周期\r\n\r\n## 1、单例对象：\r\n\r\n### 出生：\r\n\r\n当文件创建时对象', '# bean对象的生命周期\n\n## 1、单例对象：\n\n### 出生：\n\n当文件创建时对象出生（刚解析完配置文件）ApplicationContext\n\n### 活着：\n\n只要容器还在，对象一直活着\n\n### 死亡：\n\n容器销毁，对象销毁\n\n### 总结：\n\n单例对象生命周期与容器相同\n\n### 测试：\n\n第一步：\n\n~~~xml\n<!-- 指定bean对象销毁和初始化的方法 -->\n<!-- scope=\"singleton\" 单例模式-->\n <bean scope=\"singleton\" id=\"Service\" class=\"com.tfs.service.impl.ServiceImpl\" init-method=\"init\" destroy-method=\"destroy\">\n~~~\n\n第二步：\n\n~~~java\n//编写对应bean对象的init destroy方法\npublic void init() {\n        System.out.println(\"对象初始化了\");\n    }\n\n    public void destroy() {\n        System.out.println(\"对象销毁了\");\n    }\n~~~\n\n第三步：\n\n编写测试类：\n\n~~~java\n //指定容器类型为类类型，避免多态性导致无法关闭容器\n        ClassPathXmlApplicationContext ac = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Service service = ac.getBean(\"Service\",Service.class);\n        service.say();\n        //手动销毁\n        ac.close();\n~~~\n\n\n\n结果：\n\n![1569730513921](http://zjhxyy.cn/mdImg/bean%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.assets/1569730513921.png)\n\n## 2、多例对象：\n\n```xml\n<!--scope=\"prototype\"多例对象 -->\n<bean scope=\"prototype\" id=\"Service\" class=\"com.tfs.service.impl.ServiceImpl\" init-method=\"init\" destroy-method=\"destroy\">\n```\n\n### 出生：\n\n当我们使用对象时spring框架才会创建\n\n### 活着：\n\n对象只要是在使用过程中就活着\n\n### 死亡：\n\n当对象长时间不用，且没有别的对象引用时。由java的垃圾回收器**GC**回收', '2020-09-16 14:41:49', 'zjh', NULL, 'spring\r\n---\r', 2, '0');
INSERT INTO `exception` VALUES (99022, 'spring中的bean的作用范围', '# spring中的bean的作用范围\r\n\r\n## 1、bean标签的scope属性：\r\n\r\n###', '# spring中的bean的作用范围\n\n## 1、bean标签的scope属性：\n\n### 作用：\n\n用于指定bean的指定范围\n\n### 取值：\n\n#### 1、singleton:单例（默认）\n\n#### 2、prototype:多例\n\n#### 3、request:作用于web应用的请求范围\n\n#### 4、session:作用于web应用的会话范围\n\n#### 5、global-session:作用于集群环境的全局会话范围，当不是集群环境时，他就是session\n\n##### 举例：用于集群环境的问题\n\n![1569729322701](http://zjhxyy.cn/mdImg/spring%E4%B8%AD%E7%9A%84bean%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4.assets/1569729322701.png)\n\n', '2020-09-16 14:42:27', 'zjh', NULL, 'spring\r\n---\r', 1, '0');
INSERT INTO `exception` VALUES (99023, 'Spring的依赖注入', '# Spring的依赖注入（DI）\r\n\r\n# 依赖注入：Dependency Injection\r\n', '# Spring的依赖注入（DI）\n\n# 依赖注入：Dependency Injection\n\n## \n\n## 1、Ioc的作用：\n\n降低程序间的耦合（依赖关系）\n\n## 2、依赖关系管理：\n\n交给spring来维护，在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明；\n\n## 3、依赖关系的维护：依赖注入\n\n\n\n#### 	能注入的数据（三类）：\n\n1、基本类型和String 2、其他的bean类型（在配置文件中或者注解配置过的bean）\n\n#### 	注入的方式（三种）：\n\n##### 1、构造函数提供:\n\n###### 优点：\n\n再获取对象的时候，必须注入数据，否则无法创建成功\n\n###### 缺点：\n\n改变了bean对象的实例化方式，使我们在创建对象的时候，即便用不到某些属性，也必须提供\n\n###### 实现：\n\n1、beans.xml\n\n~~~xml\n<!--\n        依赖注入\n        构造函数注入：\n    使用的标签：constructor-arg\n     属性：\n     type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型\n     index：用于指定要注入的数据，给构造函数中指定索引位置的参数赋值，索引从0开始\n     name：用于指定给构造函数中指定名称的参数赋值 =====》常用的\n     ==================以上三个用于指定给构造函数中那个参数赋值==================================\n     value:用于给基本类型和String类型赋值数据\n     ref:通过xml配置文件根据id找bean  引用关联的bean对象\n\n     优点：\n        在获取bean对象时，注入数据是必须的操作，否则对象时无法创建成功的\n     弊端\n        改变了bean对象的实例化方式，使我们再创建对象时，如果用不到这些数据，也必须提供\n    -->\n    <bean  id=\"Service\" class=\"com.tfs.service.impl.ServiceImpl\">\n        <constructor-arg name=\"dao\" ref=\"Dao\">\n        </constructor-arg>\n    </bean>\n~~~\n\n2、ServiceImpl.java\n\n~~~java\n\n private  Dao dao;\n    /**\n     * 构造函数注入\n     */\n    public ServiceImpl(Dao dao) {\n        this.dao = dao;\n    }\npublic void say() {\n        System.out.println(\"Service say hello \");\n        dao.say();\n\n    }\n~~~\n\n3、测试类、控制台\n\n~~~java\n public static void main(String[] args){\n      ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Service service = applicationContext.getBean(\"Service\", Service.class);\n        service.say();\n }\n~~~\n\n![1569739536099](http://zjhxyy.cn/mdImg/Spring%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.assets/1569739536099.png)\n\n##### 2、使用set方法提供:\n\n###### 优点：\n\n创建对象时，没有明确的限制，可以使用默认构造函数\n\n###### 缺点：\n\n如果有某个成员必须有值，则获取对象时，有可能set方法没有执行\n\n###### 实现：\n\n1、beans.xml\n\n~~~xml\n <!--\n     依赖注入\n        2、set方法注入：常用\n            涉及的标签：property\n            标签的属性：\n            name:用于指定注入时所调用的，set方法指定的属性    注意，通过set方法必须与属性名称一致，name 就必须是setName，spring通过set方法给对应的参数赋值\n            value:用于给基本类型和String类型赋值数据\n            ref:通过xml配置文件根据id找bean  引用关联的bean对象\n\n            优势：创建对象时，没有明确的限制，可以使用默认构造函数\n            弊端：如果有某个成员必须有值，则获取对象时，有可能set方法没有执行\n    -->\n    <bean  id=\"Service\" class=\"com.tfs.service.impl.ServiceImpl\">\n        <property name=\"dao\" ref=\"Dao\">\n        </property>\n    </bean>\n~~~\n\n2、ServiceImpl.java\n\n~~~java\n private  Dao dao;\n    /**\n     * set方法注入\n     */\n    public void setDao(Dao dao) {\n        this.dao = dao;\n    }\npublic void say() {\n        System.out.println(\"Service say hello \");\n        dao.say();\n\n    }\n~~~\n\n3、测试类、控制台\n\n~~~java\n public static void main(String[] args){\n      ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Service service = applicationContext.getBean(\"Service\", Service.class);\n        service.say();\n }\n~~~\n\n![1569740306973](http://zjhxyy.cn/mdImg/Spring%E7%9A%84%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.assets/1569740306973.png)\n\n##### 3、使用注解提供\n\n\n\n#### δ、复杂类型的注入/集合类型\n\n##### 1、注意事项（ **结构相同，标签可以互换**）\n\n###### 		第一类：用于给list结构集合注入的标签：\n\n​        list array  set\n\n######         第二类：用于map结构的集合注入的标签：\n\n​        map properties\n\n\n\n##### 2、实现\n\nbeans.xml\n\n~~~xml\n <!--\n        复杂类型的注入/集合类型注入\n        用于给list结构集合注入的标签：\n        list array  set\n        用于map结构的集合注入的标签：\n        map properties\n\n        结构相同，标签可以互换\n    -->\n    <bean  id=\"Service\" class=\"com.tfs.service.impl.ServiceImpl\">\n        <property name=\"dao\" ref=\"Dao\">\n        </property>\n        <property name=\"list\">\n            <list>\n                <value>111</value>\n                <value>111</value>\n                <value>111</value>\n            </list>\n        </property>\n\n        <property name=\"string\">\n            <array>\n                <value>111</value>\n                <value>111</value>\n                <value>111</value>\n            </array>\n        </property>\n\n        <property name=\"map\">\n            <map>\n                <entry key=\"11\" value=\"12\"></entry>\n                <entry key=\"13\">\n                    <value>14</value>\n                </entry>\n            </map>\n        </property>\n\n        <property name=\"props\">\n            <props>\n                <prop key=\"11\" >ccc</prop>\n                <prop key=\"11\" >dddd</prop>\n            </props>\n        </property>\n    </bean>\n~~~\n\nServiceImpl.java\n\n~~~java\n private String string[];\n    private List<String> list;\n    private Map<String,String> map;\n    private Properties props;\n\n    public void setProps(Properties props) {\n        this.props = props;\n    }\n\n    public void setString(String[] string) {\n        this.string = string;\n    }\n\n    public void setList(List<String> list) {\n        this.list = list;\n    }\n\n    public void setMap(Map<String, String> map) {\n        this.map = map;\n    }\n\n~~~\n\n', '2020-09-16 14:43:01', 'zjh', NULL, 'spring\r\n---\r', 1, '0');
INSERT INTO `exception` VALUES (99024, '基于注解的IoC配置', '# 基于注解的IoC配置\r\n\r\n## 1、用于创建对象的注解\r\n\r\n### 1、作用：\r\n\r\n与在x', '# 基于注解的IoC配置\n\n## 1、用于创建对象的注解\n\n### 1、作用：\n\n与在xml配置文件中编写一个<bean>标签实现功能是一样的\n\n### 2、注解：@Component\n\n#### 作用：\n\n用于把当前类对象存入spring容器\n\n#### 属性：value\n\n用于指定bean的id，当我们不写时，默认值是当前默认类名，首字母小写\n\n#### 衍生：spring框架为我们提供明确的三层使用的注解，使三层对象更清晰\n\n#### @Controller  一般用于表现层\n\n#### @Service  一般用于业务层\n\n~~~java\n@Service(\"Service\")\n~~~\n\n\n\n####  @Repository 一般用于持久层\n\n~~~java\n@Repository(\"Dao\")\n~~~\n\n\n\n\n\n## 2、用于注入数据的注解\n\n### 1、作用：\n\n与在xml配置文件的bean标签中编写一个<property>标签实现功能是一样的\n\n### 2、注解：@Autowired\n\n~~~java\n @Autowired\n    private  Dao dao;\n~~~\n\n#### 原理：\n\n通过变量类型去IoC容器中去找**对应的类型**或者**接口实现类**\n\n![1569744150315](http://zjhxyy.cn/mdImg/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE.assets/1569744150315.png)\n\n#### 作用：\n\n自动按照类型注入。只要容器中有位移一个bean对象类型和要注入的变量类型匹配，就可以注入成功\n\n#### δ、注意事项：如果多个bean类型是一样的/IoC容器中有多个匹配\n\n首先按照类型匹配，如果有多个对象，再次按照变量名去IoC容器中找对应的对象\n\n##### 解决方法：\n\n###### 1、变量名与注解value一致\n\n![1569744580844](http://zjhxyy.cn/mdImg/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE.assets/1569744580844.png)\n\n###### 2、@Qulifier\n\n![1569744741107](http://zjhxyy.cn/mdImg/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE.assets/1569744741107.png)\n\n作用：\n\n首先按照类型匹配，如果有多个对象，再次按照变量名去IoC容器中找对应的对象。给类成员变量不能单独使用，但是在给方法参数注入的时候可以单独使用\n\n###### 3、@Resource\n\n作用：直接按照bean的id注入，他可以独立使用\n\n属性：name\n\n用于指定bean的id\n\n![1569744982037](http://zjhxyy.cn/mdImg/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84IoC%E9%85%8D%E7%BD%AE.assets/1569744982037.png)\n\n#### 出现位置：\n\n1、变量\n\n2、方法\n\n### 3、注解：@Value\n\n#### 作用：\n\n用于注入基本类型和String类型的数据\n\n#### 属性：value\n\n用于指定数据的值。他可以使用spring中的el表达式${表达式}\n\n3、用于改变作用范围的注解\n\n~~~java\n@Value(value = \"123\")\n    private Integer id;\n~~~\n\n## 3、用于改变作用范围的注解\n\n### 1、作用：\n\n与在xml配置文件的bean标签中使用scope属性实现功能是一样的\n\n### 2、注解@Scope\n\n```java\n@Scope(\"prototype\")\n```\n\n### 3、作用范围：\n\n类（bean对象）\n\n## 4、与生命周期相关的注解\n\n### 作用：\n\n与在xml配置文件的bean标签中使用init-method和destroy-method属性实现功能是一样的', '2020-09-16 15:02:43', 'zjh', NULL, 'spring\r\n---\r', 6, '0');
INSERT INTO `exception` VALUES (99025, 'SpringMvc第一节', '# SpringMvc第一节\r\n\r\n## 1、概述\r\n\r\n### 1.1、spring struct', '# SpringMvc第一节\n\n## 1、概述\n\n### 1.1、spring structs2的区别\n\n![1569846420913](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569846420913.png)\n\n## 2、入门搭建：\n\n### 2.1、构建maven项目，骨架选择webapp打勾\n\n#### 2.1.1、图解：\n\n![1569924815965](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569924815965.png)\n\n![1569924823626](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569924823626.png)\n\n### 2.2、设置java源码目录和资源文件\n\n#### 2.2.1、图解：\n\n![1569924889186](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569924889186.png)\n\n![1569924953836](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569924953836.png)\n\n### 2.3、配置pom.xml \n\n#### 2.3.1、注意事项：\n\n需要注意spring的版本号一致\n\n#### 2.3.2、源码：\n\n~~~xml\n 		<!--spring框架核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <!--spring web核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <!--spring mvc 核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n~~~\n\n### 2.4、编写spring-mvc.xml配置文件：\n\n#### 2.4.1、图解：\n\n![1569925605633](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569925605633.png)\n\n#### 2.4.2、源码：\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\n       http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc.xsd\n    \">\n    <!--告知spring在创建容器时要,扫描的包，配置所需要的标签，不是在beans的约束中，而是一个名称为context名称空间和约束中-->\n    <!--开启注解扫描-->\n    <context:component-scan base-package=\"cn.tfs\"></context:component-scan>\n    <!--配置视图解析器-->\n    <bean id=\"internalResourceViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <!--文件所在目录-->\n        <property name=\"prefix\" value=\"/WEB-INF/pages/\"></property>\n        <!--后缀名-->\n        <property name=\"suffix\" value=\".jsp\"></property>\n    </bean>\n    <!--开启spring-mvc框架注解支持-->\n    <mvc:annotation-driven></mvc:annotation-driven>\n\n</beans>\n~~~\n\n#### 2.4.3、注意事项：\n\n![1569925739449](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569925739449.png)\n\n### 2.5、编写web.xml配置文件\n\n#### 2.5.1、图解：\n\n![1569926084987](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569926084987.png)\n\n#### 2.5.2、源码：\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <servlet>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!--beans.xml配置文件的引入加载-->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath*:beans.xml</param-value>\n        </init-param>\n        <!--服务器启动时创建servlet类 并加载beans.xml配置文件-->\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n</web-app>\n~~~\n\n### 2.6、编写Controller.java测试\n\n#### 2.6.1、源码\n\n~~~java\npackage cn.tfs.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n@Controller\npublic class HelloController {\n    @GetMapping(\"/2\")\n    @ResponseBody\n    public String index(){\n        return \"index\";\n    }\n    @GetMapping(\"/1\")\n    public String success(){\n        return \"index\";\n    }\n}\n\n~~~\n\n#### 2.6.2、图解\n\n![1569926831065](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569926831065.png)\n\n![1569926846593](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569926846593.png)\n\n### 2.7、tomcat配置\n\n#### 2.7.1、图解：\n\n![1569926973000](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569926973000.png)\n\n![1569927011204](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569927011204.png)\n\n![1569927068646](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569927068646.png)\n\n![1569927096162](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569927096162.png)\n\n### 2.8、测试\n\n2.8.1、http://localhost:8080/1\n\n![1569927155050](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569927155050.png)\n\n2.8.2、http://localhost:8080/2\n\n![1569927196965](http://zjhxyy.cn/mdImg/SpringMvc%E7%AC%AC%E4%B8%80%E8%8A%82.assets/1569927196965.png)', '2019-10-03 00:00:00', 'zjh', NULL, 'springmvc\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99026, 'Spring-mvc拦截器', '# Spring-mvc拦截器HandlerInterceptor\r\n\r\n## 1、概述：\r\n\r\n#', '# Spring-mvc拦截器HandlerInterceptor\n\n## 1、概述：\n\n### 1.1与过滤器Filter区别：\n\n过滤器是可以过滤所有得请求包括静态资源，而拦截器是只能拦截Controller内部得方法，总而言之，拦截器做的事情，过滤器都能做，过滤器做的事情，拦截器不一定能做。\n\n### 1.2实现自定义拦截器：\n\n#### 第一步：实现HandlerInterceptor接口\n\n~~~java\npublic class LoginHandlerInterceptor implements HandlerInterceptor\n~~~\n\n#### 第二步：重写预处理得方法\n\n~~~java\npublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {}\npublic void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n    }\n\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n\n    }\n~~~\n\n#### 第三步：在spring-mvc.xml配置文件中配置拦截器\n\n~~~java\n<mvc:interceptors>\n        <mvc:interceptor>\n            <!--拦截路径-->\n            <mvc:mapping path=\"/userInfo\"/>\n            <!--拦截器注册-->\n            <bean class=\"cn.tfs.interceptor.LoginHandlerInterceptor\"></bean>\n        </mvc:interceptor>\n    </mvc:interceptors>\n~~~\n\n#### 第四步：根据需求编写自定义拦截器得预处理方法\n\nps.该方法是我用来拦截未登录情况访问主页得信息\n\n这代码是我用来获取拦截之后得路径得，用来作为登录成功之后得预处理路径：\n\n```java\nString requestURI = request.getRequestURI();request.getSession().setAttribute(\"Interceptor\",requestURI);\n```\n\n源码：\n\n~~~java\n public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n       Object user = request.getSession().getAttribute(\"loginUser\");\n       if(user == null){\n           //未登录\n           String requestURI = request.getRequestURI();\n           request.getSession().setAttribute(\"Interceptor\",requestURI);\n           request.getSession().setMaxInactiveInterval(10);\n           request.setAttribute(\"login_msg\",\"没有权限  请先登录！\");\n//           response.sendRedirect(\"/to_login\");\n           request.getRequestDispatcher(\"/to_login\").forward(request,response);\n           return false;\n       }else{\n           //已登录\n            return true;\n       }\n    }\n~~~\n\n#### 第五步：测试\n\n![1570689442154](http://zjhxyy.cn/mdImg/2019-10-10-Spring-mvc%E6%8B%A6%E6%88%AA%E5%99%A8.assets/1570689442154.png)\n\n![1570689490834](http://zjhxyy.cn/mdImg/2019-10-10-Spring-mvc%E6%8B%A6%E6%88%AA%E5%99%A8.assets/1570689490834.png)\n\n', '2019-10-10 00:00:00', 'zjh', NULL, 'springmvc\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99027, 'spring-mvc解决静态文件映射的问题', '# 2019-10-12-spring-mvc解决静态文件映射的问题\r\n\r\n在springmvc的配', '# 2019-10-12-spring-mvc解决静态文件映射的问题\r\n\r\n在springmvc的配置文件spring-mvc.xml中加入静态请求拦截并转发\r\n\r\n~~~xml\r\n <!--静态资源访问-->\r\n    <mvc:default-servlet-handler/>\r\n    <!--把符合/js/**匹配规则的请求,映射到目录/WEB-INF/js/下-->\r\n    <mvc:resources mapping=\"/js/**\" location=\"WEB-INF/js/\"/>\r\n    <mvc:resources mapping=\"/img/**\" location=\"WEB-INF/img/\"/>\r\n    <mvc:resources mapping=\"/css/**\" location=\"WEB-INF/css/\"/>\r\n~~~\r\n\r\n\r\n\r\n\r\n\r\n', '2019-10-11 00:00:00', 'zjh', NULL, 'springmvc\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99028, 'spring+springmvc+mybatis（ssm）整合', '# spring+springmvc+mybatis（ssm）整合\r\n\r\n## 1.前期准备\r\n\r\n', '# spring+springmvc+mybatis（ssm）整合\n\n## 1.前期准备\n\n1.构建maven项目，勾选骨架构建，勾选web-app\n\n![1570857284829](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570857284829.png)\n\n2.快速构建项目在maven引入的地方加上一组键值对：archetypeCatalog     internal\n\n![1570857482777](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570857482777.png)\n\n​	3.构建pom坐标依赖\n\n~~~xml\n <!--spring框架核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <!--spring web核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-web</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <!--spring mvc 核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.4.6</version> \n        </dependency>\n        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.11</version>\n        </dependency>\n <!-- https://mvnrepository.com/artifact/c3p0/c3p0 -->\n        <dependency>\n            <groupId>c3p0</groupId>\n            <artifactId>c3p0</artifactId>\n            <version>0.9.1.2</version>\n        </dependency>\n~~~\n\n## 2.spring spring-mvc mybatis 配置文件构建\n\n### 2.1.项目结构\n\n![1570858617777](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570858617777.png)\n\n### 2.2.spring\n\n1.名称空间：\n\n~~~xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/mvc\n       http://www.springframework.org/schema/mvc/spring-mvc.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n~~~\n\n2.注解扫描：\n\n需要注意的是咱们整合三大框架，如果需要用spring的注解开发，咱们应该规避mvc框架中的Controller注解，所以咱们在xml配置文件中应该加入对应的不扫描的配置，如下\n\napplicationContext.xml\n\n~~~xml\n <!--开启注解扫描-->\n        <context:component-scan base-package=\"cn.tfs\">\n            <!--不扫描的包-->\n            <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"></context:exclude-filter>\n        </context:component-scan>\n~~~\n\n### 2.3.spring-mvc\n\n1.注解扫描：\n\n与上面一样springmvc需要扫描的注解只包括@Controller的注解，所以我们在扫描中添加过滤器\n\nspring-mvc.xml\n\n~~~xml\n<!--扫描注解-->\n    <context:component-scan base-package=\"cn.tfs\">\n        <!--配置spring-mvc需要扫描的注解-->\n        <context:include-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"></context:include-filter>\n    </context:component-scan>\n~~~\n\n2.视图解析器：\n\n~~~xml\n<!--jsp视图解析器-->\n    <bean id=\"internalResourceViewResolver\" class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <property name=\"viewClass\" value=\"org.springframework.web.servlet.view.InternalResourceView\"/>\n        <property name=\"prefix\" value=\"/WEB-INF/pages/\"></property>\n        <property name=\"suffix\" value=\".jsp\"></property>\n        <property name=\"contentType\" value=\"text/html;charset=UTF-8\"/>\n        <property name=\"order\" value=\"0\" />\n    </bean>\n~~~\n\n3.注解支持:\n\n因为有时候我们需要用@Response注解去给请求返回字符串内容，那么有可能会遇到中文的问题，所以这里我们在开启注解支持的时候加入对应的编码转化的bean\n\n~~~xml\n <mvc:annotation-driven>\n        <mvc:message-converters register-defaults=\"true\">\n            <!--配置@Response注解编码问题-->\n            <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n                <property name=\"supportedMediaTypes\" value=\"text/html;charset=utf-8\"></property>\n            </bean>\n        </mvc:message-converters>\n    </mvc:annotation-driven>\n~~~\n\n4.静态资源访问映射：\n\n~~~xml\n<mvc:default-servlet-handler/>\n    <!--把符合/js/**匹配规则的请求,映射到目录/WEB-INF/js/下-->\n    <mvc:resources mapping=\"/js/**\" location=\"WEB-INF/js/\"/>\n    <mvc:resources mapping=\"/img/**\" location=\"WEB-INF/img/\"/>\n    <mvc:resources mapping=\"/css/**\" location=\"WEB-INF/css/\"/>\n~~~\n\n5.web.xml配置：\n\nweb-app的名称空间\n\n~~~xml\n xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\"\n~~~\n\n\n\n**注意：如果有报红，咱们就把过滤器丢在控制器前面**\n\n另外我们还需要解决前端传输过来的数据中文乱码的问题---->过滤器\n\n~~~xml\n<!--过滤器-->\n  <filter>\n    <filter-name>characterEncodingFilter</filter-name>\n    <!--字符编码过滤器   解决中文乱码的问题-->\n    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n  </filter>\n  <filter-mapping>\n    <filter-name>characterEncodingFilter</filter-name>\n    <url-pattern>/*</url-pattern>\n  </filter-mapping>\n~~~\n\n以及web.xml的前端控制器\n\n~~~xml\n <servlet>\n    <servlet-name>dispatcherServlet</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n      <!--读取配置文件读取-->\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath*:spring-mvc.xml</param-value>\n    </init-param>\n    <!--在服务器开启的时候装载-->\n    <load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n    <servlet-name>dispatcherServlet</servlet-name>\n    <url-pattern>/</url-pattern>\n  </servlet-mapping>\n~~~\n\n\n\n### 2.4.mybatis\n\n使用了properties导入参数的方法，使代码可读性更高\n\ndb.properties\n\n~~~properties\ndriver=com.mysql.cj.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/javaee?serverTimezone=GMT&useSSL=false&allowPublicKeyRetrieval=true\nusername=root\npassword=123\n~~~\n\nmybatisConfig.xml\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <!-- 1、mybatis使用properties来引入外部properties配置文件的内容\n    resource 引入类路径下资源\n    url 引入网络路径或磁盘路径下资源 -->\n    <properties resource=\"db.properties\"></properties>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\" />\n            <!-- 配置数据库连接信息 -->\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${driver}\" />\n                <property name=\"url\" value=\"${url}\" />\n                <property name=\"username\" value=\"${username}\" />\n                <property name=\"password\" value=\"${password}\" />\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"DaoMapper.xml\"></mapper>\n        <!--扫描包的形式装配mapper-->\n        <!--<package name=\"cn.tfs.yunge.dao\"></package>-->\n    </mappers>\n</configuration>\n~~~\n\n## 3.整合\n\n### 3.1.确保每个框架都可以独立正常运行\n\n（写测试程序！！！）\n\n### 3.2.整合spring,springmvc\n\n1.首先确保sping的配置文件applicationContext.xml里面的扫描包确实是排除了@Controller的\n\n2.确保spring-mvc的配置文件spring-mvc.xml里面的扫描包确实是只包含@Controller的\n\n3.（重要）在web项目中，我们如果发起请求，那么肯定web.xml只会解析到spring-mvc.xml的配置文件\n\n~~~xml\n<!--读取配置文件读取-->\n      <param-name>contextConfigLocation</param-name>\n      <param-value>classpath*:spring-mvc.xml</param-value>\n    </init-param>\n~~~\n\n\n\n那么就解析不到spring的配置文件，所以service也不会被注入到IoC容器中，所以我们需要在web.xml配置一个spring的监听器，在服务器开启的时候就把spring的配置文件applicationContext.xml给加载了：\n\n~~~xml\n  <!--spring监听器   默认加载WEB-INF/下的applicationContext.xml文件-->\n  <listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n  </listener>\n  <!--设置配置文件路径-->\n  <context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>classpath*:applicationContext.xml</param-value>\n  </context-param>\n~~~\n\n\n\n4.实现：\n\nUserServiceImpl.java\n\n~~~java\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService{\n     public List<User> findUser(User user) {\n        System.out.println(\"Service findUser 执行...\");\n        return  dao.findUser(user);\n\n    }\n}\n~~~\n\nHelloController.java\n\n~~~java\n @Controller\npublic class HelloController {\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(\"/1\")\n    public String index(){\n        User user = new User();\n        userService.findUser(user);\n        return \"index\";\n    }\n}\n~~~\n\n测试结果\n\n![1570863946084](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570863946084.png)\n\n### 3.3.整合spring mybatis\n\n1.在业务层调用dao的原理也是一样的，唯一不同的是这里我们使用的是代理Dao，他是个接口，所以我们要想办法把代理下实现类也给装配到IoC容器中\n\n话不多说咱们看spring的配置文件applicationContext.xml\n\n~~~xml\n<!--整合mybatis-->\n    <!--配置连接池-->\n    <!--引入db.properties数据库配置信息-->\n    <context:property-placeholder location=\"classpath*:db.properties\"></context:property-placeholder>\n    <bean id=\"pooledDataSource\" class=\"org.apache.ibatis.datasource.pooled.PooledDataSource\">\n        <property name=\"driver\" value=\"${jdbc.driver}\" />\n        <property name=\"url\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <!--自动提交事务-->\n        <property name=\"defaultAutoCommit\" value=\"true\"></property>\n    </bean>\n    <!--配置SQLSessionFactory工厂-->\n    <bean id=\"sqlSessionFactoryBean\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!--将上面的连接池注入到该工厂-->\n        <property name=\"dataSource\" ref=\"pooledDataSource\"></property>\n        <!--扫描mapper所在的包-->\n        <property name=\"mapperLocations\">\n            <list>\n                <value>classpath*:cn/tfs/yunge/dao/*.xml</value>\n            </list>\n        </property>\n    </bean>\n    <!--配置Dao接口的所在包-->\n    <bean id=\"mapperScannerConfigurer\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"cn.tfs.yunge.dao\"></property>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactoryBean\"></property>\n    </bean>\n~~~\n\n编写了上述连接池等信息之后 咱们的mybatis全局配置文件就可以删除了，之前导入在mybatisConfig.xml文件的db.properties文件以spring-context的方式引入applicationContext.xml\n\n~~~xml\n<context:property-placeholder location=\"classpath*:db.properties\"></context:property-placeholder>\n~~~\n\n\n\n2.上述连接池和配置SQLSessionFactory工厂需要引入两个之前spring-mvc没有用到过的坐标依赖（jar包）\n\n2.1.连接池：事务包tx和jdbc\n\n~~~xml\n\n<!--事务管理核心-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-tx</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n 	    <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n~~~\n\n2.2.配置SQLSessionFactory工厂和配置Mapper的所在包：org.mybatis的包org.apache.ibatis.datasource.pooled.PooledDataSource mybatis的连接池包\n\n~~~xml\n <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>1.3.0</version>\n        </dependency>\n~~~\n\n3.UserServiceImpl.java\n\n~~~java\n@Service(\"userService\")\npublic class UserServiceImpl implements UserService {\n    @Autowired\n    private Dao dao;\n    @Override\n    public List<User> findUser(User user) {\n        System.out.println(\"Service findUser 执行...\");\n        return dao.findUser(user);\n    }\n    @Override\n    public int insertUser(User user) {\n        System.out.println(\"Service insertUser 执行...\");\n        return dao.insertUser(user);\n    }\n~~~\n\nHelloController.java\n\n~~~java\n@Controller\npublic class HelloController {\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(\"/1\")\n    public String findUser(Model model){\n        User user = new User();\n        user.setUsername(\"zjh\");\n        model.addAttribute(\"result\", userService.findUser(user));\n        return \"index\";\n    }\n    @RequestMapping(\"/2\")\n    public String insertUser(Model model){\n        User user = new User();\n        user.setUsername(\"zjh\");\n        user.setPassword(\"123\");\n        model.addAttribute(\"result\",userService.insertUser(user));\n        return \"index\";\n    }\n}\n~~~\n\n测试：\n\n![1570873585507](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570873585507.png)\n\n# Δ踩坑：\n\n1.pom.xml坐标:\n\nspring-tx  spring-jdbc事务管理导入，mybatis-spring包的导入\n\n2.db.properties的键最好加个jdbc.xxx\n\n~~~properties\njdbc.driver=com.mysql.cj.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/javaee?serverTimezone=GMT&useSSL=false&allowPublicKeyRetrieval=true\njdbc.username=root\njdbc.password=123\n~~~\n\n3.最坑的问题就是java.lang.AbstractMethodError: org.mybatis.spring.transaction.SpringManagedTransaction.getTimeout()Ljava/lang/Integer;异常\n\n![1570873725282](http://zjhxyy.cn/mdImg/spring+springmvc+mybatis%EF%BC%88ssm%EF%BC%89%E6%95%B4%E5%90%88.assets/1570873725282.png)\n\n原因是适配版本问题，这个问题搞了我一个半小小时。。。手动沮丧\n\n4.最后一个就是需要加入pom.xml的静态资源\n\n~~~xml\n<resources>\n            <resource>\n                <directory>src/main/java</directory>\n                <includes>\n                    <include>**/*.properties</include>\n                    <include>**/*.xml</include>\n                </includes>\n                <filtering>false</filtering>\n            </resource>\n        </resources>\n~~~\n\n不然会找不到*mapper.xml或者.properties ，这个是解决nested exception is org.apache.ibatis.binding.BindingExceptio这个异常的', '2019-10-12 00:00:00', 'zjh', NULL, 'ssm整合\r\n---\r', 2, '0');
INSERT INTO `exception` VALUES (99029, '安卓webView使用到文件上传流遇到的问题', '# 安卓webView使用到文件上传流遇到的问题\r\n\r\n## 前言：\r\n\r\n做的h5网页可以直接套一', '# 安卓webView使用到文件上传流遇到的问题\r\n\r\n## 前言：\r\n\r\n做的h5网页可以直接套一个webView的壳子直接运行，但是如果里头有`<input type=\'file\'>`的时候，需要对webView进行设置，不然无法进行文件上传，此问题是我做刷脸登录的时候遇到的问题。\r\n\r\n## 注意事项：\r\n\r\n1、需要特别注意和遇到的坑的是，调用相机和相册使用到的Uri需要全局化，不能依靠startActivityForResult传递参数，即便传递的核验码一致，得到的uri都可能是null，主要是\r\n\r\n~~~java\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n~~~\r\n\r\n这个里头的data会为空，所以，如果上传为单文件的时候，我们可以让图片的uri直接设置为全局变量，在最终加载到客户端上拿到正确的uri就可以正常上传\r\n\r\n2、第二个坑是保存图片的路径问题，在调用相机拍摄照片的时候，存放照片的地址最好不要写sd卡的实际地址，可能会因为权限问题，保存失败，在适配机型方面就不好拓展，所以最好就保存到相对目录`getExternalCacheDir()`里面。\r\n\r\n~~~java\r\n  String fileName = \"IMG_\" + DateFormat.format(\"yyyyMMdd_hhmmss\", Calendar.getInstance(Locale.CHINA)) + \".jpg\";\r\n        File file = new File(getExternalCacheDir(), fileName);\r\n        try {\r\n            if(file.exists()){\r\n                file.delete();\r\n            }\r\n            file.createNewFile();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if(Build.VERSION.SDK_INT>=24){\r\n            imageUri = FileProvider.getUriForFile(MainActivity.this,getPackageName()+\".fileprovider\",file);\r\n        }else{\r\n            imageUri = Uri.fromFile(file);\r\n        }\r\n~~~\r\n\r\n## 源码：\r\n\r\n话不多说，源码奉上：\r\n\r\n~~~java\r\npackage cn.tfs.yunge;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\n\r\nimport android.annotation.TargetApi;\r\nimport android.content.Intent;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.text.format.DateFormat;\r\nimport android.util.Log;\r\nimport android.view.KeyEvent;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.webkit.ValueCallback;\r\nimport android.webkit.WebChromeClient;\r\nimport android.webkit.WebView;\r\nimport android.webkit.WebViewClient;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Toast;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Calendar;\r\nimport java.util.Locale;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n    private android.webkit.ValueCallback<Uri[]> mUploadCallbackAboveL;\r\n    private android.webkit.ValueCallback<Uri> mUploadCallbackBelow;\r\n    private Uri imageUri;\r\n    private int REQUEST_CODE = 1;\r\n    private ProgressBar progressBar;\r\n    private WebView webView;\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        progressBar = findViewById(R.id.pb);\r\n        ActionBar actionBar = getSupportActionBar();\r\n        if(actionBar!=null){\r\n            actionBar.hide();\r\n        }\r\n         webView = findViewById(R.id.web_view);\r\n        webView.canGoBack();\r\n        webView.getSettings().setJavaScriptEnabled(true);\r\n        webView.setWebViewClient(new WebViewClient());\r\n        webView.loadUrl(\"你加载的地址\");\r\n        webView.setWebChromeClient(new WebChromeClient() {\r\n            @Override\r\n            public void onProgressChanged(WebView view, int newProgress) {\r\n                if (newProgress == 100) {\r\n                    progressBar.setVisibility(View.GONE);//加载完网页进度条消失\r\n                } else {\r\n                    progressBar.setProgress(newProgress);//设置进度值\r\n                    progressBar.setVisibility(View.VISIBLE);//开始加载网页时显示进度条\r\n                }\r\n            }\r\n\r\n            /**\r\n             * 8(Android 2.2) <= API <= 10(Android 2.3)回调此方法\r\n             */\r\n            private void openFileChooser(android.webkit.ValueCallback<Uri> uploadMsg) {\r\n                Log.e(\"WangJ\", \"运行方法 openFileChooser-1\");\r\n                // (2)该方法回调时说明版本API < 21，此时将结果赋值给 mUploadCallbackBelow，使之 != null\r\n                mUploadCallbackBelow = uploadMsg;\r\n                takePhoto();\r\n            }\r\n\r\n            /**\r\n             * 11(Android 3.0) <= API <= 15(Android 4.0.3)回调此方法\r\n             */\r\n            public void openFileChooser(android.webkit.ValueCallback<Uri> uploadMsg, String acceptType) {\r\n                Log.e(\"WangJ\", \"运行方法 openFileChooser-2 (acceptType: \" + acceptType + \")\");\r\n                // 这里我们就不区分input的参数了，直接用拍照\r\n                openFileChooser(uploadMsg);\r\n            }\r\n\r\n            /**\r\n             * 16(Android 4.1.2) <= API <= 20(Android 4.4W.2)回调此方法\r\n             */\r\n            public void openFileChooser(android.webkit.ValueCallback<Uri> uploadMsg, String acceptType, String capture) {\r\n                Log.e(\"WangJ\", \"运行方法 openFileChooser-3 (acceptType: \" + acceptType + \"; capture: \" + capture + \")\");\r\n                // 这里我们就不区分input的参数了，直接用拍照\r\n                openFileChooser(uploadMsg);\r\n            }\r\n\r\n            /**\r\n             * API >= 21(Android 5.0.1)回调此方法\r\n             */\r\n            @Override\r\n            public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> valueCallback, FileChooserParams fileChooserParams) {\r\n                Log.e(\"WangJ\", \"运行方法 onShowFileChooser\");\r\n                // (1)该方法回调时说明版本API >= 21，此时将结果赋值给 mUploadCallbackAboveL，使之 != null\r\n                mUploadCallbackAboveL = valueCallback;\r\n                takePhoto();\r\n                return true;\r\n            }\r\n        });\r\n\r\n    }\r\n    /**\r\n     * Android API < 21(Android 5.0)版本的回调处理\r\n     * @param resultCode 选取文件或拍照的返回码\r\n     * @param data 选取文件或拍照的返回结果\r\n     */\r\n    private void chooseBelow(int resultCode, Intent data) {\r\n        Log.e(\"WangJ\", \"返回调用方法--chooseBelow\");\r\n\r\n        if (RESULT_OK == resultCode) {\r\n            updatePhotos();\r\n\r\n            if (data != null) {\r\n                // 这里是针对文件路径处理\r\n                Uri uri = data.getData();\r\n                if (uri != null) {\r\n                    Log.e(\"WangJ\", \"系统返回URI：\" + uri.toString());\r\n                    mUploadCallbackBelow.onReceiveValue(uri);\r\n                } else {\r\n                    mUploadCallbackBelow.onReceiveValue(null);\r\n                }\r\n            } else {\r\n                // 以指定图像存储路径的方式调起相机，成功后返回data为空\r\n                Log.e(\"WangJ\", \"自定义结果：\" + imageUri.toString());\r\n                mUploadCallbackBelow.onReceiveValue(imageUri);\r\n            }\r\n        } else {\r\n            mUploadCallbackBelow.onReceiveValue(null);\r\n        }\r\n        mUploadCallbackBelow = null;\r\n    }\r\n\r\n    /**\r\n     * Android API >= 21(Android 5.0) 版本的回调处理\r\n     * @param resultCode 选取文件或拍照的返回码\r\n     * @param data 选取文件或拍照的返回结果\r\n     */\r\n    private void chooseAbove(int resultCode, Intent data) {\r\n        Log.e(\"WangJ\", \"返回调用方法--chooseAbove\");\r\n\r\n        if (RESULT_OK == resultCode) {\r\n            updatePhotos();\r\n\r\n            if (data != null) {\r\n                // 这里是针对从文件中选图片的处理\r\n                Uri[] results;\r\n                Uri uriData = imageUri;\r\n                System.out.println(\"chooseAbove\"+uriData);\r\n                if (uriData != null) {\r\n                    results = new Uri[]{uriData};\r\n                    for (Uri uri : results) {\r\n                        Log.e(\"WangJ\", \"系统返回URI：\" + uri.toString());\r\n                    }\r\n                    mUploadCallbackAboveL.onReceiveValue(results);\r\n                } else {\r\n                    mUploadCallbackAboveL.onReceiveValue(null);\r\n                }\r\n            } else {\r\n                Log.e(\"WangJ\", \"自定义结果：\" + imageUri.toString());\r\n                mUploadCallbackAboveL.onReceiveValue(new Uri[]{imageUri});\r\n            }\r\n        } else {\r\n            mUploadCallbackAboveL.onReceiveValue(null);\r\n        }\r\n        mUploadCallbackAboveL = null;\r\n    }\r\n\r\n    private void updatePhotos() {\r\n        // 该广播即使多发（即选取照片成功时也发送）也没有关系，只是唤醒系统刷新媒体文件\r\n        Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);\r\n        intent.setData(imageUri);\r\n        sendBroadcast(intent);\r\n    }\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == REQUEST_CODE) {\r\n            // 经过上边(1)、(2)两个赋值操作，此处即可根据其值是否为空来决定采用哪种处理方法\r\n            if (mUploadCallbackBelow != null) {\r\n                chooseBelow(resultCode, data);\r\n            } else if (mUploadCallbackAboveL != null) {\r\n                chooseAbove(resultCode, data);\r\n            } else {\r\n                Toast.makeText(this, \"发生错误\", Toast.LENGTH_SHORT).show();\r\n            }\r\n        }\r\n    }\r\n    @TargetApi(Build.VERSION_CODES.LOLLIPOP)\r\n    @Override\r\n    protected void onDestroy() {\r\n        if (webView != null) {\r\n            webView.loadDataWithBaseURL(null, \"\", \"text/html\", \"utf-8\", null);\r\n            webView.clearHistory();\r\n            ((ViewGroup) webView.getParent()).removeView(webView);\r\n            webView.destroy();\r\n            webView = null;\r\n        }\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\r\n        if (keyCode == KeyEvent.KEYCODE_BACK && webView.canGoBack()) {\r\n            webView.goBack();\r\n            return true;\r\n        }\r\n        return super.onKeyDown(keyCode, event);\r\n    }\r\n    /**\r\n     * 调用相机\r\n     */\r\n    private void takePhoto() {\r\n//        // 指定拍照存储位置的方式调起相机\r\n        String fileName = \"IMG_\" + DateFormat.format(\"yyyyMMdd_hhmmss\", Calendar.getInstance(Locale.CHINA)) + \".jpg\";\r\n        File file = new File(getExternalCacheDir(), fileName);\r\n        try {\r\n            if(file.exists()){\r\n                file.delete();\r\n            }\r\n            file.createNewFile();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if(Build.VERSION.SDK_INT>=24){\r\n            imageUri = FileProvider.getUriForFile(MainActivity.this,getPackageName()+\".fileprovider\",file);\r\n        }else{\r\n            imageUri = Uri.fromFile(file);\r\n        }\r\n        // 指定拍照存储位置的方式调起相机\r\n//        String filePath = Environment.getExternalStorageDirectory() + File.separator\r\n//                + Environment.DIRECTORY_PICTURES + File.separator;\r\n//        String fileName = \"IMG_\" + DateFormat.format(\"yyyyMMdd_hhmmss\", Calendar.getInstance(Locale.CHINA)) + \".jpg\";\r\n//        imageUri = Uri.fromFile(new File(filePath + fileName));\r\n\r\n//        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n//        intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);\r\n//        startActivityForResult(intent, REQUEST_CODE);\r\n\r\n        // 选择图片（不包括相机拍照）,则不用成功后发刷新图库的广播\r\n//        Intent i = new Intent(Intent.ACTION_GET_CONTENT);\r\n//        i.addCategory(Intent.CATEGORY_OPENABLE);\r\n//        i.setType(\"image/*\");\r\n//        startActivityForResult(Intent.createChooser(i, \"Image Chooser\"), REQUEST_CODE);\r\n\r\n        Intent captureIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);\r\n        captureIntent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);\r\n        System.out.println(\"imageUri:\"+imageUri);\r\n//        Intent chooserIntent = Intent.createChooser(Photo, \"Image Chooser\");\r\n//        chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Parcelable[]{captureIntent});\r\n\r\n        startActivityForResult(captureIntent, REQUEST_CODE);\r\n        System.out.println(\"captureIntent:\"+captureIntent);\r\n    }\r\n\r\n}\r\n\r\n~~~\r\n\r\n有问题或者需要帮助的同学联系邮箱zjhChester@gmail.com\r\n\r\n![1580461697040](https://zjhchester.github.io/img/apple-touch-icon.png)', '2019-10-15 00:00:00', 'zjh', NULL, 'android\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99030, '异步加载ajax', '# 异步加载Ajax\r\n\r\n#### 原生ajax\r\n\r\n~~~javascript\r\n//获取对象', '# 异步加载Ajax\r\n\r\n#### 原生ajax\r\n\r\n~~~javascript\r\n//获取对象\r\nvar xhr = new XMLHttpResquest();\r\n//设置请求行 Get请求的参数拼接在请求地址后面  \r\nxhr.open(\"Get\",\"/testGet?username=\",\"true\")\r\n//设置请求头 GET请求可以不写，POST必须写\r\nxhr.setResquestHeader(\"Content-type;application/x-www-form-urlencoded\")\r\n//设置回调函数\r\nxhr.onload = function(){\r\n     consloe.log(xhr.responseText);\r\n}\r\n//发送请求  Get请求留空或者Null  POST请求在里面拼接传输的数据\r\n//xhr.send(null);\r\nxhr.send(\"username=xxx&password=xxx\")\r\n~~~\r\n\r\n#### jQuery的ajax\r\n\r\n~~~javascript\r\n//jQuery.ajax()\r\n$.ajax({\r\n   url:    ,//请求路径\r\n   type:   ,//请求方式\r\n   async:true,//是否异步，默认为true\r\n   data:{\"username\":\"zjh\"},//数据\r\n   dataType:application/json,//数据类型\r\n   //回调函数\r\n   success:function(res){//成功\r\n    \r\n},error(error){//失败\r\n    \r\n}\r\n});\r\n~~~\r\n\r\n', '2019-10-16 00:00:00', 'zjh', NULL, 'ajax\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99031, 'SSM 整合jackson(JSON)', '## SSM 整合jackson(JSON)\r\n\r\n## 前言：\r\n\r\n以前使用的jsonarray', '## SSM 整合jackson(JSON)\r\n\r\n## 前言：\r\n\r\n以前使用的jsonarray包需要依赖的包太多，分别是：\r\n\r\n1、commons-beanutils-1.7.0.jar\r\n\r\n2、commons-collections-3.1.jar\r\n\r\n3、commons-lang-2.5.jar\r\n\r\n4、commons-logging.jar\r\n\r\n5、ezmorph-1.0.3.jar\r\n\r\n6、json-lib-2.1-jdk15.jar\r\n\r\njackson可以很好地解决依赖的这个问题，使咱们使用json更简洁和容易\r\n\r\n## SSM使用：\r\n\r\n#### 1、导入maven坐标\r\n\r\n```xml\r\n<dependency>  <groupId>com.fasterxml.jackson.core</groupId>  <artifactId>jackson-databind</artifactId>  <version>2.9.8</version></dependency>\r\n```\r\n\r\n#### 2、使用：控制器加上@ResponseBody，并且返回类型两种情况：一种是实体类型，一种是实体集合，从而使得返回数据直接被封装成json格式\r\n\r\n返回值使用实体类或实体集合，就可以直接转换成json字符串\r\n\r\n```java\r\n@ResponseBody@RequestMapping(\"/equalFaces\")\r\npublic User equalFaces(String base64, HttpServletRequest request)\r\n```\r\n\r\n\r\n\r\n## 番外：\r\n\r\n## spring4.0+内置tomcat 基于@EnableWebMvc注解的字符转换（这里使用alibaba的fastjson为例）\r\n\r\n上述讲的jackson也可以用同样的方式去转换，\r\n\r\n~~~xml\r\n <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>fastjson</artifactId>\r\n            <version>1.2.58</version>\r\n        </dependency>\r\n~~~\r\n\r\n\r\n\r\n~~~java\r\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\r\npublic class MvcConf implements WebMvcConfigurer {\r\n    @Override\r\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n//        字符转换  包括解决中文乱码\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        fastJsonHttpMessageConverter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"text/html;charset=utf-8\"));\r\n        converters.add(fastJsonHttpMessageConverter);\r\n    }\r\n~~~\r\n\r\n这里是演示如何用javaConfiguration去代替xml中的springmvc配置', '2019-10-28 00:00:00', 'zjh', NULL, 'JSON\r\n---\r', 1, '0');
INSERT INTO `exception` VALUES (99032, 'spring中的aop（Aspect Oriented Programming）(切面编程)', '# spring中的aop（Aspect Oriented Programming）(切面编程)\r\n', '# spring中的aop（Aspect Oriented Programming）(切面编程)\r\n\r\n## 1、前言\r\n\r\n在认识aop之前我们需需要了解一下动态代理（基于基础不扎实的原因，可能缺失）\r\n\r\n#### 1、什么是代理：\r\n\r\n*、在以前，我们买东西是从厂商直接拿：消费者----->厂商（生产和销售），这样的弊端就是厂商的成本太高，既要关乎生产，又要关乎销售。\r\n\r\n*、逐渐的，我们到现在的消费模式是：消费者--->销售商（代理商）---->厂商，这样就减少了厂商的运营成本。\r\n\r\n#### 2、java中的代理模式：\r\n\r\n以上的模式咱们也可以在java代码中实现，在什么情况实现呢呢，举个例子：咱们使用JDBC进行数据持久化的时候，我们在正式持久化之前，需要先加载驱动，建立连接；在持久化完成之后，我们需要关闭连接，释放资源；此类的重复的工作，我们可以建立一个工具类帮助我们完成。\r\n\r\n###### 1、静态代理\r\n\r\n实现原理：\r\n\r\n​	这里我就不写静态代理的源码了，大概含义就是，咱们写一个jdbc的实现类，对每个方法执行前，咱们先执行需要执行的工作，比如加载驱动，建立连接，执行之后咱们关闭连接，释放资源，这样我们的重复代码肯定会减少特别多的冗余，使代码的可读性更高，到这里，咱们就有了aop的意思了。\r\n\r\n弊端：\r\n\r\n​	如果持久化中咱们有n个需要进行的动作，那么咱们就需要写n个实现类去进行切面式的代理，而且如果临时更改一些驱动，那么咱们就需要对**源码进行修改，耦合性比较高**。\r\n\r\n###### 2、动态代理\r\n\r\n实现原理：\r\n\r\n  所谓动态代理，就是让静态代理中，需要创建实现类的方法，得到了优化，在哪里实现某个动作，就在哪里去代理这个对象，即：**随用随代理，并且实现了不改变源码的情况下对原有方法进行增强**\r\n\r\n实现代码：使用的就是jdk官方提供的接口动态代理Proxy.newProxyInstance,去编写咱们的动态代理\r\n\r\n~~~java\r\nAccountService accountService1 = (AccountService)Proxy.newProxyInstance(accountService.getClass().getClassLoader(), accountService.getClass().getInterfaces(), new InvocationHandler() {\r\n            /**\r\n             *原生动态代理代码  接口动态代理  提供者  jdk官方\r\n             * @param proxy 代理对象的引用\r\n             * @param method 代理的方法\r\n             * @param args 参数列表\r\n             * @return\r\n             * @throws Throwable\r\n             */\r\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n                Object rtValue = null;\r\n                try {\r\n                    System.out.println(\"前置 原生接口动态代理\");\r\n                    if (\"saveAccount\".equals(method.getName())) {\r\n                        rtValue = method.invoke(accountService,args);\r\n                    }\r\n                    System.out.println(\"后置 原生接口动态代理\");\r\n                    return rtValue;\r\n                } catch (Throwable t) {\r\n                    System.out.println(\"异常 原生接口动态代理\");\r\n                } finally {\r\n                    System.out.println(\"最终 原生接口动态代理\");\r\n                }\r\n                return rtValue;\r\n            }\r\n        });\r\n        accountService1.saveAccount();\r\n~~~\r\n\r\n这样就实现了，随用随代理，对源码并没有改动。\r\n\r\n## 2、spring中的aop\r\n\r\n与动态代理模式一个思想，用spring的方法去实现动态代理\r\n\r\n#### 1、思想和源码\r\n\r\n话不多说 上代码   该例子是模拟一个账户的添加修改删除操作，并且在这些进行这些操作时，记录日志。\r\n\r\n1、beans.xml\r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:context=\"http://www.springframework.org/schema/context\"\r\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\r\n        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd\r\n        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd\r\n\">\r\n\r\n\r\n    <!--开启ioc注解扫描-->\r\n    <context:component-scan base-package=\"cn.tfs\"/>\r\n    \r\n    <!--开启aop注解扫描-->\r\n    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>\r\n\r\n    <!--手动编写aop实现的xml-->\r\n    <!--<aop:config>-->\r\n        <!--<aop:pointcut id=\"pt1\" expression=\"execution(* cn.tfs.service.impl.*.*(..))\"/>-->\r\n        <!--<aop:aspect ref=\"logger\">-->\r\n            <!--<aop:before method=\"beforeLog\" pointcut-ref=\"pt1\"/>-->\r\n            <!--<aop:after-returning method=\"afterReturningLog\" pointcut-ref=\"pt1\"/>-->\r\n            <!--<aop:after-throwing method=\"afterThrowingLog\" pointcut-ref=\"pt1\"/>-->\r\n            <!--<aop:after method=\"afterLog\" pointcut-ref=\"pt1\"/>-->\r\n            <!--&lt;!&ndash;<aop:around method=\"AroundLog\" pointcut-ref=\"pt1\"/>&ndash;&gt;-->\r\n        <!--</aop:aspect>-->\r\n    <!--</aop:config>-->\r\n\r\n\r\n\r\n\r\n</beans>\r\n~~~\r\n\r\n2、AccountService.java\r\n\r\n~~~java\r\npackage cn.tfs.service;\r\n\r\nimport org.springframework.stereotype.Service;\r\n\r\npublic interface AccountService {\r\n    void saveAccount();\r\n    void updateAccount(int i);\r\n    int deleteAccount();\r\n}\r\n\r\n~~~\r\n\r\n3、AccountServiceImpl.java\r\n\r\n~~~java\r\npackage cn.tfs.service.impl;\r\n\r\nimport cn.tfs.service.AccountService;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service(\"accountService\")\r\npublic class AccountServiceImpl implements AccountService {\r\n    public void saveAccount() {\r\n        System.out.println(\"保存了账户....\");\r\n//       int i= 1/0;\r\n    }\r\n\r\n    public void updateAccount(int i) {\r\n        System.out.println(\"更新了账户....\");\r\n\r\n    }\r\n\r\n    public int deleteAccount() {\r\n        System.out.println(\"删除了账户....\");\r\n        return 0;\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n4、TestAop.java\r\n\r\n~~~java\r\npublic class TestAop {\r\n\r\npublic static void main(){\r\nAccountService accountService = new ClassPathXmlApplicationContext(\"beans.xml\").getBean(\"accountService\",AccountService.class);\r\n        accountService.saveAccount();\r\n	}\r\n}\r\n~~~\r\n\r\n5、pom.xml\r\n\r\n~~~xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>cn.tfs</groupId>\r\n    <artifactId>aop</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <packaging>jar</packaging>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>5.0.2.RELEASE</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.8.7</version>\r\n        </dependency>\r\n    </dependencies>\r\n</project>\r\n~~~\r\n\r\n6、Log.java\r\n\r\n~~~java\r\npackage cn.tfs.utils;\r\n\r\nimport org.aspectj.lang.ProceedingJoinPoint;\r\nimport org.aspectj.lang.annotation.*;\r\nimport org.springframework.stereotype.Component;\r\n\r\n/**\r\n * 日志通知类  模拟aop实现切面编程\r\n */\r\n@Component(\"logger\")\r\n@Aspect\r\npublic class Log {\r\n    //到方法名： 访问修饰符 返回值 全限定类名.方法名(参数列表)\r\n    @Pointcut(\"execution(* cn.tfs.service.impl.*.*(..))\")\r\n    public void po1(){ }\r\n    //前置通知\r\n    @Before(\"po1()\")\r\n    public void beforeLog(){\r\n        System.out.println(\"beforeLog....前置通知\");\r\n    }\r\n    //后置通知\r\n    @AfterReturning(\"po1()\")\r\n    public void afterReturningLog(){\r\n        System.out.println(\"afterReturningLog....后置通知\");\r\n    }\r\n    //异常通知\r\n    @AfterThrowing(\"po1()\")\r\n    public void afterThrowingLog(){\r\n        System.out.println(\"afterThrowingLog....异常通知\");\r\n    }\r\n    //最终通知\r\n    @After(\"po1()\")\r\n    public void afterLog(){\r\n        System.out.println(\"afterLog....最终通知\");\r\n    }\r\n	//环绕通知\r\n//    @Around(\"po1()\")\r\n    public Object AroundLog(ProceedingJoinPoint pjp){\r\n        Object rtValue = null;\r\n        try{\r\n            System.out.println(\"AroundLog....前置通知\");\r\n\r\n            Object[] args = pjp.getArgs();\r\n            rtValue = pjp.proceed(args);\r\n\r\n            System.out.println(\"AroundLog....后置通知\");\r\n            return rtValue;\r\n        }catch (Throwable t){\r\n\r\n            System.out.println(\"AroundLog....异常通知\");\r\n        }finally {\r\n\r\n            System.out.println(\"AroundLog....最终通知\");\r\n        }\r\n        return  rtValue;\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n\r\n\r\n#### 2、需要注意的问题\r\n\r\naspectj基于全注解的aop，在分别实现aop的前置后置异常最终通知，他的位置会有一点点出入（后置通知/异常通知  会执行在最终通知之后）\r\n\r\n\r\n\r\n所以建议的是使用xml配置形式或者基于全注解的环绕通知的形式进行spring中各个层之间的事务控制', '2019-11-07 00:00:00', 'zjh', NULL, 'spring\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99033, 'maven项目构建慢的解决方法', '# maven项目构建慢的解决方法:\r\n\r\n在咱们创建maven项目的时候最终会让你确定一个配置的时', '# maven项目构建慢的解决方法:\r\n\r\n在咱们创建maven项目的时候最终会让你确定一个配置的时候(finish上一步)添加这个\r\n\r\n~~~xml\r\narchetypeCatalog:internal\r\n~~~\r\n\r\n', '2019-11-30 00:00:00', 'zjh', NULL, 'maven\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99034, 'spring中的aop（Aspect Oriented Programming）(切面编程)', '#          spring中的aop（Aspect Oriented Programming', '#          spring中的aop（Aspect Oriented Programming）(切面编程)\n\n##          1、前言\n\n在认识aop之前我们需需要了解一下动态代理（基于基础不扎实的原因，可能缺失）\n\n####          1、什么是代理：\n\n*、在以前，我们买东西是从厂商直接拿：消费者----->厂商（生产和销售），这样的弊端就是厂商的成本太高，既要关乎生产，又要关乎销售。\n\n*、逐渐的，我们到现在的消费模式是：消费者--->销售商（代理商）---->厂商，这样就减少了厂商的运营成本。\n\n####          2、java中的代理模式：\n\n以上的模式咱们也可以在java代码中实现，在什么情况实现呢呢，举个例子：咱们使用JDBC进行数据持久化的时候，我们在正式持久化之前，需要先加载驱动，建立连接；在持久化完成之后，我们需要关闭连接，释放资源；此类的重复的工作，我们可以建立一个工具类帮助我们完成。\n\n######          1、静态代理\n\n实现原理：\n\n​	这里我就不写静态代理的源码了，大概含义就是，咱们写一个jdbc的实现类，对每个方法执行前，咱们先执行需要执行的工作，比如加载驱动，建立连接，执行之后咱们关闭连接，释放资源，这样我们的重复代码肯定会减少特别多的冗余，使代码的可读性更高，到这里，咱们就有了aop的意思了。\n\n弊端：\n\n​	如果持久化中咱们有n个需要进行的动作，那么咱们就需要写n个实现类去进行切面式的代理，而且如果临时更改一些驱动，那么咱们就需要对**源码进行修改，耦合性比较高**。\n\n######          2、动态代理\n\n实现原理：\n\n  所谓动态代理，就是让静态代理中，需要创建实现类的方法，得到了优化，在哪里实现某个动作，就在哪里去代理这个对象，即：**随用随代理，并且实现了不改变源码的情况下对原有方法进行增强**\n\n实现代码：使用的就是jdk官方提供的接口动态代理Proxy.newProxyInstance,去编写咱们的动态代理\n\n~~~java\nAccountService accountService1 = (AccountService)Proxy.newProxyInstance(accountService.getClass().getClassLoader(), accountService.getClass().getInterfaces(), new InvocationHandler() {\n            /**\n             *原生动态代理代码  接口动态代理  提供者  jdk官方\n             * @param proxy 代理对象的引用\n             * @param method 代理的方法\n             * @param args 参数列表\n             * @return\n             * @throws Throwable\n             */\n            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                Object rtValue = null;\n                try {\n                    System.out.println(\"前置 原生接口动态代理\");\n                    if (\"saveAccount\".equals(method.getName())) {\n                        rtValue = method.invoke(accountService,args);\n                    }\n                    System.out.println(\"后置 原生接口动态代理\");\n                    return rtValue;\n                } catch (Throwable t) {\n                    System.out.println(\"异常 原生接口动态代理\");\n                } finally {\n                    System.out.println(\"最终 原生接口动态代理\");\n                }\n                return rtValue;\n            }\n        });\n        accountService1.saveAccount();\n~~~\n\n这样就实现了，随用随代理，对源码并没有改动。\n\n##          2、spring中的aop\n\n与动态代理模式一个思想，用spring的方法去实现动态代理\n\n####          1、思想和源码\n\n话不多说 上代码   该例子是模拟一个账户的添加修改删除操作，并且在这些进行这些操作时，记录日志。\n\n1、beans.xml\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd\n\">\n\n\n    <!--开启ioc注解扫描-->\n    <context:component-scan base-package=\"cn.tfs\"/>\n    \n    <!--开启aop注解扫描-->\n    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>\n\n    <!--手动编写aop实现的xml-->\n    <!--<aop:config>-->\n        <!--<aop:pointcut id=\"pt1\" expression=\"execution(* cn.tfs.service.impl.*.*(..))\"/>-->\n        <!--<aop:aspect ref=\"logger\">-->\n            <!--<aop:before method=\"beforeLog\" pointcut-ref=\"pt1\"/>-->\n            <!--<aop:after-returning method=\"afterReturningLog\" pointcut-ref=\"pt1\"/>-->\n            <!--<aop:after-throwing method=\"afterThrowingLog\" pointcut-ref=\"pt1\"/>-->\n            <!--<aop:after method=\"afterLog\" pointcut-ref=\"pt1\"/>-->\n            <!--&lt;!&ndash;<aop:around method=\"AroundLog\" pointcut-ref=\"pt1\"/>&ndash;&gt;-->\n        <!--</aop:aspect>-->\n    <!--</aop:config>-->\n\n\n\n\n</beans>\n~~~\n\n2、AccountService.java\n\n~~~java\npackage cn.tfs.service;\n\nimport org.springframework.stereotype.Service;\n\npublic interface AccountService {\n    void saveAccount();\n    void updateAccount(int i);\n    int deleteAccount();\n}\n\n~~~\n\n3、AccountServiceImpl.java\n\n~~~java\npackage cn.tfs.service.impl;\n\nimport cn.tfs.service.AccountService;\nimport org.springframework.stereotype.Service;\n\n@Service(\"accountService\")\npublic class AccountServiceImpl implements AccountService {\n    public void saveAccount() {\n        System.out.println(\"保存了账户....\");\n//       int i= 1/0;\n    }\n\n    public void updateAccount(int i) {\n        System.out.println(\"更新了账户....\");\n\n    }\n\n    public int deleteAccount() {\n        System.out.println(\"删除了账户....\");\n        return 0;\n    }\n}\n\n~~~\n\n4、TestAop.java\n\n~~~java\npublic class TestAop {\n\npublic static void main(){\nAccountService accountService = new ClassPathXmlApplicationContext(\"beans.xml\").getBean(\"accountService\",AccountService.class);\n        accountService.saveAccount();\n	}\n}\n~~~\n\n5、pom.xml\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>cn.tfs</groupId>\n    <artifactId>aop</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.0.2.RELEASE</version>\n        </dependency>\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.8.7</version>\n        </dependency>\n    </dependencies>\n</project>\n~~~\n\n6、Log.java\n\n~~~java\npackage cn.tfs.utils;\n\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\n/**\n * 日志通知类  模拟aop实现切面编程\n */\n@Component(\"logger\")\n@Aspect\npublic class Log {\n    //到方法名： 访问修饰符 返回值 全限定类名.方法名(参数列表)\n    @Pointcut(\"execution(* cn.tfs.service.impl.*.*(..))\")\n    public void po1(){ }\n    //前置通知\n    @Before(\"po1()\")\n    public void beforeLog(){\n        System.out.println(\"beforeLog....前置通知\");\n    }\n    //后置通知\n    @AfterReturning(\"po1()\")\n    public void afterReturningLog(){\n        System.out.println(\"afterReturningLog....后置通知\");\n    }\n    //异常通知\n    @AfterThrowing(\"po1()\")\n    public void afterThrowingLog(){\n        System.out.println(\"afterThrowingLog....异常通知\");\n    }\n    //最终通知\n    @After(\"po1()\")\n    public void afterLog(){\n        System.out.println(\"afterLog....最终通知\");\n    }\n	//环绕通知\n//    @Around(\"po1()\")\n    public Object AroundLog(ProceedingJoinPoint pjp){\n        Object rtValue = null;\n        try{\n            System.out.println(\"AroundLog....前置通知\");\n\n            Object[] args = pjp.getArgs();\n            rtValue = pjp.proceed(args);\n\n            System.out.println(\"AroundLog....后置通知\");\n            return rtValue;\n        }catch (Throwable t){\n\n            System.out.println(\"AroundLog....异常通知\");\n        }finally {\n\n            System.out.println(\"AroundLog....最终通知\");\n        }\n        return  rtValue;\n    }\n}\n\n~~~\n\n\n\n####          2、需要注意的问题\n\naspectj基于全注解的aop，在分别实现aop的前置后置异常最终通知，他的位置会有一点点出入（后置通知/异常通知  会执行在最终通知之后）\n\n\n\n所以建议的是使用xml配置形式或者基于全注解的环绕通知的形式进行spring中各个层之间的事务控制', '2019-12-18 00:00:00', 'zjh', NULL, 'spring\n-', 1, '0');
INSERT INTO `exception` VALUES (99035, '异步加载Ajax', '#    异步加载Ajax\n\n####    原生ajax\n\n~~~javascript\n//获取对', '#    异步加载Ajax\n\n####    原生ajax\n\n~~~javascript\n//获取对象\nvar xhr = new XMLHttpResquest();\n//设置请求行 Get请求的参数拼接在请求地址后面  \nxhr.open(\"Get\",\"/testGet?username=\",\"true\")\n//设置请求头 GET请求可以不写，POST必须写\nxhr.setResquestHeader(\"Content-type;application/x-www-form-urlencoded\")\n//设置回调函数\nxhr.onload = function(){\n     consloe.log(xhr.responseText);\n}\n//发送请求  Get请求留空或者Null  POST请求在里面拼接传输的数据\n//xhr.send(null);\nxhr.send(\"username=xxx&password=xxx\")\n~~~\n\n####    jQuery的ajax\n\n~~~javascript\n//jQuery.ajax()\n$.ajax({\n   url:    ,//请求路径\n   type:   ,//请求方式\n   async:true,//是否异步，默认为true\n   data:{\"username\":\"zjh\"},//数据\n   dataType:application/json,//数据类型\n   //回调函数\n   success:function(res){//成功\n    \n},error(error){//失败\n    \n}\n});\n~~~\n', '2019-12-18 00:00:00', 'zjh', NULL, 'Ajax\n-', 1, '1');
INSERT INTO `exception` VALUES (99036, 'mysql入门', '## mysql教学：\r\n\r\n### 1、登录\r\n\r\n##### 1.1、参数解释\r\n\r\n-h:Ho', '## mysql教学：\n\n### 1、登录\n\n##### 1.1、参数解释\n\n-h:Host  主机名（ip地址）\n-P:数据库端口号（3306）\n-u:登录的账户名(root（默认）、权限（增删查改）是最大)\n-p：密码\nmysql -hlocalhost -P3306 -uroot -p\n\n---\n\n登录我本机的数据库（在主机名IP和端口号没有改变的情况下）-h localhost -P3306\nmysql -uroot -p\n\n### 2、常规命令\n\n#### 2.1使用数据库，查看数据库列表，查看表的列表\n\n一个数据库会有多张表，一个表会有多条数据\n\n\n\n查看数据库列表：show databases;\n\n使用数据库：use database_name;\n\n查看库中的表的列表：show tables from database_name;\n\n查看表的结构：desc table_name;\n\n#### 2.2数据库的CRUD操作（增删查改）\n\n##### 2.2.1创建数据库：\n\ncreate database yourDatabaseName;\n\n##### 2.2.2创建数据库中的表：\n\nuse zjh;\n\nmysql> create table user(\n    -> name varchar(255),\n    -> password varchar(255)\n    -> );\n\n参数解释:\n\n（第一个是字段名，第二个是数据类型）\n\n##### 2.2.3插入表中数据：\n\ninsert into user(name,password) values(\'张嘉豪\',\'123\');\n\n参数解释：\n\ninsert into 表名（需要插入的字段名） values(需要插入的数据);\n\n注意事项：如果不写插入的字段名，默认就是全字段插入；\n\n##### 2.2.3修改表中数据：\n\n update user set password = \'123\',name =\'付文豪1\' where name = \'付文豪\';\n\n参数解释：\n\nset  后面的是修改的字段的内容\n\nwhere 后面是修改字段的执行条件， 多条件执行的时候用and连接\n\n##### 2.2.4删除表中数据：\n\n​	a)删除单条数据： delete from user where name = \'张嘉豪1\';\n\n​	b)删除所有数据：delete from user;\n\n##### 2.2.5查询表中数据：\n\n简单查询：（不涉及到多表或者级联查询）\n\nselect * from user;\n\n参数解释 :select、from 代表关键词,第二个参数代表需要查询的字段，或者一些函数集合，第四个参数是表名，并且可以条件查询；\n\n例子sql语句：\n\nselect count(password) from user;\n\nselect password from user;\n\nselect name from user where password is null;\n\n级联查询：\n\nselect subject_name,points from grade where id = (select id from user where name = \'张嘉豪\');\n\n#### 2.3特殊名词：\n\n##### 2.3.1主键：\n\n概念：一个表中，可以作为唯一标识的字段，在表中，不重复不为空。\n\n举例：（学号，教职工号，身份证号）\n\n##### 2.3.2外键：\n\n概念：在不同表中，可以起到关联性作用的字段。\n\n举例：比如一个学生被开除，选课信息，成绩信息，参评信息都会在开除的一瞬间同时删除掉', '2020-01-18 00:00:00', 'zjh', NULL, 'mysql\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99037, '手把手搭建 零配置文件的spring项目', '# 手把手搭建 零配置文件的spring项目（java Configuration 代替xml编写配', '# 手把手搭建 零配置文件的spring项目（java Configuration 代替xml编写配置文件，并脱离web.xml启动web项目）\r\n\r\n## 前言：\r\n\r\n要知道，在自我学习的过程中都有一个过渡的阶段，作为刚刚大三的学生，深有体会，书本和课程大纲教授的是基于spring2.5和tomcat3.0以下版本的ssm项目结构，相当于是最基础的一代版本，然而在目前最前沿的技术springboot面前，是跨越了几十个版本的，在掌握了最基础的ssm结构的时候，就想要去解除springboot的东西，内心就会有一些疑问，比如：他是如何做到零配置，怎么做到零web.xml启动web项目，怎么做到默认优于配置的，这篇文章希望带给你有所帮助。\r\n\r\n再次之前我也是找了各大论坛，各大社区，去解答疑惑，最后还是落眼在spring.io官网，我发现官网提供的就是我想要的那种效果，\r\n\r\nhttps://docs.spring.io/spring/docs/current/spring-framework-reference/web.html\r\n\r\n官网里给了一个比较直观的方式去初始化咱们的spring：\r\n\r\n~~~java\r\npublic class MyWebApplicationInitializer implements WebApplicationInitializer {\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletCxt) {\r\n\r\n        // Load Spring web application configuration\r\n        AnnotationConfigWebApplicationContext ac = new AnnotationConfigWebApplicationContext();\r\n        ac.register(AppConfig.class);\r\n        ac.refresh();\r\n\r\n        // Create and register the DispatcherServlet\r\n        DispatcherServlet servlet = new DispatcherServlet(ac);\r\n        ServletRegistration.Dynamic registration = servletCxt.addServlet(\"app\", servlet);\r\n        registration.setLoadOnStartup(1);\r\n        registration.addMapping(\"/app/*\");\r\n    }\r\n}\r\n~~~\r\n\r\n通过一个类去实现WebApplicationInitializer接口，并且重写onStartup方法来启动咱们的spring\r\n\r\n可以看到源码里的注释，第一个是加载springweb应用的配置（就是咱们的ioc容器和mvc的配置），第二个是初始化并注册一个DispatcherServlet通过new的方式。\r\n\r\n熟悉springweb应用加载顺序的同学肯定很容易就知道了这里代替了咱们传统smm中的哪一部分：\r\n\r\n1、加载springweb应用的配置（mvc和ioc）\r\n\r\n~~~xml\r\n<!--通过dispatcherservlet加载mvc的配置-->\r\n<init-param>\r\n      <param-name>contextConfigLocation</param-name>\r\n      <param-value>classpath*:spring-mvc.xml</param-value>\r\n    </init-param>\r\n    <load-on-startup>1</load-on-startup>\r\n<!--通过监听器初始化ioc容器-->\r\n<listener>\r\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\r\n  </listener>\r\n  <context-param>\r\n    <param-name>contextConfigLocation</param-name>\r\n    <param-value>classpath*:beans.xml</param-value>\r\n  </context-param>\r\n~~~\r\n\r\n\r\n\r\n2、初始化并注册一个DispatcherServlet\r\n\r\n~~~xml\r\n <servlet>\r\n    <servlet-name>dispatcherServlet</servlet-name>\r\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n      </servlet>\r\n  <servlet-mapping>\r\n    <servlet-name>dispatcherServlet</servlet-name>\r\n    <url-pattern>/</url-pattern>\r\n  </servlet-mapping>\r\n~~~\r\n\r\n官网给出的那一大串代码其实就是代替了以上两段web.xml内的配置文件，那官网是如何做到这么简短的呢？这里就需要提到一个名词java Configuration。\r\n\r\n## java Configuration：\r\n\r\n口头翻译即为java配置，其实就是用java代码去代替xml，使spring纯java加载。\r\n\r\n这里其实会有一个误区，不知道刚刚学完ssm的小伙伴会不会有同样的问题，java Configuration 和 注解，会不会想到是同一个东西，刚刚说到了Configuration其实就是用java代码代替xml,注解确实也是起到了同样的作用，但是注解和Configuration 是两个东西，这里我举个例子：\r\n\r\n~~~java\r\n//这是用注解的方式去\r\n@Component\r\nclass A{\r\n    public A MethodName(){\r\n        return new A();\r\n    }\r\n}\r\n//这是Configuration\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public MyService myService() {\r\n        return new MyServiceImpl();\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n可以看到两者是不同的两个东西，在spring官网也是有同样的区分别：\r\n\r\n Basic Concepts: `@Bean` and `@Configuration`\r\n\r\n`AnnotationConfigApplicationContext`\r\n\r\n所以不要进入这个误区了，好了，最基础的介绍到此结束，咱们开始正式进入零配置的解读。\r\n\r\n## 正文解读：\r\n\r\n咱们先回顾一下基于xml配置的ssm结构\r\n\r\n1、spring.xml   用于扫描包和整合mybatis,包含了数据源，sqlSessionFactoryBean等等 \r\n\r\n2、springmvc.xml  用于mvc配置，拦截器，静态资源映射，视图解析器等等\r\n\r\n3、web.xml  用于加载以上两个配置文件\r\n\r\nOK回顾完毕，然后我们看看，如何用javaconfiguration的方式吧上述全都给代替掉，\r\n\r\n在前言中，我也是说道了spring.io官网中给出了web.xml代替的方式即实现WebApplicationInitializer接口，重写onStartup方法，咱们先把源码搬过来，一条一条的读：\r\n\r\n~~~java\r\npublic class MyWebApplicationInitializer implements WebApplicationInitializer {\r\n    @Override\r\n    public void onStartup(ServletContext servletCxt) {\r\n//        web.xml 中的 listener 初始化\r\n        AnnotationConfigWebApplicationContext ac = new AnnotationConfigWebApplicationContext();\r\n//        listener中的加载spring.xml的配置文件内容\r\n        ac.register(MyApp.class);\r\n//        用于初始化spring配置文件 web项目可用可不用\r\n        ac.refresh();\r\n        //创建servlet容器\r\n        DispatcherServlet dispatcherServlet = new DispatcherServlet(ac);\r\n//        创建前端控制器去名字为dispatcherServlet  <servlet>标签\r\n        ServletRegistration.Dynamic registration = servletContext.addServlet(\"dispatcherServlet\", dispatcherServlet);\r\n//        <随服务器启动加载这个servlet\r\n        registration.setLoadOnStartup(1);\r\n//        <servlet-mapping>里面的url-patten\r\n        registration.addMapping(\"/*\");\r\n}\r\n~~~\r\n\r\nok，从上文中，咱们可以看到，在onStartup方法中，传入参数是ServletContext，内部的AnnotationConfigWebApplicationContext其实就是初始化ioc容器加载spring的配置文件，然后通过 ac.register(MyApp.class)，将MyApp这个类，注册并加载，细心的同学就会发现，其实这个MyApp.class才是最重要的那个配置文件，即基于Configuration的配置文件，这个文件我先丢个源码，这个里头就是涵盖了我们所有的spring,springmvc的配置内容，包括数据源等等\r\n\r\n~~~java\r\n@Configuration//表名是配置类\r\n@EnableWebMvc//标识可以写mvc的配置\r\n@ComponentScan(\"xyz.zjhwork\")//扫描包的路径  相当于<context:component-scan base-package=\"cn.yunge\">\r\npublic class MvcConf implements WebMvcConfigurer {\r\n    @Override\r\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n//        字符转换  包括解决中文乱码\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        fastJsonHttpMessageConverter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"text/html;charset=utf-8\"));\r\n        converters.add(fastJsonHttpMessageConverter);\r\n    }\r\n......\r\n~~~\r\n\r\n上述文件就是我的MyApp的类，这个名字当然可以随便取，显示申明当前的类是配置类，因为这里我们需要把mvc和spring 的配置丢在一起，所以这里我们还要标明这个类可以写mvc的配置，因此这类里头，我们可以写所以的mvc和spirng的配置，只是要学习一些将xml转换为javaconfiguration的写法。后面我会把这个类放一个基础完整的源码。\r\n\r\nok到这里我们再回顾一下，我们用javaconfiguration代替了那些原来的配置：\r\n\r\n`1、spring.xml  ---》MyApp类 ` <em style=\'color:green\'>√</em>\r\n\r\n`2、springmvc.xml ---》 MyApp类`  <em style=\'color:green\'>√</em>\r\n\r\n`3、web.xml  ----》onStartup方法`  <em style=\'color:green\'>√</em>\r\n\r\n好了，到这里相当于我们基于配置方面的东西，已经实现了，但是肯定会有想要知道原因的小伙伴问，凭什么他这里实现一个`WebApplicationInitializer`接口就能加载配置，原来的tomcat呢，springboot是不需要配置tomcat 的啊，人是直接启动，根本不需要再启动外置服务器，好，下面我就讲讲，以上说出的两个疑问。\r\n\r\n### WebApplicationInitializer接口：\r\n\r\n在官方文档解读中：\r\n\r\nIn a Servlet 3.0+ environment, you have the option of configuring the Servlet container programmatically as an alternative or in combination with a `web.xml` file. The following example registers a `DispatcherServlet`:\r\n\r\n这里说到，在`servlet3.0+`的环境中：\r\n\r\n~~~xml\r\n  <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>javax.servlet-api</artifactId>\r\n            <version>4.0.1</version>\r\n            <scope>provided</scope>\r\n  </dependency>\r\n~~~\r\n\r\n你可以通过configuring的方式去代替`web.xml`配置,并注册一个`dispatcherservlet`,所以，如果你的servlet版本在3.0+以上，只要你实现了WebApplicationInitializer这个接口就可以注册一个`dispatcherservlet`，正因为servlet3.0的规范规定，无论你使用的服务器是tomcat还是jetty,在服务器启动的时候都会先执行onStartup这个方法,由此去加载用于编写spring和mvc的配置内容，接下来就是咱们的内置tomcat服务器\r\n\r\n### 内置Tomcat:\r\n\r\n首先引入maven坐标\r\n\r\n~~~xml\r\n<!--核心包-->\r\n<dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-core</artifactId>\r\n            <version>8.5.33</version>\r\n</dependency>\r\n<!--加上这个不会报错误和异常-->\r\n <dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-jasper</artifactId>\r\n            <version>8.5.33</version>\r\n</dependency>\r\n~~~\r\n\r\n注意这里的tomcat版本一定要选择好，基于servlet3.0的tomcat是8.0+版本的，所以低于8.0版本的tomcat都是不支持servlet3.0规范的。\r\n\r\n导入内嵌tomcat包之后，我们就可以用一个main函数去启动tomcat，这样，我们就不需要外部去开启tomcat然后再部署项目了：\r\n\r\n~~~java\r\npublic class ApplicationStarter {\r\n    public static void run(){\r\n        //实例化tomcat\r\n        Tomcat tomcat = new Tomcat();\r\n        //设置端口号为9999\r\n        tomcat.setPort(9999);\r\n        //        标识tomcat启动为webapp\r\n        try {\r\n            tomcat.addWebapp(\"/1\",\"D://test/\");\r\n//            tomcat启动\r\n            tomcat.start();\r\n//            tomcat监听用户接入\r\n            tomcat.getServer().await();\r\n        } catch (LifecycleException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        //启动tomcat\r\n        run();\r\n    }\r\n}\r\n~~~\r\n\r\n这样的一个类，相当于就是咱们的spring项目的入口启动器，启动web项目就基于这样一个类，这里比较重要的一个地方就是`tomcat.addWebapp`**将当前的服务器启动标识为web项目**，**不然不会去加载咱们的`onStartup`方法，**\r\n\r\n到此，咱们的讲解就结束了，其他需要重视的就是在咱们把xml配置文件改写为configurtion的格式的时候注意写法，下面我就把最基础的配置，即MyApp配置类的内容发出来（一步一步敲出来的），拿去用的时候需要把里头的包名和开发自定义的部分的东西修改掉。\r\n\r\n~~~java\r\npackage xyz.zjhwork.springApplicationStarter.mvcConf;\r\n\r\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\r\nimport org.apache.ibatis.datasource.pooled.PooledDataSource;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.mybatis.spring.SqlSessionFactoryBean;\r\nimport org.mybatis.spring.mapper.MapperScannerConfigurer;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\nimport org.springframework.core.io.support.ResourcePatternResolver;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport xyz.zjhwork.interceptor.LoginInterceptor;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(\"xyz.zjhwork\")\r\npublic class MvcConf implements WebMvcConfigurer {\r\n    @Override\r\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n//        字符转换  包括解决中文乱码\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        fastJsonHttpMessageConverter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"text/html;charset=utf-8\"));\r\n        converters.add(fastJsonHttpMessageConverter);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        //拦截器注册\r\n        registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/newException\").addPathPatterns(\"/\")\r\n                .addPathPatterns(\"/userStatus\").addPathPatterns(\"/userExit\").addPathPatterns(\"/newException\").addPathPatterns(\"/myListException\").addPathPatterns(\"/userInfo\")\r\n        .addPathPatterns(\"/isFavByUsernameAndExceptionId\").addPathPatterns(\"/findFavByUsername\").addPathPatterns(\"/deleteFavFromFavByUsernameAndExceptionId\").addPathPatterns(\"/addFavByUsernameAndExceptionId\")\r\n        .addPathPatterns(\"/isAproByUsernameAndExceptionId\").addPathPatterns(\"/addAproByUsernameAndExceptionId\").addPathPatterns(\"/insertComment\").addPathPatterns(\"/findHistoryByUsername\").addPathPatterns(\"/userInfoUpdate\")\r\n        ;\r\n    }\r\n\r\n    @Override\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler(\"/css/**\").addResourceLocations(\"classpath:/static/css/\");\r\n        registry.addResourceHandler(\"/js/**\").addResourceLocations(\"classpath:/static/js/\");\r\n        registry.addResourceHandler(\"/img/**\").addResourceLocations(\"classpath:/static/img/\");\r\n        registry.addResourceHandler(\"/theme/**\").addResourceLocations(\"classpath:/static/theme/\");\r\n//        静态资源存放\r\n        registry.addResourceHandler(\"/*.html\").addResourceLocations(\"classpath:/static/\");\r\n\r\n    }\r\n\r\n    /**\r\n     * mybatisConf\r\n     *\r\n     * @return\r\n     */\r\n    @Bean(\"pooledDataSource\")\r\n    public DataSource dataSource() {\r\n        //加载db.properties 读取数据库基本信息\r\n        Properties pop = new Properties();\r\n        try {\r\n            pop.load(this.getClass().getClassLoader().getResourceAsStream(\"db.properties\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        PooledDataSource dataSource = new PooledDataSource();\r\n        try {\r\n            dataSource.setDriver(pop.getProperty(\"jdbc.driver\"));\r\n            dataSource.setUsername(pop.getProperty(\"jdbc.username\"));\r\n            dataSource.setPassword(pop.getProperty(\"jdbc.password\"));\r\n            dataSource.setUrl(pop.getProperty(\"jdbc.url\"));\r\n            dataSource.setDefaultAutoCommit(true);\r\n            dataSource.setPoolMaximumActiveConnections(20);\r\n            dataSource.setPoolMaximumIdleConnections(0);\r\n\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean(\"sqlSessionFactoryBean\")\r\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws IOException {\r\n        SqlSessionFactory factory;\r\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\r\n        bean.setDataSource(dataSource);\r\n        //加载mapper.xml\r\n        ResourcePatternResolver resolver = new ClassPathXmlApplicationContext();\r\n        bean.setMapperLocations(resolver.getResources(\"classpath*:/daoMappers/*.xml\"));\r\n        try {\r\n            factory = bean.getObject();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    @Bean(\"mapperScannerConfigurer\")\r\n    public MapperScannerConfigurer mapperScannerConfigurer() {\r\n        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\r\n        mapperScannerConfigurer.setBasePackage(\"xyz.zjhwork.dao\");\r\n        mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactoryBean\");\r\n        return mapperScannerConfigurer;\r\n    }\r\n}\r\n\r\n~~~\r\n\r\n## 结束：\r\n\r\n本文结束，不知道小伙伴看到全java代码的spring 有没有兴奋的感觉呢！有问题或者需要帮助的同学联系邮箱zjhChester@gmail.com\r\n\r\n![1580461697040](https://zjhchester.github.io/img/apple-touch-icon.png)', '2020-01-31 00:00:00', 'zjh', NULL, 'spring\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99038, 'JDBC(Java Database Connectivity，简称JDBC)---客户端程序如何来访问数据库', '# JDBC(Java Database Connectivity，简称JDBC)---客户端程序如', '# JDBC(Java Database Connectivity，简称JDBC)---客户端程序如何来访问数据库\r\n\r\n## 前言：\r\n\r\n主流架构：\r\n\r\n`1、BS架构(Browser  and Server) 浏览器服务器架构`--->`web、javaweb、phpweb`\r\n\r\n`2、CS架构(Client and Server) 客户端服务器架构` --->`QQ、微信`\r\n\r\n简言之就是用`java`程序去访问数据库\r\n\r\n## 正文：\r\n\r\nJDBC的连接步骤：\r\n\r\n`加载驱动`--->`建立连接`--->`执行语句`--->`得到结果集`\r\n\r\n1、加载驱动\r\n\r\n加载驱动，首先是先把驱动jar包导入\r\n\r\n~~~xml\r\n <!--mysql驱动-->\r\n    <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\r\n    <dependency>\r\n      <groupId>mysql</groupId>\r\n      <artifactId>mysql-connector-java</artifactId>\r\n      <version>8.0.11</version>\r\n    </dependency>\r\n~~~\r\n\r\n编写测试用例；\r\n\r\n~~~java\r\n //初始化驱动\r\n    public void init(){\r\n        try {\r\n            //加载mysql驱动\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            //建立连接  参数解释：第一个参数是数据库链接地址(不同数据库会有不同的连接地址，由数据库厂商提供)，第二个参数是用户名，第三个参数是密码\r\n            Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/zjh?serverTimezone=GMT&useSSL=false&allowPublicKeyRetrieval=true\", \"root\", \"123\");\r\n            //获取数据库预处理对象preparedStatement  并编写sql语句\r\n            PreparedStatement preparedStatement = conn.prepareStatement(\"select * from user\");\r\n            //执行查询语句\r\n            ResultSet resultSet = preparedStatement.executeQuery();\r\n            //循环读取查询结果集（因为查询的结果可能不止一条）\r\n            while(resultSet.next()){\r\n                //打印查询出来的第一个字段\r\n                System.out.println(resultSet.getString(1));\r\n            }\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    //编写主函数测试\r\n    public static void main(String[] args) {\r\n        new MyJdbc().init();\r\n    }\r\n\r\n~~~\r\n\r\n要知道，我们每访问一次数据库，其实都是与数据库建立了一次会话，建立会话之后，你所有的增删改查，都是在本次会话中进行的，假如说，会话终止，或者在建立会话的时候建立失败，那么你所有的增删改查的动作都无效\r\n\r\n需要注意的是，如果你执行的是查询语句，才会有结果集，如果是增加更新删除，只会有执行的条数，返回类型是型\r\n\r\n## 优化：\r\n\r\n再看看以上代码，其实有很大一部分咱们没有考虑到，所以他现在是烂代码，怎么把它变成好代码，降低耦合。\r\n\r\n所谓降低耦合就是降低程序之间的依赖关系，比如修改数据库参数的时候，咱们不用改动源码，直接在配置文件上面修改就可以运行(因为改了源码的话，还需要重新编译，编译之后的文件是.class的字节码文件，不能直接修改参数，所以我们需要借助配置文件的帮助)\r\n\r\n### 配置文件：\r\n\r\njava中配置文件主流的分两种，一种是properties,一种是xml，这里我使用的是properties。\r\n\r\n编写一个db.properties，存放到咱们的resource资源文件夹根目录下（里面一定不要为了格式而多大空格，空格会算入内容，以键值对的形式编写）\r\n\r\n~~~properties\r\n#降低程序代码间的依赖关系，使用配置文件\r\njdbc.url=jdbc:mysql://localhost:3306/zjh?serverTimezone=GMT&useSSL=false&allowPublicKeyRetrieval=true\r\njdbc.username=root\r\njdbc.password=123\r\n~~~\r\n\r\n接下来就是读取配置文件让咱们的代码依赖减少：\r\n\r\n~~~java\r\n  //读取配置文件\r\n            Properties properties = new Properties();\r\n            properties.load(this.getClass().getClassLoader().getResourceAsStream(\"db.properties\"));\r\n            conn = DriverManager.getConnection(properties.getProperty(\"jdbc.url\"),properties.getProperty(\"jdbc.username\") ,properties.getProperty(\"jdbc.password\") );\r\n~~~\r\n\r\n这样几遍改动数据库密码账号，我都不需要改动源码文件，只需要修改配置文件就可以了。\r\n\r\n### 注意事项：\r\n\r\n在一次会话结束之后，一定要注意，打开的资源要关闭，咱们jvm的内存和mysql的连接数是有限的，不能把资源一直开着，执行结束以后就关闭资源，养成良好的代码风格\r\n\r\n## 源码展示：\r\n\r\nMyJdbc.java\r\n\r\n~~~java\r\npackage cn.tfs.jdbc;\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.sql.*;\r\nimport java.util.Properties;\r\n\r\npublic class MyJdbc {\r\n    private Connection conn;\r\n    private PreparedStatement preparedStatement;\r\n    private ResultSet resultSet;\r\n    //初始化驱动\r\n    public void init(){\r\n        try {\r\n            //加载mysql驱动\r\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\r\n            //建立连接  参数解释：第一个参数是数据库链接地址(不同数据库会有不同的连接地址，由数据库厂商提供)，第二个参数是用户名，第三个参数是密码\r\n            //读取配置文件\r\n            Properties properties = new Properties();\r\n            properties.load(this.getClass().getClassLoader().getResourceAsStream(\"db.properties\"));\r\n            conn = DriverManager.getConnection(properties.getProperty(\"jdbc.url\"),properties.getProperty(\"jdbc.username\") ,properties.getProperty(\"jdbc.password\") );\r\n            //获取数据库预处理对象preparedStatement  并编写sql语句\r\n            preparedStatement = conn.prepareStatement(\"select * from user\");\r\n            //执行查询语句并将查询结果拿给结果集\r\n            resultSet = preparedStatement.executeQuery();\r\n            //循环读取查询结果集（因为查询的结果可能不止一条）\r\n            while(resultSet.next()){\r\n                //打印查询出来的第一个字段\r\n                System.out.print(resultSet.getString(\"id\")+\"\\t\");\r\n                System.out.print(resultSet.getString(\"name\")+\"\\t\");\r\n                System.out.print(resultSet.getString(\"age\")+\"\\t\");\r\n                System.out.println();\r\n            }\r\n        } catch (ClassNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            //释放资源 关闭连接  (必要的)\r\n            try {\r\n                resultSet.close();\r\n                preparedStatement.close();\r\n                conn.close();\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public String query(){\r\n        return \"\";\r\n    }\r\n    public int delete(){\r\n        return 0;\r\n    }\r\n    public int upDate(){\r\n        return 0;\r\n    }\r\n    public int add(){\r\n        return 0;\r\n    }\r\n\r\n    //编写主函数测试\r\n    public static void main(String[] args) {\r\n        new MyJdbc().init();\r\n    }\r\n}\r\n\r\n~~~\r\n\r\ndb.properties\r\n\r\n~~~properties\r\n#降低程序代码间的依赖关系，使用配置文件\r\njdbc.url=jdbc:mysql://localhost:3306/zjh?serverTimezone=GMT&useSSL=false&allowPublicKeyRetrieval=true\r\njdbc.username=root\r\njdbc.password=123\r\n~~~\r\n\r\n需要帮助的同学欢迎留言或者联系邮箱：zjhChester@gmail.com\r\n\r\n![1580540814070](https://zjhchester.github.io/img/apple-touch-icon.png)', '2020-02-01 00:00:00', 'zjh', NULL, 'java\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99039, '纯前后端分离项目的搜索引擎实战', '# 纯前后端分离项目的搜索引擎实战\r\n\r\n## 前言：\r\n\r\n本项目是与2019.12.12初步完成', '# 纯前后端分离项目的搜索引擎实战\r\n\r\n## 前言：\r\n\r\n本项目是与2019.12.12初步完成，基于`java configuration`的`ssm`后台，纯前后端分离项目，并内嵌tomcat，一键启动。\r\n\r\n本项目初衷是针对于小范围社区(企业，学校，院系)提供问题解决方案，不断扩充和更新的解决方案库。\r\n\r\n本项目所有后台代码和前端`js`交互逻辑代码均原创\r\n\r\n版本参数：\r\n\r\n`mysql`:`8.0.11`\r\n\r\n`spring`: `5.0.2.RELEASE`\r\n\r\n`mybatis`:`3.4.6`\r\n\r\n`servlet`:`4.0.1`\r\n\r\n`tomcat`:`8.5.33`\r\n\r\n## 正文：\r\n\r\n### 核心：\r\n\r\n为啥本项目取名为搜索引擎呢，在长达一周，超过60个小时的编码过程里，时间主要耗费在搜索这块的业务实现，所以最终把他定为搜索引擎的项目。\r\n\r\n#### 两个重点：\r\n\r\n搜索这一块我总结了一下两点为重点：\r\n\r\n1、在庞大的数据量下，如何把关键词更快更准确的检索出来\r\n\r\n2、在检索之前，如何过滤掉无效关键词和定位主次关键词，让搜索结果有效的排序。\r\n\r\nok咱们先聊一聊第一个问题，简而言之，就是搜索的效率和精准度。\r\n\r\n##### 搜索的效率和精准度。\r\n\r\n###### 首先，搜索的效率：\r\n\r\n其实在做项目之前，我有考虑到用es(ElasticSearch)做引擎搜索，不过，我想要去更深一步的发掘mysql的潜力，说白了就是提升自己的mysql能力，更大程度上，我是把es看成了一种工具，程序员嘛，有的时候同样业务效果，更喜欢去深究底层的东西。\r\n\r\n比较难搞的事情就是在最初课程学习mysql的时候，并没有去深入了解检索效率的问题，以至于数据库的水平就停留在最基础的sql语句水平，所以在项目之初，想不到如何入手这个`搜索引擎`。\r\n\r\n搜索=模糊匹配？\r\n\r\n说到搜索引擎，大部分人脑子里都会出现`模糊匹配`这个词组，所以呢，最初就是用sql语句like去实现最基本的检索需求\r\n\r\n~~~sql\r\nselect * from tableName where fieldName like \'%java%\'\r\n~~~\r\n\r\n然而在最初的3w条模拟数据下，我检索一个关键词\'`java`\',检索出来的时间居然是45s，并且在查询过程中，磁盘的读取利用率可以在任务管理器看到是100%。\r\n\r\namazing！那这还怎么玩，不考虑查询并发的问题，一个人查询就能把磁盘读取拉满，还有45s的等待时间，如果放网页上，那不直接就请求超时。\r\n\r\n那怎么办呢，原因是刚刚的sql语句like 如果是%%双百分号就是前后匹配，走的是全文检索，意思是一条一条的问，不会走咱们的索引，所以即便在标题关键词里面加入索引也不会优化目前的搜索速度，如何改呢，既然他不走索引，咱们要强制让他走索引，在翻阅相关资料后发现后匹配%即`\'java%\'`这种形式，是可以走索引的，这样一来虽然减少了匹配的条目，比如，在标题中央出现关键词，他就不会检索出来，但是现在的检索效率在测试后发现，从45s降到了惊人的0.6s！\r\n\r\n~~~sql\r\nselect * from tableName where fieldName like \'java%\'\r\n~~~\r\n\r\n然后在网上传的locate函数即\r\n\r\n~~~sql\r\nselect * from tableName where locate(\'keywords\',fieldName)\r\n~~~\r\n\r\n其实在很大程度上，和普通的like匹配无差，也不会走索引。\r\n\r\n在此基础上，因为模拟数据目前只有3w条，我就暂时没有去优化sql，而是更关心业务部分的东西，然而当最后的测试数据到了100w条的时候(总sql文件4.3G)的时候，全文检索一遍，即便是后置匹配走索引，查询时间居然是**120s**+！\r\n\r\n这可不得了，查阅了各方的文章都没有合适的回答，在最后要交付答卷前的2小时的时候，无聊的我尝试了两个sql语句\r\n\r\n~~~sql\r\nselect * from tableName limit 0,20;\r\n\r\n~~~\r\n\r\n~~~sql\r\nselect id from tableName limit 0,20;\r\nselect * from tableName where id = ${id}\r\n~~~\r\n\r\n看似业务效果相同的两个sql语句，甚至第二个感觉还会耗费更多的查询次数，然而实际效果是可能第二个跑完所有的20条数据，第一个连1/10的结果都没跑完，这里肯定有的同学会讲怎么可能，然而在庞大的100w条数据的支撑下，事实就是如此的不敢相信，最后检索的速度由最初的120s，稳定在了0.3s以内，也就是说，我在100w条数据内，不管搜索什么关键词，都能在1s以内把结果呈现给我。当然刚刚的第二条sql语句的第二条需要在后台里面循环去执行，ok，到此，搜索的效率就提升上来了。\r\n\r\n###### 接下来聊一聊搜索的精准度：\r\n\r\n这里的精准度，咱们先从原理上聊一聊，在后台吧数据拿到持久层之后，咱们可以从哪些方面去增加检索的精准度？细心地小伙伴肯定会发现，第一个是检索词的优化，另一个就是检索结果的良好排序，检索词的优化，咱们放到下一节代码层面上讲，这里咱们先把检索结果排序讲一讲。\r\n\r\n咱们知道，mysql like语句查询出来的结果，他是乱序的，除非你用order by 等等排序的限定词他会展示一定程度上的有序（发表时间，id顺序，首字母顺序等等），然而关乎查询精准度，咱们根本不回去关心他的id在前在后，发表时间是否是几年前或者今年（不过这个有可能有关结果更新程度），咱们最为关心的是什么？当然是查询出来的结果和关键词是否搭配，和关键词匹配度最高的结果条目。\r\n\r\n~~~sql\r\norder by length(fieldName) desc\r\n~~~\r\n\r\n以上就是在查询之后排序出和关键词字段匹配度最高的顺序。\r\n\r\nok，咱们接下来讨论一下第二个问题： \r\n\r\n#####  过滤掉无效关键词和定位主次关键词：\r\n\r\n这一部分，就是java代码呈现了\r\n\r\n说难也不难，每一句代码大家都看得懂，我大概解读一下，在前端拿回关键词之前，先用trim把两端的空格去掉(当然纯前后端分离我想的是最后在后端接收的时候也吧前后端的空格去掉一下)，拿到关键词之后咱们用split 通过正则表达式把空格以及很多个空格和一些高频的介词过滤掉\r\n\r\n~~~java\r\n String[] split = keywords.split(\"\\\\s+|、|，|。|；|？|！|,|\\\\.|;|\\\\?|!|]|的|得|地|中|内|外\");\r\n\r\n~~~\r\n\r\n当然我这里肯定还没有把介词写完整，那么现在的数组内部就得到了几个主要的关键词，当然里头还需要把空串给过滤掉\r\n\r\n~~~java\r\n  List<String> keywordsList = new ArrayList<>();\r\n        for (String s:\r\n                split) {\r\n            //处理介词空串\r\n            if(!\"\".equals(s)){\r\n                keywordsList.add(s);\r\n            }\r\n        }\r\n~~~\r\n\r\n空串过滤掉之后，就是最终我们要进行检索的关键词组，但是还要考虑如果这个人只输入了介词或者空格，因为咱们是前后端分离，要从接口层面把反馈给写好，所以良好的提示是必不可少的：\r\n\r\n~~~java\r\n    //如果只输入了介词直接返回\r\n        if(keywordsList.size()==0){\r\n            return ResponseModel.failResModel(0,\"please input args\");\r\n        }\r\n~~~\r\n\r\n最后的关键词集合需要把最初的关键词也加入，举个例子spring中的ioc，那么这个中的其实并不是为了隔离每个关键词，我们需要把整个词条也纳入关键词组\r\n\r\n~~~java\r\n  keywordsList.add(keywords);\r\n~~~\r\n\r\n这样我们的无效搜索和关键词优化就处理了。\r\n\r\n在这两个搜索重点之后呢，另外一个比较重要的就是用户体验。\r\n\r\n#### 关键词高亮算法\r\n\r\n所谓高亮，就是把搜索出来的词条里面的关键词的部分，给加上红色或者其他颜色，标识目前词条和用户所需关键词的匹配度，例如百度搜索的东西，这样看似很简单的东西，我用了两部分来完成，一部分是后台过滤无效关键词后，给出有效关键词，另一部分是前端把有效关键词拿到，通过遍历迭代把词组内部的关键词定位并染色。\r\n\r\n后台过滤无效关键词在上一部分已经给出，这里给出返回给前端的关键词语句：返回的格式是`关键词1,关键词2`\r\n\r\n~~~java\r\n  //其他优先级关键词\r\n        for (String s:\r\n             keywordsList) {\r\n            realKeywords.append(s+\",\");\r\n        }\r\n\r\nreturn ResponseModel.successResModel(1,realKeywords.toString().trim().substring(0,realKeywords.length()-1), resList.toArray());\r\n~~~\r\n\r\nrealKeywords这个集合就是有效关键词组\r\n\r\n前端高亮算法：\r\n\r\n~~~javascript\r\n//文字高亮   解决方案2  先把结果内容转小写 去匹配关键字的小写，匹配到了记录index,str.length 在原结果串取出来，再进行replace()\r\n               //1、取出关键词的小写\r\n                if(e.result != undefined){\r\n                    //转小写\r\n                    var lowercaseKeywords = e.desc.toLowerCase().split(\",\");\r\n                    for (var i = 0; i < e.result.length; i++) {\r\n                        //2、取结果串的小写\r\n                        var lowerResContent = e.result[i].title.toLowerCase();\r\n                        //3、匹配\r\n                        //找到后装到index[]\r\n                        var index=[];\r\n                        for (var j = 0; j < lowercaseKeywords.length; j++) {\r\n                            index.push(lowerResContent.indexOf(lowercaseKeywords[j]));\r\n                        }\r\n                        // 如果index!=-1 取出原串的值 然后替换 装入需要高亮的原关键词组\r\n                        var keywordsFromRes = []\r\n                        for (var j = 0; j < index.length; j++) {\r\n                            if(index[j] != -1){\r\n                                //截取的截止部位是拿到的关键词串数组中的串的长度\r\n                                keywordsFromRes.push(e.result[i].title.substr(index[j],Number(lowercaseKeywords[j].length)));\r\n                            }\r\n                        }\r\n                        //进行替换\r\n                        var title= e.result[i].title;\r\n                        var type = e.result[i].type;\r\n                        var desc = e.result[i].desc;\r\n                        for (var j = 0; j < keywordsFromRes.length; j++) {\r\n                            title = title.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                            type = type.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                            desc = desc.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                        }\r\n                        var author = e.result[i].author;\r\n                        var views = e.result[i].views;\r\n~~~\r\n\r\n简单讲一下js算法的原理，在后台拿到有效关键词后先把所有的关键词转小写`toLowerCase()`，因为咱们前面后台的返回结果是把每个有效关键词用逗号隔开，所以我们取得时候，直接就以逗号给分割，分割之后我们就得到了一个一个的全小写关键词，然后我们把搜索结果全转小写，用于匹配小写关键词，然后我们用indexOf把定位关键词的位置，\r\n\r\n~~~javascript\r\nfor (var j = 0; j < lowercaseKeywords.length; j++) {\r\n                            index.push(lowerResContent.indexOf(lowercaseKeywords[j]));\r\n                        }\r\n~~~\r\n\r\n定位到之后我们装入一个集合，作为下标集合，我们用于遍历原检索结果。这里需要注意的是，js的substr和java的String类里头的subString是有很大差别的，js的处理是起始地址和截取长度，java的是起始地址和终止地址，小伙伴一定要注意：\r\n\r\n~~~javascript\r\n   var keywordsFromRes = []\r\n                        for (var j = 0; j < index.length; j++) {\r\n                            if(index[j] != -1){\r\n                                //截取的截止部位是拿到的关键词串数组中的串的长度\r\n                                keywordsFromRes.push(e.result[i].title.substr(index[j],Number(lowercaseKeywords[j].length)));\r\n                            }\r\n                        }\r\n                        //进行替换\r\n                        var title= e.result[i].title;\r\n                        var type = e.result[i].type;\r\n                        var desc = e.result[i].desc;\r\n                        for (var j = 0; j < keywordsFromRes.length; j++) {\r\n                            title = title.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                            type = type.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                            desc = desc.replace(new RegExp(keywordsFromRes[j],\'g\') ,\"<em>\"+keywordsFromRes[j]+\"</em>\");\r\n                        }\r\n~~~\r\n\r\n最终我们就可以把已经替换好高亮词汇的检索结果呈现到网页上！\r\n\r\n### 启动/配置：\r\n\r\n本项目启动，使用的是内嵌tomcat的方式，摒弃了传统的外置tomcat，项目启动更快捷，更方便\r\n\r\n```xml\r\n  <dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-core</artifactId>\r\n            <version>8.5.33</version>\r\n        </dependency>\r\n        <!-- https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-jasper -->\r\n        <dependency>\r\n            <groupId>org.apache.tomcat.embed</groupId>\r\n            <artifactId>tomcat-embed-jasper</artifactId>\r\n            <version>8.5.33</version>\r\n        </dependency>\r\n```\r\n\r\n```java\r\npublic static void run(){\r\n        Tomcat tomcat = new Tomcat();\r\n        tomcat.setPort(8080);\r\n        // 标识tomcat启动为webapp\r\n        tomcat.addWebapp(\"/\",\"D://test/\");\r\n        try {\r\n//            tomcat启动\r\n            tomcat.start();\r\n//            tomcat监听用户接入\r\n            tomcat.getServer().await();\r\n        } catch (LifecycleException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        run();\r\n    }\r\n```\r\n\r\nmvc和ioc容器配置文件使用的是`javaConfiguration`的方式配置：\r\n\r\n```java\r\npackage xyz.zjhwork.springApplicationStarter.mvcConf;\r\n\r\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\r\nimport org.apache.ibatis.datasource.pooled.PooledDataSource;\r\nimport org.apache.ibatis.session.SqlSessionFactory;\r\nimport org.mybatis.spring.SqlSessionFactoryBean;\r\nimport org.mybatis.spring.mapper.MapperScannerConfigurer;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ComponentScan;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\nimport org.springframework.core.io.support.ResourcePatternResolver;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\nimport xyz.zjhwork.interceptor.LoginInterceptor;\r\n\r\nimport javax.sql.DataSource;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.Properties;\r\n\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(\"xyz.zjhwork\")\r\npublic class MvcConf implements WebMvcConfigurer {\r\n    @Override\r\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n//        字符转换  包括解决中文乱码\r\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\r\n        fastJsonHttpMessageConverter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"text/html;charset=utf-8\"));\r\n        converters.add(fastJsonHttpMessageConverter);\r\n    }\r\n\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        //拦截器注册\r\n        registry.addInterceptor(new LoginInterceptor()).addPathPatterns(\"/newException\").addPathPatterns(\"/\")\r\n                .addPathPatterns(\"/userStatus\").addPathPatterns(\"/userExit\").addPathPatterns(\"/newException\").addPathPatterns(\"/myListException\").addPathPatterns(\"/userInfo\")\r\n        .addPathPatterns(\"/isFavByUsernameAndExceptionId\").addPathPatterns(\"/findFavByUsername\").addPathPatterns(\"/deleteFavFromFavByUsernameAndExceptionId\").addPathPatterns(\"/addFavByUsernameAndExceptionId\")\r\n        .addPathPatterns(\"/isAproByUsernameAndExceptionId\").addPathPatterns(\"/addAproByUsernameAndExceptionId\").addPathPatterns(\"/insertComment\").addPathPatterns(\"/findHistoryByUsername\").addPathPatterns(\"/userInfoUpdate\")\r\n        ;\r\n    }\r\n\r\n    @Override\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler(\"/css/**\").addResourceLocations(\"classpath:/static/css/\");\r\n        registry.addResourceHandler(\"/js/**\").addResourceLocations(\"classpath:/static/js/\");\r\n        registry.addResourceHandler(\"/img/**\").addResourceLocations(\"classpath:/static/img/\");\r\n        registry.addResourceHandler(\"/theme/**\").addResourceLocations(\"classpath:/static/theme/\");\r\n//        静态资源存放\r\n        registry.addResourceHandler(\"/*.html\").addResourceLocations(\"classpath:/static/\");\r\n\r\n    }\r\n\r\n    /**\r\n     * mybatisConf\r\n     *\r\n     * @return\r\n     */\r\n    @Bean(\"pooledDataSource\")\r\n    public DataSource dataSource() {\r\n        //加载db.properties 读取数据库基本信息\r\n        Properties pop = new Properties();\r\n        try {\r\n            pop.load(this.getClass().getClassLoader().getResourceAsStream(\"db.properties\"));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        PooledDataSource dataSource = new PooledDataSource();\r\n        try {\r\n            dataSource.setDriver(pop.getProperty(\"jdbc.driver\"));\r\n            dataSource.setUsername(pop.getProperty(\"jdbc.username\"));\r\n            dataSource.setPassword(pop.getProperty(\"jdbc.password\"));\r\n            dataSource.setUrl(pop.getProperty(\"jdbc.url\"));\r\n            dataSource.setDefaultAutoCommit(true);\r\n            dataSource.setPoolMaximumActiveConnections(20);\r\n            dataSource.setPoolMaximumIdleConnections(0);\r\n\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean(\"sqlSessionFactoryBean\")\r\n    public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws IOException {\r\n        SqlSessionFactory factory;\r\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\r\n        bean.setDataSource(dataSource);\r\n        //加载mapper.xml\r\n        ResourcePatternResolver resolver = new ClassPathXmlApplicationContext();\r\n        bean.setMapperLocations(resolver.getResources(\"classpath*:/daoMappers/*.xml\"));\r\n        try {\r\n            factory = bean.getObject();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    @Bean(\"mapperScannerConfigurer\")\r\n    public MapperScannerConfigurer mapperScannerConfigurer() {\r\n        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\r\n        mapperScannerConfigurer.setBasePackage(\"xyz.zjhwork.dao\");\r\n        mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactoryBean\");\r\n        return mapperScannerConfigurer;\r\n    }\r\n}\r\n\r\n```\r\n\r\n## 结语：\r\n\r\n本文只提供本项目的核心算法和思想，另外本项目还包含了markdown富文本编译器的整合等的，本项目github地址：\r\n\r\n<a href=\"https://github.com/zjhChester/ExceptionSearch.git\">https://github.com/zjhChester/ExceptionSearch.git</a>\r\n\r\n最后放两张效果图在上面供大家参考，需要帮助或者沟通的同学们联系邮箱zjhChester@gmail.com。\r\n\r\n\r\n\r\n![1580629768798](https://zjhchester.github.io/img/exceptionSearch/2.png)\r\n\r\n![1580629774784](https://zjhchester.github.io/img/exceptionSearch/3.png)\r\n\r\n![1580629780701](https://zjhchester.github.io/img/exceptionSearch/4.png)![1580629781135](https://zjhchester.github.io/img/exceptionSearch/5.png)![1580629781636](https://zjhchester.github.io/img/exceptionSearch/6.png)![1580629784357](https://zjhchester.github.io/img/exceptionSearch/10.png)\r\n\r\n![1580629918789](https://zjhchester.github.io/img/apple-touch-icon.png)', '2020-02-02 00:00:00', 'zjh', NULL, 'projects\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99040, 'java项目架构：', '# 2020-02-04-java项目架构：\r\n\r\n前言：在学完javase后，进入web项目阶段学', '# 2020-02-04-java项目架构：\r\n\r\n前言：在学完javase后，进入web项目阶段学习，由于业务需求的增多，咱么需要规范我们的项目结构，便于项目维护和拓展。\r\n\r\n## 包名\r\n\r\n#### 包名普遍采用域名反写的形式，例如，cn.tfs.web\r\n\r\n第一个是顶级域名，第二个是我们所在的公司，组织，单位名称，第三个就是项目名。\r\n\r\n#### 对于项目内部的结构分层：\r\n\r\n1、dao(Data Access Object)数据持久层（对于数据持久化的操作，数据库操作）cn.tfs.dao\r\n\r\n2、service业务层（编写需求业务代码层）cn.tfs.service\r\n\r\n3、servlet/controller/web表现层/控制层（用于客户端响应的层)cn.tfs.servlet\r\n\r\n4、entity/model/pojo/domain/实体类(javaBean)（用于以上三层进行数据传输的载体）cn.tfs.model/pojo/entity/domain\r\n\r\n5、utils工具类用于公共调用的工具类,cn.tfs.utils', '2020-02-04 00:00:00', 'zjh', NULL, 'java\r\n---\r', 0, '0');
INSERT INTO `exception` VALUES (99041, '使用Gitalk 插件出现的未找到相关的issues进行评论', '# 2020-02-04-使用Gitalk 插件出现的未找到相关的issues进行评论\r\n\r\n## ', '# 2020-02-04-使用Gitalk 插件出现的未找到相关的issues进行评论\r\n\r\n## 前言\r\n\r\n在整合GItPage和Gitalk 的时候，我看人家同样的方式都部署成功了，硬生生弄了几个小时一直都是一个状态xxxx暂无issues，请联系xxx初始化，然后点登录以后就自动跳到首页\r\n\r\n![1580796758775](https://zjhchester.github.io/img/Gitalk1.png)\r\n\r\n![1580796758788](https://zjhchester.github.io/img/Gitalk2.png)\r\n\r\n![1580797021676](https://zjhchester.github.io/img/Gitalk3.png)\r\n\r\n这个问题就是在申请github application的时候，里面主页地址和回调函数地址一定要精确到大小写，还有精确到https和http，最好就直接复制主页地址，这个解决了你的application使用者就不会为0了\r\n\r\n最后附上一个Github Application<a href=\"https://github.com/settings/applications/new \">申请地址</a>\r\n\r\n![logo](https://zjhChester.github.io/img/apple-touch-icon.png)\r\n\r\n', '2020-02-04 00:00:00', 'zjh', NULL, 'Blog\r\n--', 0, '0');
INSERT INTO `exception` VALUES (99042, 'mybatis-plus动态CRUD_ Demo', '# springboot整合mybatis-plus的动态crud操作，整合Swagger\n\n\n##', '# springboot整合mybatis-plus的动态crud操作，整合Swagger\n\n\n## pojo\n\r\n```\n\nimport lombok.Data;\n\nimport java.io.Serializable;\n\n@Data\npublic class Msg  implements Serializable {\n    private Integer id;\n    private String content;\n}\n\n\r\n```\n\n\n## daoMapper\n\r\n```\n\nimport cn.temp.tempbeans.pojo.Msg;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface MsgMapper extends BaseMapper<Msg> {\n}\n\n\r\n```\n\n## pom.xml\n\r\n```\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.3.2</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.11</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.6.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <version>RELEASE</version>\n            <scope>compile</scope>\n        </dependency>\n\r\n```\n\n\n## controller\n### 注\n`mybatisplusBaseMapper`中的`Insert(User)`方法，\n如果数据库字段主键id是递增的，直接填入0，他就自增的新添数据,如果需要`指定id`的填入,建议采用` UUID.randomUUID().toString();`的方式防止主键重复异常发生\n\r\n```\nimport cn.temp.tempbeans.dao.UserMapper;\nimport cn.temp.tempbeans.pojo.User;\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@Api(\"测试接口类\")\n@RestController\n@RequestMapping(\"/user\")\npublic class TestController {\n    @Autowired\n    private UserMapper userMapper;\n\n    @ApiOperation(value = \"获取用户列表\", notes = \"用户列表\")\n    @RequestMapping(value = \"/user\", method = RequestMethod.GET)\n//    @ApiImplicitParam(name = \"user\", value = \"用户信息\", required = false, dataType = \"User\")\n    public List<User> getUser(User user) {\n        QueryWrapper<User> userQueryWrapper = new QueryWrapper<>();\n        if(user.getUsername()!=null){\n            userQueryWrapper.like(\"username\", user.getUsername());\n        }\n        if(user.getId()!=null){\n            userQueryWrapper.like(\"id\", user.getId());\n        }\n        if(user.getPassword()!=null){\n            userQueryWrapper.like(\"password\", user.getPassword());\n        }\n        return userMapper.selectList(userQueryWrapper);\n\n    }\n\n    @ApiOperation(value = \"新增用户\", notes = \"添加用户\")\n    @Transactional\n    @RequestMapping(value = \"/user\",method = RequestMethod.POST)\n    public boolean addUser(@RequestBody User user) {\n        return  userMapper.insert(user)==1;\n    }\n\n    @ApiOperation(value = \"删除用户\", notes = \"删除用户\")\n    @Transactional\n    @RequestMapping(value = \"/user\",method = RequestMethod.DELETE)\n    public boolean deleteUser( User user) {\n        UpdateWrapper<User> userUpdateWrapper = new UpdateWrapper<>();\n        if(user.getUsername()!=null){\n            userUpdateWrapper.eq(\"username\", user.getUsername());\n        }\n        if(user.getId()!=null){\n            userUpdateWrapper.eq(\"id\", user.getId());\n        }\n        if(user.getPassword()!=null){\n            userUpdateWrapper.eq(\"password\", user.getPassword());\n        }\n        return  userMapper.delete(userUpdateWrapper)!=0;\n    }\n\n    @ApiOperation(value = \"更新用户\", notes = \"更新用户\")\n    @Transactional\n    @RequestMapping(value = \"/user\",method = RequestMethod.PUT)\n    public boolean updateUser(@RequestBody User user) {\n        return  userMapper.updateById(user)==1;\n    }\n}\n\r\n```\n## http://127.0.0.1:8080/swagger-ui.html\n![1192254364](http://img.zjhwork.xyz/mybatis-plus.png)\n\n', '2020-06-24 00:00:00', 'zjh', NULL, '学习记录\n-', 2, '0');
INSERT INTO `exception` VALUES (99043, '@Valid注解基于hibernate-validator', '##  `hibernate-validator`\n是基于`javax.validation`的数据', '##  `hibernate-validator`\n是基于`javax.validation`的数据合法性检测包，用于检测常用类的极限值、空值、边界值等的数据合法性校验\n###  引入\n\r\n```\n<dependency>\n	<groupId>org.hibernate.validator</groupId>\n	<artifactId>hibernate-validator</artifactId>\n	<version>6.1.5.Final</version>\n</dependency>\n\r\n```\n###  `@valid`   编写`controller`\n用于校验`controller`传输对象`DTO`内的参数合法性注解，通过反射获取`controller`的类加载器，判断`method`内是否使用到`@valid`注解，从而获取响应对象的参数进行合法性校验；\n\n\r\n```\nimport io.swagger.annotations.ApiOperation;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.validation.Valid;\n\n/**\n * @Valid注解测试接口\n */\n@RestController\n//Swagger tags\n@Api(tags = \"@Valid注解测试接口\")\npublic class ValidTestController {\n	//Swagger 方法描述\n    @ApiOperation(value = \"validGet测试\", notes = \"Get测试\")\n    @RequestMapping(value = \"/testValid\",method = RequestMethod.GET)\n    public R<ValidDTO> testValid(@Valid ValidDTO validDTO){\n        return R.ok(validDTO);\n    }\n}\n\r\n```\n###  `@NotBlank` `@NotNull` `@Max` `@mail`等   编写`DTO`\n此类注解是用于描述数据传输对象`DTO`的成员变量，用于该对象在传输时并且使用到该对象的和使用了`@valid`注解`Controller` 的参数合法性检验\n\r\n```\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.Max;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\n\n@Data\n//swaggerModel描述\n@ApiModel(\"valid数据格式检测注解测试\")\npublic class ValidDTO {\n\n    @NotNull(message = \"id不能为空\")\n    private Integer id;\n\n    /***    swaggerModel成员变量描述\n     *     @ApiModelProperty注解如果注释类型是integer 等基本类型包装类 需要赋初值\n      */\n    @ApiModelProperty(\"ValidDTOName\")\n    @NotBlank(message = \"name不能为空\")\n    private String name;\n\n    @ApiModelProperty(\"ValidDTOEmail\")\n    @Email(message = \"邮箱格式不对\")\n    @NotBlank(message = \"邮箱不能为空\")\n    private String email;\n\n    @Max(value = 10,message = \"money长度超长\")\n    private Integer money;\n\n    /**\n     * 不写message的默认提示:cn.temp.tempbeans.conf.Exception - 最大不能超过2\n     */\n    @Max(value = 2)\n    private Integer age;\n}\n\r\n```\n###  编写自定义异常处理类  \n#### 1、该处的`@ControllerAdvice`注解是用于处理`controller`的全局异常，当然该类还有其他的作用，例如全局参数配置、全局数据预处理之类的\n#### 2、`@ExceptionHandler(org.springframework.validation.BindException.class)`这是对`validation.BindException`异常进行适配处理，以下方法则是对我们参数非法的自定义格式处理，为了遵循返回数据格式的一致性，还是采用`mybatis-plus`的`R`数据返回类做返回处理\n\r\n```\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.enums.ApiErrorCode;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.validation.BindException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport java.util.Objects;\n\n@Slf4j\n@ControllerAdvice\npublic class Exception {\n\n    private final static String EXCEPTION_MSG_KEY = \"Exception message : \";\n\n    @ResponseBody\n    @ExceptionHandler(org.springframework.validation.BindException.class)\n    public R<String> handleValidException(BindException e){\n        //日志记录错误信息\n        log.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());\n        //将错误信息返回给前台\n        return R.restResult(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage(), ApiErrorCode.FAILED);\n    }\n}\n\r\n```\n\n\n\n## 此处还用到了`R.ok` `R.fail`等封装返回对象\n#### 该类是`mybatis-plus`的数据返回对象，用于格式化最终返回参数集，类似于在我的以往项目中封装的项目总体的返回集传输对象`ResModel`,数据返回格式:\n\r\n```  \n//R.restResult(Object,IErrorCode)\n {\n  \"code\": -1,\n  \"data	\": \"最大不能超过2\",\n  \"msg\": \"操作失败\"\n}\n//R.ok(Object)\n{\n  \"code\": 0,\n  \"data\": [\n    {\n      \"id\": 1,\n      \"username\": \"zjh\",\n      \"password\": \"adcd7048512e64b48da55b027577886ee5a36350\"\n    }\n  ],\n  \"msg\": \"执行成功\"\n}\n\r\n```\n![20200629](http://img.zjhwork.xyz/checkParam.png)\n', '2020-07-01 00:00:00', 'zjh', NULL, '学习记录\n-', 11, '0');
INSERT INTO `exception` VALUES (99044, '加密工具包codec', '## 加密工具包\n\n\r\n```\n<!-- https://mvnrepository.com/art', '## 加密工具包\n\n\r\n```\n<!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->\n<dependency>\n    <groupId>commons-codec</groupId>\n    <artifactId>commons-codec</artifactId>\n    <version>1.10</version>\n</dependency>\n\n\r\n```', '2020-07-01 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99045, '类型转换工具类', '#  适用于数据持久层pojo对象转换数据传输层DTO\n##  utils.TypeConverte', '#  适用于数据持久层pojo对象转换数据传输层DTO\n##  utils.TypeConverter\n\r\n```\nimport cn.temp.tempbeans.api.dto.ValidDTO;\nimport cn.temp.tempbeans.pojo.User;\nimport java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/***\n * author:zjhChester\n * date:2020-07-01\n * environment: jdk1.8\n * 适用场景：适用于数据持久层pojo对象转换数据传输层DTO\n */\npublic class TypeConverter {\n	public <T, S> T convert(S s, Class<T> clz) throws IllegalAccessException, \n\nInstantiationException {\n        //获取输出对象的属性列表\n        Field[] f1 = clz.getDeclaredFields();\n\n        Map<String,Object> map = new HashMap<>();\n        for (Field f : f1) {\n            //将输出对象的属性名装入map\n            map.put(f.getName(),null);\n        }\n        //获取输入对象的属性列表\n        Field[] f2 = s.getClass().getDeclaredFields();\n        for (Field f : f2) {\n            //便利执行  匹配输入对象的属性名\n          if(map.containsKey(f.getName())){\n              //设置私有属性可见性\n              f.setAccessible(true);\n              try {\n                  //属性一致则将输入对象的属性值存放到的map的以对应属性名为key的\n\n值中   覆盖原来的null\n                  map.put(f.getName(),f.get(s));\n              } catch (IllegalAccessException e) {\n                  e.printStackTrace();\n              }\n          }\n        }\n        //反射获取输出对象实例\n        T t = clz.newInstance();\n        for (Map.Entry<String,Object> e:map.entrySet() ) {\n            //过滤map中的空值对象，即无匹配属性\n            if(e.getValue()!=null){\n                    for (Field f : f1) {\n                        f.setAccessible(true);\n                        //将符合 map的key==输出对象的属性名     并且map的\n\nvalue.getClass() == 输出对象的属性类型\n                        if(f.getName().equals(e.getKey())&&map.get(f.getName())!\n\n=null && f.getType().equals(map.get(f.getName()).getClass())){\n                            //存放到输出对象的属性中\n                            f.set(t,e.getValue());\n                        }\n                    }\n            }\n        }\n        //返回输出对象\n        return t;\n    }\n\n    public static void main(String[] args) throws InstantiationException, \n\nIllegalAccessException {\n        User user = new User();\n        user.setId(1);\n        user.setUsername(\"zjh\");\n        ValidDTO convert = new TypeConverter().convert(user, ValidDTO.class);\n        System.out.println(user);\n        System.out.println(convert);\n    }\n}\n\n\n\r\n```\n\n\n\n##  dto.ValidDTO\n\r\n```\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.Max;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\n\n@Data\n//swaggerModel描述\n@ApiModel(\"valid数据格式检测注解测试\")\npublic class ValidDTO {\n\n    @NotNull(message = \"id不能为空\")\n    private Integer id;\n\n    /***    swaggerModel成员变量描述\n     *     @ApiModelProperty注解如果注释类型是integer 等基本类型包装类 需要赋初值\n      */\n    @ApiModelProperty(\"ValidDTOName\")\n    @NotBlank(message = \"name不能为空\")\n    private String username;\n\n    @ApiModelProperty(\"ValidDTOEmail\")\n    @Email(message = \"邮箱格式不对\")\n    @NotBlank(message = \"邮箱不能为空\")\n    private String email;\n\n    @Max(value = 10,message = \"money长度超长\")\n    private Integer money;\n\n    /**\n     * 不写message的默认提示:cn.temp.tempbeans.conf.Exception - 最大不能超过2\n     */\n    @Max(value = 2)\n    private Integer age;\n}\n\n\r\n```\n\n\n\n##  pojo.User\n\n\r\n```\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\n\n@Data\n@ApiModel(\"用户对象\")\npublic class User {\n//    @ApiModelProperty(value = \"用户id\")\n//    @NotNull(message = \"id不能为空\")\n    private Integer id;\n//    @ApiModelProperty(value = \"用户username\")\n//    @NotBlank(message = \"username不能为空\")\n    private String username;\n//    @ApiModelProperty(value = \"用户password\")\n//    @NotBlank(message = \"password不能为空\")\n    private String password;\n\n\n\n\n}\n\r\n```\n##  输出结果\n![1283612563](http://img.zjhwork.xyz/convert.png)', '2020-07-01 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99046, 'sc依赖版本（springcloud）', '##  Finchley.SR1\n\r\n```\n  <dependencyManagement>\n  ', '##  Finchley.SR1\n\r\n```\n  <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>Finchley.SR1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\r\n```', '2020-07-08 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99047, 'js递归算法', '## js 源码\r\n```\n<script>\nlet json  = {\n    \"code\": 2', '## js 源码\r\n```\n<script>\nlet json  = {\n    \"code\": 200,\n    \"data\": {\n        \"id\": \"app_xlsc\",\n        \"createId\": null,\n        \"createTime\": 1594363123111,\n        \"updateId\": null,\n        \"updateTime\": 1594363123111,\n        \"isDisable\": null,\n        \"isDeleted\": null,\n        \"name\": null,\n        \"parentId\": null,\n        \"sortNo\": null,\n        \"note\": null,\n        \"children\": [\n            {\n                \"id\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                \"createId\": null,\n                \"createTime\": 1594363123111,\n                \"updateId\": null,\n                \"updateTime\": 1594363123111,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"信号样本\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"信号样本管理信号样本管理信号样本管理\",\n                \"children\": [\n                    {\n                        \"id\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123111,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123111,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信号样本1\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"信号样本1信号样本1\",\n                        \"children\": [\n                            {\n                                \"id\": \"a7a28cacd158d6fc85a62357a5b3b100\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信号样本1-1\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": \"信号样本1-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"27bb612fb16aa409c7e50116eda41ef1\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信号样本1-4\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": \"信号样本1-4信号样本1-4\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"fc87c36a149b42409fb08e23a45d944c\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信息样本1-2\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": \"信息样本1-2信息样本1-2\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"94eec7c2cab4cb8b04e6e39b1b2825c3\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信号样本1-3\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": \"信号样本1-3信号样本1-3\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"b394b2e36a1298235cc3aeb4ad8bc1bd\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"lxh-test-1\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"0222f4a04db8d5504c021f6b2949bc4b\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信号样本1-5\",\n                                \"parentId\": \"8570265b6fc6dca83af67c0b3a53c2c1\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"2d67e14ea2ef2408ba9c835dd382b677\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123111,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123111,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信号样本2\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"信号样本2信号样本2\",\n                        \"children\": [\n                            {\n                                \"id\": \"e693867233ad075d2ff44c25d85f33c5\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123111,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123111,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信号样本2-1\",\n                                \"parentId\": \"2d67e14ea2ef2408ba9c835dd382b677\",\n                                \"sortNo\": null,\n                                \"note\": \"信号样本2-1信号样本2-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"4bf01bfebbff328ef03c941519e3f42b\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123111,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123111,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信号样本3\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"信号样本3信号样本3\",\n                        \"children\": [\n                            {\n                                \"id\": \"61e6d375be352517d9ba679307e30709\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123126,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123126,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"11133\",\n                                \"parentId\": \"4bf01bfebbff328ef03c941519e3f42b\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [\n                                    {\n                                        \"id\": \"88ea2ac8b7b2a8360b619b5acc938789\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"333\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"1bdf404727656ec90b912bf7d0ddff5e\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"tsst\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"1\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"a72176770d4e62cd4eac305faf873556\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"222\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"eda16d189e9194c2b8655f0b61ebb827\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"sss \",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"40db89a8688d864a8e81398ef9688454\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"55\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"89e7c2643bfb538e049e0d80a3043809\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"f4f755be77963c2a8dd23cfe0f7a9808\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"66\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"259f7a79ced07ea01f258c3623f7c6c8\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"77\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"c2311bfaf5c03aa53d02d799be3ddf07\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"88\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    },\n                                    {\n                                        \"id\": \"a4c09953baeda4c52e8b9c4e942d1282\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123126,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123126,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"99\",\n                                        \"parentId\": \"61e6d375be352517d9ba679307e30709\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    }\n                                ],\n                                \"catalogue\": 1,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"a135db5c105bbe05a05aeedd0a9215c3\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123126,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123126,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"www\",\n                                \"parentId\": \"4bf01bfebbff328ef03c941519e3f42b\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"237c302bdd8867290c4a1617cde80600\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123126,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123126,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信号样本测试1\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"信号样本测试说明001\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"9fe9fd6e830029323da10581b7e7c746\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123126,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123126,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"lxh-l-1\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"72a3c40bcea192af2feaf901f47bd37c\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信号样本4\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"信号样本4\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"c64394c58cf647b0ee2661c7702c13be\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"lts-test-001\",\n                        \"parentId\": \"72a3c40bcea192af2feaf901f47bd37c1\",\n                        \"sortNo\": null,\n                        \"note\": \"lts-test-001\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": null,\n                \"isTest\": null,\n                \"size\": 2\n            },\n            {\n                \"id\": \"7368cd299caecbb388e146dfff6fb26c\",\n                \"createId\": null,\n                \"createTime\": 1594363123142,\n                \"updateId\": null,\n                \"updateTime\": 1594363123142,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"信息素材\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"信息素材\",\n                \"children\": [\n                    {\n                        \"id\": \"86547c043735837194d4c5432ff8c7d0\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信息素材1\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"9adec9676c5d40792a0b131ea4aac862\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信息素材数据2\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": \"信息素材数据2\",\n                        \"children\": [\n                            {\n                                \"id\": \"9e22a654bb5b6c328e37bb182e3282a8\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123142,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123142,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信息素材数据2-1\",\n                                \"parentId\": \"9adec9676c5d40792a0b131ea4aac862\",\n                                \"sortNo\": null,\n                                \"note\": \"信息素材数据2-1信息素材数据2-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"b666b8ac65989ca2aed5c65a69fb6b9c\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"信息素材数据3\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": \"信息素材数据3信息素材数据3\",\n                        \"children\": [\n                            {\n                                \"id\": \"fde8abd5b2adc50c3a3d6a14c93febef\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123142,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123142,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信息素材数据3-1\",\n                                \"parentId\": \"b666b8ac65989ca2aed5c65a69fb6b9c\",\n                                \"sortNo\": null,\n                                \"note\": \"信息素材数据3-1信息素材数据3-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"30b6c5a1384c2081e862175577226386\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123142,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123142,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"信息\",\n                                \"parentId\": \"b666b8ac65989ca2aed5c65a69fb6b9c\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"7114d1f808257a6bcb452c3877878a2e\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"lts-test-002\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"4a134c015b1dade7fa56c777797dd0c8\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"lts-test-003\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"2d94f87d3596a1ecd9f5b2726c8e0768\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"lts-test-004\",\n                        \"parentId\": \"7368cd299caecbb388e146dfff6fb26c\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": \"1\",\n                \"isTest\": null,\n                \"size\": 2\n            },\n            {\n                \"id\": \"0a990f31bbfa711d1bfab7d48fbb314d\",\n                \"createId\": null,\n                \"createTime\": 1594363123142,\n                \"updateId\": null,\n                \"updateTime\": 1594363123142,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"训练目标素材\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"训练目标素材训练目标素材\",\n                \"children\": [\n                    {\n                        \"id\": \"d91d76f775f61b9bc08e7080a316e148\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123142,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123142,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"目标素材1\",\n                        \"parentId\": \"0a990f31bbfa711d1bfab7d48fbb314d\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"d396429695fb2ff256eaf7a0fd20207d\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123157,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123157,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"目标素材2\",\n                        \"parentId\": \"0a990f31bbfa711d1bfab7d48fbb314d\",\n                        \"sortNo\": null,\n                        \"note\": \"目标素材2目标素材2\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"1856a5079f6590e05dfa24b1ee77a740\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123157,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123157,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"目标数据\",\n                        \"parentId\": \"0a990f31bbfa711d1bfab7d48fbb314d\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"8f2f073285c295f6809277da491fb813\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123157,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123157,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"目标2\",\n                        \"parentId\": \"0a990f31bbfa711d1bfab7d48fbb314d\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [\n                            {\n                                \"id\": \"78a90f0134a3ba56a6a08f579e4b8a7c\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"目标3\",\n                                \"parentId\": \"8f2f073285c295f6809277da491fb813\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": null,\n                \"isTest\": null,\n                \"size\": 2\n            },\n            {\n                \"id\": \"1916eafb179dcc146a507150afa0ef56\",\n                \"createId\": null,\n                \"createTime\": 1594363123157,\n                \"updateId\": null,\n                \"updateTime\": 1594363123157,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"训练教材\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"训练教材\",\n                \"children\": [\n                    {\n                        \"id\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123157,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123157,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"训练教材2\",\n                        \"parentId\": \"1916eafb179dcc146a507150afa0ef56\",\n                        \"sortNo\": null,\n                        \"note\": \"训练教材2训练教材2\",\n                        \"children\": [\n                            {\n                                \"id\": \"f0ea1c539f3e062aff7bec39848b179f\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"训练教材3\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": \"训练教材3训练教材3\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"cb90b3c24dba163cd370bf2ebe51d7e0\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"123\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"18e6e9ee4bea0e0ca2ff9836e3bdfc8b\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"333333\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"8824b820c10431658ea90e957e9b2192\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"11\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": null,\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"1ce41a835a8d09cf45cc476b19d4c55b\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"sdfa\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": \"dddd\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"b74111a6cccecc06eebb201dab12a66f\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123157,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123157,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"tablexunlian\",\n                                \"parentId\": \"ea841ac005ae5927b5a51a91fd8c52b7\",\n                                \"sortNo\": null,\n                                \"note\": \"训练表2\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": null,\n                \"isTest\": null,\n                \"size\": 2\n            },\n            {\n                \"id\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                \"createId\": null,\n                \"createTime\": 1594363123157,\n                \"updateId\": null,\n                \"updateTime\": 1594363123157,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"训练试题\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"训练试题\",\n                \"children\": [\n                    {\n                        \"id\": \"1ce3358fe629bf3c5e8fa2d29cad5e36\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123157,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123157,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"试题管理1\",\n                        \"parentId\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                        \"sortNo\": null,\n                        \"note\": \"试题管理1试题管理1\",\n                        \"children\": [\n                            {\n                                \"id\": \"c2e4445e07862a4f44c0604d78dba34c\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"试题管理1-1\",\n                                \"parentId\": \"1ce3358fe629bf3c5e8fa2d29cad5e36\",\n                                \"sortNo\": null,\n                                \"note\": \"试题管理1-1试题管理1-1试题管理1-1\",\n                                \"children\": [\n                                    {\n                                        \"id\": \"73ac87770fbb4336e06dfda6bc665fa2\",\n                                        \"createId\": null,\n                                        \"createTime\": 1594363123173,\n                                        \"updateId\": null,\n                                        \"updateTime\": 1594363123173,\n                                        \"isDisable\": 1,\n                                        \"isDeleted\": null,\n                                        \"name\": \"111\",\n                                        \"parentId\": \"c2e4445e07862a4f44c0604d78dba34c\",\n                                        \"sortNo\": null,\n                                        \"note\": null,\n                                        \"children\": [],\n                                        \"catalogue\": 0,\n                                        \"isTable\": 1,\n                                        \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                        \"isTest\": null,\n                                        \"size\": 5\n                                    }\n                                ],\n                                \"catalogue\": 1,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"d2f8ea35690635ffe8def7e0d683c296\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"试题管理1-2\",\n                                \"parentId\": \"1ce3358fe629bf3c5e8fa2d29cad5e36\",\n                                \"sortNo\": null,\n                                \"note\": \"试题管理1-2试题管理1-2\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"a3cf52834ebec6e0607de32035fe8726\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"试题管理2\",\n                        \"parentId\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                        \"sortNo\": null,\n                        \"note\": \"试题管理2试题管理2\",\n                        \"children\": [\n                            {\n                                \"id\": \"b9bb5092757c1af91a799d9648481195\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"试题管理2-1\",\n                                \"parentId\": \"a3cf52834ebec6e0607de32035fe8726\",\n                                \"sortNo\": null,\n                                \"note\": \"试题管理2-1试题管理2-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"130b6b3fb0ba25d5cf4b1a5ed3b80ad1\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"试题管理3\",\n                        \"parentId\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                        \"sortNo\": null,\n                        \"note\": \"试题管理3试题管理3\",\n                        \"children\": [\n                            {\n                                \"id\": \"d63dd75b2f8362ff21256ada0645ea1d\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"试题管理3-1\",\n                                \"parentId\": \"130b6b3fb0ba25d5cf4b1a5ed3b80ad1\",\n                                \"sortNo\": null,\n                                \"note\": \"试题管理3-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"DC5077F2529D42F4965C17A6594D4857\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"503e5410e901214c5f2d9ecc883ea84f\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"试题测试\",\n                        \"parentId\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"87a174a7ea2beef26a4af42944908eb4\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"训练测试2\",\n                        \"parentId\": \"ec1f6194d55a62a56d5984036adfc66a\",\n                        \"sortNo\": null,\n                        \"note\": null,\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": null,\n                \"isTest\": null,\n                \"size\": 2\n            },\n            {\n                \"id\": \"1f667afa4875f2596eba380b9c9cbb1a\",\n                \"createId\": null,\n                \"createTime\": 1594363123173,\n                \"updateId\": null,\n                \"updateTime\": 1594363123173,\n                \"isDisable\": 1,\n                \"isDeleted\": null,\n                \"name\": \"训练试卷\",\n                \"parentId\": \"app_xlsc\",\n                \"sortNo\": null,\n                \"note\": \"训练试卷\",\n                \"children\": [\n                    {\n                        \"id\": \"2a25415f4b7375189aa0b8c36e9a54fd\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"训练试卷1\",\n                        \"parentId\": \"1f667afa4875f2596eba380b9c9cbb1a\",\n                        \"sortNo\": null,\n                        \"note\": \"训练试卷1训练试卷1\",\n                        \"children\": [\n                            {\n                                \"id\": \"2a4894c23f13f4de0cc6c3db3c4a62cf\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"训练试卷1-1\",\n                                \"parentId\": \"2a25415f4b7375189aa0b8c36e9a54fd\",\n                                \"sortNo\": null,\n                                \"note\": \"训练试卷1-1训练试卷1-1\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 0,\n                                \"datasourceId\": null,\n                                \"isTest\": null,\n                                \"size\": 4\n                            },\n                            {\n                                \"id\": \"6109a61200738e19f3c305fc9ebc9a70\",\n                                \"createId\": null,\n                                \"createTime\": 1594363123173,\n                                \"updateId\": null,\n                                \"updateTime\": 1594363123173,\n                                \"isDisable\": 1,\n                                \"isDeleted\": null,\n                                \"name\": \"训练试卷1-2\",\n                                \"parentId\": \"2a25415f4b7375189aa0b8c36e9a54fd\",\n                                \"sortNo\": null,\n                                \"note\": \"训练试卷1-2训练试卷1-2\",\n                                \"children\": [],\n                                \"catalogue\": 0,\n                                \"isTable\": 1,\n                                \"datasourceId\": \"1\",\n                                \"isTest\": null,\n                                \"size\": 4\n                            }\n                        ],\n                        \"catalogue\": 1,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"85cce692de40b0c46e490825f155ccab\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123173,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123173,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"训练试卷2\",\n                        \"parentId\": \"1f667afa4875f2596eba380b9c9cbb1a\",\n                        \"sortNo\": null,\n                        \"note\": \"训练试卷2训练试卷2\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 0,\n                        \"datasourceId\": null,\n                        \"isTest\": null,\n                        \"size\": 3\n                    },\n                    {\n                        \"id\": \"1c728bbca25042072b5ba890d4c76744\",\n                        \"createId\": null,\n                        \"createTime\": 1594363123189,\n                        \"updateId\": null,\n                        \"updateTime\": 1594363123189,\n                        \"isDisable\": 1,\n                        \"isDeleted\": null,\n                        \"name\": \"训练试卷3\",\n                        \"parentId\": \"1f667afa4875f2596eba380b9c9cbb1a\",\n                        \"sortNo\": null,\n                        \"note\": \"训练试卷3训练试卷3\",\n                        \"children\": [],\n                        \"catalogue\": 0,\n                        \"isTable\": 1,\n                        \"datasourceId\": \"1\",\n                        \"isTest\": null,\n                        \"size\": 3\n                    }\n                ],\n                \"catalogue\": 1,\n                \"isTable\": 0,\n                \"datasourceId\": null,\n                \"isTest\": null,\n                \"size\": 2\n            }\n        ],\n        \"catalogue\": 1,\n        \"isTable\": 0,\n        \"datasourceId\": null,\n        \"isTest\": null,\n        \"size\": 1\n    },\n    \"message\": \"操作成功\",\n    \"error\": null\n};\n\n\nlet data = json.data;\nlet childrenArr = [];\nfindChid(data)\n\n\n//递归实现\nfunction findChid(c){\n	//如果size !=0  继续遍历\n	if(c.children.length != 0){\n		let temp = c.children;\n		temp.forEach(function(item,index){\n			let resObj = {\"id\":item.id,\"name\":item.name,\"size\":item.children.length}\n			childrenArr.push(resObj)\n			return findChid(item)\n		})\n	}else{\n		return;\n	}\n}\n\nconsole.log(childrenArr)\n\n\n\n\n\n\n</script>\n\n\r\n```', '2020-07-10 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99048, 'JWT Token存储在Cookie还是Web Storage', '##   首先，是登录信息：\n登录信息存在 cookie 中是一直以来的做法，而且实现的很好，不用考', '##   首先，是登录信息：\n登录信息存在 cookie 中是一直以来的做法，而且实现的很好，不用考虑各种问题。   \n而 localStorage 是在这个 API 诞生之后，一些 JS 党带起来的另一种实现方式。   \n使用 localStorage，你需要在每次请求的时候，都手动带上这个信息，这大大增加了开发过程中带来的困难，非常麻烦，而且还要手 动维护过期时间。    \n而使用 cookie 的话，只需要在后端的 Auth 模块放个设置 header 的代码即可，其他完全不用考虑。为什么：   \n用户未登录的情况下，Auth 判断没有权限，设置个跳转到登录页（或者是其他逻辑，比如以访客身份浏览之类的）   \n用户登录时：将账号和密码 POST 到 Auth 模块后，Auth 设置一个 header，设置 Cookie 及过期时间    \n用户登录后，在 Cookie 的有效期内（设置了过期时间就是过期时间内，没设置就是浏览器关闭前），任何请求都会自动带上cookie，完全不用人工干预（fetch 请求除外，需要额外指定配置）    \n在用户自动带上 cookie 请求后，需要授权的请求一定会经过 Auth 模块，判断 cookie 是否有效（防止恶意无效的 cookie），若 cookie 无效，则设置 header 删除 cookie（可选步骤），并将用户重定向到登录页。若 cookie 有效，则设置 header，为cookie 续期（cookie 内容都可以完全不变）。  \n###  Auth 模块：  \n\r\n```\nif (POST 方法请求登录) {\n if (账号密码不正确) {\n return 重定向到登录页面，并提示错误\n }\n 设置 cookie，并指定过期时间为当前时间 +n 天\n return Auth 模块逻辑结束，进入其他模块逻辑\n}\nif (没有 cookie) {\n return 重定向到登录页面\n}\nif (cookie 无效) {\n // 可选步骤：设置 cookie 过期时间为 -1 （删除 cookie）\n return 重定向到登录页面\n}\n// 带了有效的 cookie\n\r\n```\n设置 cookie 过期时间为当前时间 +n 天（为 cookie 续期）    \nreturn Auth 模块逻辑结束，进入其他模块逻辑     \n注意：只有请求 Auth 模块才会给 cookie 续期，其他模块不续。所以权限认证的模块都统一到一起了。    \n前端 js 什么都不用管，后端其他模块也什么都不用管。   \n##   然后是楼主的问题： \n/\n登录/设置密码：这是两个模块，不能搞混概念！然后有一个权限管理模块（Auth）来管理。   \n首先，必须要用户登录才能操作，这里不管你把登录信息存储到哪里。   \n### 登录成功后，有两种选择：    \n#### 1. 跳到首页，然后判断没有设置密码，跳到设置密码页\n#### 2. 直接判断是否设置密码，跳转到密码页。如果没有设置密码，强行进入主页，又需要判断然后跳到设置密码页。    \n可以看出来，首页中判断是否设置了密码是必须的，而登录页不是。    \n那么，将判断代码放在首页，登录成功后进入首页，首页判断没有设置密码再跳到设置页，设置成功后，再跳转到首页。这个逻辑没    \n有问题，也不会出现重复登录的问题。   \n首页：    \n\r\n```\nif (未登录) {\n return 跳转到登录页;\n}\nif (未设置密码) {\n return 跳转到设置密码页;\n}\n// 已成功登录并设置密码，显示页面。\n---------------------------------\n登录页：\nif (已登录) { // 防止用户将登录页加入书签，或者由于某些原因在已登录的情况下进入登录页\n return 跳转到首页;\n}\n// 未登录，显示登录页\n\r\n```\n登录成功后直接跳回首页。\n---------------------------------\n设置密码页：\nif (已设置密码) {\n 显示修改密码页\n} else {\n 显示设置密码页\n}\n设置成功后直接跳回首页。\n我不知道楼主设置密码后为什么会跳转到登录页面？既然已经登录了，在设置密码后应该直接跳回首页啊？这应该是其他方面的逻辑\n问题，而不是登录信息存储方式的问题吧？\n最后补充一点：关于什么时候用 cookie，什么时候用 ***Storage\n注：上面的 ***Storage 包括了 localStorage 和 sessionStorage。\nCookie:\nCookie 存储的数据量比较小，所以一般不会存大量数据。当你存储的内容在每次请求后端的时候都需要的情况下才需要放到\nCookie 中。比如登录信息、设置信息之类的。\n登录信息不用我说吧？肯定每次请求都要带上。\n设置信息，一般比如网站语言（中文、英文之类的），或其他要求后端动态渲染的设置。\n***Storage:\n这个是新的 API，一般用于在前端缓存一些数据时使用，这些数据一般是只在前端使用，而后端不使用的，所以不用每次都往\n后端发送。（或是前端做统计，后端只要一个统计结果之类的）\n比如一些网站提供的编辑器，自带草稿功能，每隔几秒钟或几分钟自动保存当前编辑的内容，刷新页面，或是把浏览器关掉重\n新打开编辑页面可以自动恢复之前编辑的内容的。\n这种信息就适合存放在 ***Storage 中。\n还有其他的比如 web SQL、IndexedDB 两个数据库，这一般是用来做 HTML 5 应用的时候才会用到的。比如 PWA 或是 HTML5 页游\n之类的。（贪玩蓝月跟这没关系(╯‵□′)╯︵┻━┻）\n最后说一句：所有逻辑全部都放到前端判断是非常错误的决定！\n/\n因为：前端的一切都是可以手改的啊！\n不管是 cookie、localStorage 还是 sessionStorage，只要用户按下 F12，分分钟手改啊！\n这个网站要登录？打开 F12，输入 document.cookie=\'isLoggedIn=true\'; 或者 localStorage.setItem(\'loggedIn\', \'true\');，你就，\n登录成功？？？喵喵喵？\n要设置密码？同样打开 F12 设置点东西。\n这些判断放在前端是完全没有意义的啊喂！因为你不管前端判断不判断，都要过一遍后端判断才行啊！！！\n充分利用前端，也不能滥用啊喂！！！(╯‵□′)╯︵┻━┻\nP.S. 当然，这里我就不提 CSP 之类的网站安全规则了。。。又扯远了。。。', '2020-08-07 00:00:00', 'zjh', NULL, '转发\n-', 0, '0');
INSERT INTO `exception` VALUES (99049, 'JWTUtils示例', '##  JWTUtils\n\r\n```\npackage cn.zjh.spring.eurekacli', '##  JWTUtils\n\r\n```\npackage cn.zjh.spring.eurekaclient.auth.utils;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.exceptions.JWTDecodeException;\nimport com.auth0.jwt.interfaces.DecodedJWT;\n\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class JwtUtil {\n    /**\n     *  过期时长\n     */\n    private static final long EXPIRE_TIME=30 *1000;\n\n    /**\n     * 私钥，使用它生成token，最好进行下加密\n     */\n    private static final String TOKEN_SECRET=\"poadh981gndo1xdobvIT!*(GEOB!({sH)SH!SH!GDadad\";\n\n    private static final String EXP = \"exp\";\n    private static final String PAYLOAD = \"payload\";\n\n\n    public static String sign(String useName){\n        try{\n            Date date=new Date(System.currentTimeMillis()+EXPIRE_TIME);\n            //私钥及加密算法\n            Algorithm algorithm=Algorithm.HMAC256(TOKEN_SECRET);\n            //设置头部信息\n            Map<String,Object> header=new HashMap<>();\n            header.put(\"typ\",\"JWT\");\n            header.put(\"alg\",\"HS256\");\n            //附带username和userid信息,存储到token中，生成签名\n            return JWT.create()\n                    .withHeader(header)\n                    //存储自己想要留存给客户端浏览器的内容\n                    .withClaim(\"username\",useName)\n                    .withExpiresAt(date)\n                    .sign(algorithm);\n\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    //解密，传入一个加密后的token字符串和解密后的类型\n    public static boolean verify(String token){\n\n        try {\n            Algorithm algorithm=Algorithm.HMAC256(TOKEN_SECRET);\n            JWTVerifier verifier =JWT.require(algorithm).build();\n            //此方法若token验证失败会抛错的，所以直接return true没问题\n            verifier.verify(token);\n            return true;\n        }catch (Exception e){\n            System.out.println(\"token验证失败\");\n        }\n\n        return false;\n    }\n\n\n    /**\n     * 获取token中信息 userName\n     * @param token\n     * @return\n     */\n    public static String getUsername(String token) {\n        try {\n            DecodedJWT jwt = JWT.decode(token);\n            return jwt.getClaim(\"username\").asString();\n        } catch (JWTDecodeException e) {\n            e.getStackTrace();\n        }\n        return null;\n    }\n\n\n\n}\n\n\r\n```', '2020-08-07 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99050, 'lombok插件工具', '##    @Bulider注解的使用注意事项\n\n###   `在Controller参数列表内有自', '##    @Bulider注解的使用注意事项\n\n###   `在Controller参数列表内有自动封装的实体类对象，并且该实体类对象使用@Buider实例化对象的时，需要加上空构造和全构造的注解/方法`\n\n\r\n```\npublic R<TokenDTO> login(@Valid @RequestBody AutoDTO autoDTO) {\n\r\n```\n因为springboot/mvc的@Controller方法的参数列表如果有该实体类，他会反序列化该类，找该类的空构造函数，当@Buider修饰类的时候，该类是没有空构造函数的\n\n##     解决方法一\n手动添加空构造和全构造注解\n`@NoArgsConstructor\n@AllArgsConstructor`\n\r\n```\n@Builder\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class AutoDTO {\n    @NotBlank(message = \"用户名不能为空\")\n    private String username;\n    @NotBlank(message = \"密码不能为空\")\n    private String password;\n\n}\n\n\r\n```\n##    解决方法二\n将@Bulider注解加在构造函数上\n\r\n```\n@Data\n\npublic class AutoDTO {\n    @NotBlank(message = \"用户名不能为空\")\n    private String username;\n    @NotBlank(message = \"密码不能为空\")\n    private String password;\n    @Builder\n    public AutoDTO() {\n    }\n    @Builder\n    public AutoDTO(@NotBlank(message = \"用户名不能为空\") String username, @NotBlank(message = \"密码不能为空\") String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\r\n```', '2020-08-10 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99051, 'vue学习 axios框架', '#        Axios学习\r\n\r\n##        then分支\r\n走的是状态码为 [200', '#        Axios学习\r\n\r\n##        then分支\r\n走的是状态码为 [200,300) 进入的分支\r\n\r\n##        error分支\r\n走的是状态码[300,511]进入的分支\r\n封装的错误信息在error.response.data内\r\n##        前端\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <!-- import CSS -->\r\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\">\r\n	<style type=\"text/css\">\r\n	.div_space{\r\n		padding-top:20px;\r\n		margin-bottom:20px;\r\n	}\r\n	</style>\r\n</head>\r\n<body>\r\n  <div id=\"app\">\r\n	<div class=\"div_space\" style=\"width:20%;margin:0 auto;margin-top:100px;max-length:200px;\">\r\n	<el-col ><el-input clearable v-model=\"account.username\" placeholder=\"请输入账号\"></el-input></el-col>\r\n	</div>\r\n	\r\n	 <div class=\"div_space\" style=\"clear:both;width:20%;margin:20px auto;max-length:200px;\">\r\n	<el-col ><el-input clearable placeholder=\"请输入密码\" v-model=\"account.password\" show-password></el-input></el-col>\r\n	</div>\r\n	\r\n	<div class=\"div_space\" style=\"clear:both;text-align:center\">\r\n	<el-button type=\"primary\" @click=\"sign()\">登录</el-button>\r\n	<el-button type=\"warning\" @click=\"verify()\">验证</el-button>\r\n	\r\n	</div>\r\n  </div>\r\n</body>\r\n  <!-- import Vue before Element -->\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\r\n  <!-- import JavaScript -->\r\n  <script crossorigin=\"anonymous\" integrity=\"sha384-WbhdtWslh0AUD1Dhf8OExUvvjZ/VN6o2HHMsYlDXb6uf3IweMH13dGL4V/KgDc7y\" src=\"https://lib.baomitu.com/element-ui/2.13.2/index.js\"></script>\r\n  \r\n  <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\r\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/js-cookie/2.2.1/js.cookie.js\"></script>\r\n  <script>\r\n    new Vue({\r\n      el: \'#    app\',\r\n      data: function() {\r\n        return { \r\n		url:\"http://127.0.0.1:8601\",\r\n		auth:{\r\n			accessToken:\"\",\r\n			refreshToken:\"\"\r\n		},\r\n		account:{\r\n			username:\"\",\r\n			password:\"\"\r\n		}\r\n		\r\n      }\r\n	  },methods:{\r\n			sign(){\r\n				 axios({\r\n					url:this.url+\"/login\",\r\n					method: \'POST\',\r\n					data:{username:this.account.username,password:this.account.password}\r\n					\r\n				 })\r\n				   .then(response =>{\r\n				   console.log(response)\r\n					\r\n					 if(response.data.code==0)\r\n				  this.$message.success(\"登录成功！，分发token\")\r\n				 this.auth.accessToken =  response.data.data.accessToken\r\n				 this.auth.refreshToken = response.data.data.refreshToken\r\n				 \r\n				 this.setCookie(\"accessToken\",this.auth.accessToken)\r\n				 this.setCookie(\"refreshToken\",this.auth.refreshToken)\r\n				 console.log(this.getCookie(\"accessToken\"),\"------------------\")\r\n				 console.log(response.data)\r\n					\r\n				  })\r\n				   .catch((error) =>{ \r\n				  console.log(error.response)\r\n				   this.$message.error(error.response.data.msg+\":\"+error.response.data.data)\r\n				 })\r\n				 \r\n				\r\n			},\r\n			verify(){\r\n				axios({\r\n					url:this.url+\"/status\",\r\n					headers: {\r\n						\'token\': this.auth.accessToken\r\n					}\r\n				}).then(response =>{\r\n				   console.log(response.data)\r\n				   if(response.data.code==0)\r\n				   this.$message.success(\"权限验证通过\")\r\n				   else{\r\n				    this.refreshAuth(this.auth.accessToken)\r\n				   }\r\n				  })\r\n				   .catch((error) =>{\r\n					this.$message.error(error)\r\n				 })\r\n			},refreshAuth(accessToken){\r\n			\r\n				axios({\r\n					url:this.url+\"/auth\",\r\n					headers: {\r\n						\'accessToken\': accessToken,\r\n						\'refreshToken\': this.auth.refreshToken\r\n					}\r\n\r\n				}).then(response =>{\r\n				   console.log(response.data)\r\n				   if(response.data.code==0){\r\n					this.$message.success(\"refreshToken success!\")\r\n					this.auth.accessToken =  response.data.data.accessToken\r\n				  }\r\n				   else{\r\n				    this.$message.error(response.data.msg)\r\n				   }\r\n				  })\r\n				   .catch((error) =>{\r\n					this.$message.error(error)\r\n				 })\r\n			},setCookie(key,value){\r\n			 	return Cookies.set(key,value);\r\n			},getCookie(key){\r\n				return Cookies.get(key);\r\n			}\r\n			//***************\r\n	  }\r\n    })\r\n  </script>\r\n</html>\r\n\r\n```\r\n##        后端\r\n###        正常分支\r\n\r\n```\r\n @PostMapping(\"/login\")\r\n    public ResponseEntity<R<TokenDTO>> login(@Valid @RequestBody AutoDTO autoDTO, HttpServletRequest request) {\r\n        //登录成功\r\n        String accessToken,refreshToken;\r\n        TokenDTO tokenDTO=null;\r\n        try {\r\n            //accessToken为2分钟\r\n            accessToken = JwtUtil.sign(autoDTO.getUsername() + \"\"+autoDTO.getPassword(),1000*5);\r\n            //refreshToken过期时间为七天\r\n            refreshToken = JwtUtil.sign(autoDTO.getUsername() + \"\"+autoDTO.getPassword(),1000*60*60*24*7);\r\n            //builder模式重构\r\n            tokenDTO=TokenDTO.builder().accessToken(accessToken).refreshToken(refreshToken).build();\r\n        } catch (Exception e) {\r\n           log.error(\"api in /login has exception about\"+e);\r\n        }\r\n        //异步存储登陆日志\r\n        log.info(\"登录日志 \\t\\t-->\"+new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())+\"\\t\\t-->ip:\"+request.getRemoteHost()+\"\\t\\t-->\"+autoDTO.getUsername()+\"已登入\");\r\n        return ResponseEntity.status(HttpStatus.OK).body(R.ok(tokenDTO));\r\n    }\r\n\r\n```\r\n###        异常分支\r\n\r\n```\r\n@ControllerAdvice\r\npublic class ValidExceptionHandler {\r\n    private final static String EXCEPTION_MSG_KEY = \"Exception message : \";\r\n\r\n    @ResponseBody\r\n    @ExceptionHandler({org.springframework.validation.BindException.class})\r\n    public ResponseEntity<R<String>> handleValidException(BindException e) {\r\n        //日志记录错误信息\r\n        log.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());\r\n        //将错误信息返回给前台\r\n//        return R.restResult(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage(), ApiErrorCode.FAILED);\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(R.restResult(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage(), ApiErrorCode.FAILED));\r\n    }\r\n\r\n    //    MethodArgumentNotValidException.class\r\n    @ResponseBody\r\n    @ExceptionHandler({MethodArgumentNotValidException.class})\r\n    public ResponseEntity<R<String>> handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\r\n        //日志记录错误信息\r\n        log.error(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage());\r\n        //将错误信息返回给前台\r\n        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(R.restResult(Objects.requireNonNull(e.getBindingResult().getFieldError()).getDefaultMessage(), ApiErrorCode.FAILED));\r\n\r\n    }\r\n}\r\n\r\n\r\n```	\r\n\r\n![86123563](http://img.zjhwork.xyz/pic_axios_login.png)\r\n![86123563](http://img.zjhwork.xyz/pic_axios_error.png)', '2020-08-10 00:00:00', 'zjh', NULL, '学习记录\n-', 1, '0');
INSERT INTO `exception` VALUES (99052, 'cmd杀指定端口', '## cmd输入\r\n```\nnetstat -aon|findstr \"8080\"\n\ntaskkil', '## cmd输入\r\n```\nnetstat -aon|findstr \"8080\"\n\ntaskkill /pid 4136 -t -f\n\r\n```', '2020-08-11 00:00:00', 'zjh', NULL, '常用工具\n-', 0, '0');
INSERT INTO `exception` VALUES (99053, 'logback按类型和日期生成配置文件', '##    如果是ssm\npom.xml:\n\r\n```\n <dependency>\n        ', '##    如果是ssm\npom.xml:\n\r\n```\n <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.1.11</version>\n        </dependency>\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>0.1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n\r\n```\n##   如果是springboot\npom.xml:\n\r\n```\n <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n      <!-- 实现@Slf4j注解 -->\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\r\n```\n\n\nlogback.xml\n\r\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration debug=\"false\">\n	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->\n	<property name=\"LOG_HOME\" value=\"E:\\\\workplace\\\\personal_git_repository\\\\spring-cloud\\\\java\\\\cloud-server\\\\server-auth\\\\logs\" />\n	<!-- 控制台输出 -->\n	<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\n		<encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->\n			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n		</encoder>\n	</appender>\n	<!--按照类型和日期生成日志文件-->\n	<appender name=\"accountSignServiceLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n		<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n			<level>INFO</level>\n			<onMatch>ACCEPT</onMatch>\n			<onMismatch>DENY</onMismatch>\n		</filter>\n		<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n			<fileNamePattern>${LOG_HOME}/sign_log/auth_sign_log-%d{yyyy-MM-dd}-%i.info.log</fileNamePattern>\n			<maxHistory>30</maxHistory>\n			<timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n				<maxFileSize>30MB</maxFileSize>\n			</timeBasedFileNamingAndTriggeringPolicy>\n		</rollingPolicy>\n		<layout class=\"ch.qos.logback.classic.PatternLayout\">\n			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>\n		</layout>\n	</appender>\n	<!-- 日志输出级别 -->\n	<root level=\"INFO\">\n\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n	<logger level=\"INFO\" name=\"accountSignServiceLog\">\n		<appender-ref ref=\"accountSignServiceLog\"/>\n	</logger>\n</configuration>\n\n\r\n```', '2020-08-14 00:00:00', 'zjh', NULL, '学习记录\n-', 1, '0');
INSERT INTO `exception` VALUES (99054, 'win10蓝屏，由于在创建转储期间出错，创建转储文件失败', '## 恢复蓝屏的方法/硬盘扫描恢复\n\r\n```\n解决方法：\n使用《sfc /scannow》和《Di', '## 恢复蓝屏的方法/硬盘扫描恢复\n\r\n```\n解决方法：\n使用《sfc /scannow》和《Dism》自动扫描和修补系统档案： \n\n1. 右键点选桌面左下角Windows图标，选择【Microsoft Powershell(管理员)】 \n2. 逐一输入以下指令： \nDism /Online /Cleanup-Image /CheckHealth，按回车 \nDism /Online /Cleanup-Image /ScanHealth，按回车 \nDism /Online /Cleanup-Image /RestoreHealth，按回车 \nsfc /scannow，按回车 \n3. 重启电脑 \n4. 如果出现”有一些文件无法修复“的回报，重复步骤1-3几次\n\r\n```', '2020-08-15 00:00:00', 'zjh', NULL, '常用工具\n-', 4, '0');
INSERT INTO `exception` VALUES (99055, 'maven打包jar', '## pom.xml ->build标签   ->plugins标签\n\n>java编译环境插件 ja', '## pom.xml ->build标签   ->plugins标签\n\n>java编译环境插件 java8\n\r\n```\n <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>8</source>\n                    <target>8</target>\n                </configuration>\n </plugin>\n\r\n```\n>maven打包指定主函数入口类\n\r\n```\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.2.1</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>\n                                shade\n                            </goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>xyz.zjhwork.springApplicationStarter.BootStarter</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\r\n```', '2020-08-17 00:00:00', 'zjh', NULL, '学习记录\n---', 0, '0');
INSERT INTO `exception` VALUES (99056, 'ssm框架使用slf4j+logback进行日志记录', '##   pom依赖\n\r\n```\n        <dependency>\n            ', '##   pom依赖\n\r\n```\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-classic</artifactId>\n            <version>1.1.11</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.16.20</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.logback-extensions</groupId>\n            <artifactId>logback-ext-spring</artifactId>\n            <version>0.1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>jcl-over-slf4j</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n\r\n```\n##   aop实现的日志记录  logback.xml\n\r\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <!-- 尽量别用绝对路径，如果带参数不同容器路径解释可能不同,以下配置参数在pom.xml里 -->\n    <property name=\"log.root.level\" value=\"INFO\" /> <!-- 日志级别 -->\n    <property name=\"log.other.level\" value=\"DEBUG\" /> <!-- 其他日志级别 -->\n    <property name=\"log.base\" value=\"logs\" /> <!-- 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，如果部署到linux上的tomcat下，会输出到tomcat/bin目录 下 -->\n    <property name=\"log.moduleName\" value=\"log_center\" />  <!-- 模块名称， 影响日志配置名，日志文件名 -->\n    <property name=\"log.max.size\" value=\"100MB\" /> <!-- 日志文件大小,超过这个大小将被压缩 -->\n\n    <!--控制台输出 -->\n    <appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\n            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]:%msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <!-- 用来保存输出所有级别的日志 -->\n    <appender name=\"file.all\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <File>${log.base}/${log.moduleName}.log</File><!-- 设置日志不超过${log.max.size}时的保存路径，注意如果\n            是web项目会保存到Tomcat的bin目录 下 -->\n        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${log.base}/archive/${log.moduleName}_all_%d{yyyy-MM-dd}.%i.log.zip\n            </FileNamePattern>\n            <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->\n            <timeBasedFileNamingAndTriggeringPolicy\n                    class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>${log.max.size}</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <!-- 日志输出的文件的格式 -->\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method\\(\\):%L -%msg%n</pattern>\n        </layout>\n    </appender>\n\n    <!-- 这也是用来保存输出所有级别的日志 -->\n    <appender name=\"file.all.other\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <File>${log.base}/${log.moduleName}_other.log</File>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${log.base}/archive/${log.moduleName}_other_%d{yyyy-MM-dd}.%i.log.zip\n            </FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy\n                    class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>${log.max.size}</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <!--<pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method\\(\\):%L -%msg%n</pattern>-->\n            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread]:%msg%n</pattern>\n        </layout>\n    </appender>\n\n    <!-- 只用保存输出error级别的日志 -->\n    <appender name=\"file.error\"\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <File>${log.base}/${log.moduleName}_err.log</File>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <FileNamePattern>${log.base}/archive/${log.moduleName}_err_%d{yyyy-MM-dd}.%i.log.zip\n            </FileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy\n                    class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>${log.max.size}</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method\\(\\):%L - %msg%n</pattern>\n        </layout>\n        <!-- 下面为配置只输出error级别的日志 -->\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n    <!-- 添加附加的appender,最多只能添加一个 -->\n    <appender name=\"file.async\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <discardingThreshold>0</discardingThreshold>\n        <queueSize>256</queueSize>\n        <includeCallerData>true</includeCallerData>\n        <appender-ref ref=\"file.all\" />\n    </appender>\n\n    <appender name=\"file.async.other\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <discardingThreshold>0</discardingThreshold>\n        <queueSize>256</queueSize>\n        <includeCallerData>true</includeCallerData>\n        <appender-ref ref=\"file.all.other\" />\n    </appender>\n    <!--浏览记录类日志-->\n    <appender name=\"addViewLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>INFO</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>${log.base}/addView_log/exception_view_log-%d{yyyy-MM-dd}-%i.info.log</fileNamePattern>\n            <maxHistory>30</maxHistory>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>30MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>\n        </layout>\n    </appender>\n    <!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName -->\n    <!--<logger name=\"com.yyt\" additivity=\"false\">-->\n        <!--<level value=\"${log.root.level}\" />-->\n        <!--<appender-ref ref=\"stdout\" />-->\n        <!--<appender-ref ref=\"file.async\" />&lt;!&ndash; 即com.li包下级别为 ${log.root.level}的才会使用file.async来打印 &ndash;&gt;-->\n        <!--<appender-ref ref=\"file.error\" />-->\n    <!--</logger>-->\n    <logger name=\"org.apache.ibatis\" level=\"info\">\n        <appender-ref ref=\"STDOUT\"/>\n    </logger>\n\n    <logger name=\"java.sql\" level=\"info\">\n        <appender-ref ref=\"STDOUT\"/>\n    </logger>\n    <!-- root将级别为${log.root.level}及大于${log.root.level}的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console,其它同理 -->\n    <root level=\"info\">\n        <appender-ref ref=\"stdout\" /> <!--  标识这个appender将会添加到这个logger -->\n        <appender-ref ref=\"file.async.other\" />\n        <appender-ref ref=\"file.error\" />\n    </root>\n    <logger level=\"INFO\" name=\"addViewLog\">\n        <appender-ref ref=\"addViewLog\"/>\n    </logger>\n</configuration>\n\n\r\n```\n##   自定义注解下的aop实现\n@interface AddViewsCount.java\n\n\r\n```\nimport java.lang.annotation.*;\n\n/**\n * 记录浏览记录views的数量\n */\n@Documented\n@Inherited\n@Target({ ElementType.FIELD, ElementType.METHOD })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface AddViewsCount {\n\n}\n\n\r\n```\naop的实现体AddViewCountAopImpl.java\n\r\n```\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport xyz.zjhwork.dao.ExceptionDao;\nimport org.apache.catalina.connector.RequestFacade;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\n@Aspect\n@Slf4j(topic = \"addViewLog\")\npublic class AddViewCountAopImpl {\n\n    @Autowired\n    private ExceptionDao exceptionDao;\n\n//    private final Logger log = LoggerFactory.getLogger(getClass());\n\n    @Pointcut(\"@annotation(xyz.zjhwork.aop.interfaces.AddViewsCount)\")\n    private void do_annotation(){\n\n        log.info(\"do_annotation about add count for exception views ....\");\n    }\n\n    /**\n     * 前置处理浏览文章\n     * request -> org.apache.catalina.connector.RequestFacade\n     * integer -> java.lang.Integer\n     * @param joinPoint 切入点\n     */\n    @Before(value = \"do_annotation()\")\n    public void addViewCount(JoinPoint joinPoint){\n        log.info(\"do addViewCount.....\");\n        Map<String,Object> map = new HashMap<>();\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            if(null!=arg)\n          map.put(arg.getClass().toString(),arg);\n        }\n\n        RequestFacade request =  (RequestFacade)map.get(\"class org.apache.catalina.connector.RequestFacade\");\n        Integer exceptionId =  (Integer) map.get(\"class java.lang.Integer\");\n        log.info(\"api about /getException has visited form ip :[{}],visited exception id is [{}]\",request.getRemoteHost(),exceptionId);\n        log.info(\"starting execute add Views....\");\n        int res=0;\n        //判断exceptionId是否为null\n        if(exceptionId!=null)\n            res = exceptionDao.addViews(exceptionId);\n        log.info(\"execute add result:[{}]\",res==1);\n    }\n}\n\n\r\n```\n', '2020-08-17 00:00:00', 'zjh', NULL, '学习记录\n-', 1, '0');
INSERT INTO `exception` VALUES (99057, '新建异常文章默认排版样式', '#     示例输入\n##     学习目标：\n<font color=#   999AAA >提示', '# 示例输入\n## 学习目标：\n<font color=#999AAA >提示：这里可以添加学习目标\n>例如：\n\n1、 搭建 Java 开发环境\n2、 掌握 Java 基本语法\n3、 掌握条件语句 \n4、 掌握循环语句\n\n## 学习内容：  \n姓名|技能|排行\n--|:--:|--:\n刘备|哭|大哥\n关羽|打|二哥\n张飞|骂|三弟\n\n```java\npublic static void main(String[] args){\nSystem.out.println(\"11111\");\n}\n```\n## 这是两张图片  \n第一种(img标签,可点击)|第二种(原生markdown语法)\n:--:|:--:\n<a href=\'http://img.zjhwork.xyz/logo.png\' target=\'_blank\'><img src=\'http://img.zjhwork.xyz/logo.png\'></a> |![这里是图片唯一id，随便输只要不重复](http://img.zjhwork.xyz/logo.png)', '2020-08-17 00:00:00', 'zjh', NULL, '设计\n-', 1, '0');
INSERT INTO `exception` VALUES (99058, '腾讯面试感受', '##    前言\n很操蛋的面试，很挫败，可能对于大厂的了解我还是只是停留在很基础的上面，本以为仔仔细', '##    前言\n很操蛋的面试，很挫败，可能对于大厂的了解我还是只是停留在很基础的上面，本以为仔仔细细的准备java面试的问题(依照前面对面试的经历和理\n\n解)，实际上，面的全是专业素养（计算机网络，数据库理论，线程锁（不局限于java），数据结构）；\n##    过程\n上来第一个问题很深刻：http的发展历史，说实话这东西真学过，只是发展历程这方面，谁又会觉得他是重要的呢，淦，后面还问了一些：  \n1、http的三次握手，  \n2、线程锁的分类和乐观锁的实现原理以及如何解决乐观锁aba的问题，  \n3、还有数据库事务的实现原理（这个大概是我疏忽了，没想到会问实现原理，光注重事务的隔离性和隔离级别了），  \n4、可能由于面试官是个主c++的程序员，看我主方向是java，所以他形式上的问了一下final,finaly,finalize的区别（很简单），   \n5、还有问了一个我没有一点头绪和一点都没听过的问题：linux系统下，如果你经常发现你的cpu爆红，你应该怎么从linux体系下对其进行分析和解决，然而我对linux的层面只停留在部署java、redis等软件程序上面，系统内核那是一点都没了解过，  \n6、最后问了一个简单的算法问题：在不用第三个变量的情况下，实现两个整形变量值的交换，看似很常规的问题：\n\r\n``` \nx=y-x; \ny=y-x;\nx=x+y;\n\n\r\n```\n这样实现就没有任何问题，只是接下来又问我，如果位数溢出了怎么办，，，，，，直接就蒙了，这也怪我确实专业素养太差，遗忘了一个异或运算，一直\n\n把异或运算放在cpu的计算上面，没有考虑到实际编程也会用到\n异或运算直接计算两个整形的二进制差值，不考虑正负，符号位不参与计算，所以不存在溢出的情况，即便最大和最小的数一正一副，异或之后变成1，\n\r\n```\nx=x^y;\ny=x^y;\nx=x^y;\n\n\r\n```\n就实现了两个数的位置互换\n\n##    总结\n自身太菜，专业素养能力不够', '2020-08-17 00:00:00', 'zjh', NULL, '面试\n-', 1, '0');
INSERT INTO `exception` VALUES (99059, 'bat文件杀指定端口的进程', '## windows bat批量操作杀进程\r\n```\n@echo off\nsetlocal enab', '## windows bat批量操作杀进程\r\n```\n@echo off\nsetlocal enabledelayedexpansion\nset /p port=pls input port need to kill=\nfor /f \"tokens=1-5\" %%a in (\'netstat -ano ^| find \":%port%\"\') do (\n    if \"%%e%\" == \"0\" (\n        set pid=%%d\n		echo no task has used port 【%port%】\n    ) else (\n        set pid=%%e\n		echo find %port% in pid =!pid!\n		taskkill /f /pid !pid!\n		pause\n    )\n)\n\n\n\r\n```', '2020-08-19 00:00:00', 'zjh', NULL, '常用工具\n-', 0, '0');
INSERT INTO `exception` VALUES (99060, 'fastJson的使用', '## 依赖\n\r\n```\n<dependency>\n            <groupId>com.', '## 依赖\n\r\n```\n<dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.68</version>\n</dependency>\n\r\n```\n>JSON 字符串-》对象转换JSON\n\r\n```\nObjectMapper objectMapper = new ObjectMapper();\nobjectMapper.writeValueAsString(Object);\n\r\n```\n>JSON 字符串-》JSON转换对象\n\r\n```\nObject=JSON.parseObject(str);\n\r\n```', '2020-08-19 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99061, 'maven下载慢，试试阿里云的maven', '##  settings.xml\n\r\n```\n<?xml version=\"1.0\" encodin', '##  settings.xml\n\r\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    \n	<localRepository>E:\\maven3.6\\repository</localRepository>\n	<mirrors>\n        <!-- mirror\n         | Specifies a repository mirror site to use instead of a given repository. The repository that\n         | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used\n         | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.\n         |\n        <mirror>\n          <id>mirrorId</id>\n          <mirrorOf>repositoryId</mirrorOf>\n          <name>Human Readable Name for this Mirror.</name>\n          <url>http://my.repository.com/repo/path</url>\n        </mirror>\n         -->\n\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n\n        <mirror>\n            <id>uk</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://uk.maven.org/maven2/</url>\n        </mirror>\n\n        <mirror>\n            <id>CN</id>\n            <name>OSChina Central</name>\n            <url>http://maven.oschina.net/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n\n        <mirror>\n            <id>nexus</id>\n            <name>internal nexus repository</name>\n            <!-- <url>http://192.168.1.100:8081/nexus/content/groups/public/</url>-->\n            <url>http://repo.maven.apache.org/maven2</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n\n    </mirrors>\n</settings>\n\r\n```', '2020-08-19 00:00:00', 'zjh', NULL, '常用工具\n---\n阿里云的maven   ', 0, '0');
INSERT INTO `exception` VALUES (99062, 'sql常用语句，万字长文', '## 一、基础\n\n1、说明：创建数据库    \nCREATE DATABASE database-n', '## 一、基础\n\n1、说明：创建数据库    \nCREATE DATABASE database-name    \n2、说明：删除数据库     \ndrop database dbname    \n3、说明：备份sql server     \n--- 创建 备份数据的 device     \nUSE master     \nEXEC sp_addumpdevice \'disk\', \'testBack\',     \n   \'c:\\mssql7backup\\MyNwind_1.dat\'     \n--- 开始 备份      \nBACKUP DATABASE pubs TO testBack      \n4、说明：创建新表    \ncreate table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)     \n根据已有的表创建新表：      \nA：create table tab_new like tab_old (使用旧表创建新表)    \nB：create table tab_new as select col1,col2… from tab_old definition only     \n5、说明：删除新表     \ndrop table tabname      \n6、说明：增加一个列    \nAlter table tabname add column col type    \n注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。      \n7、说明：添加主键：Alter table tabname add primary key(col)       \n说明：删除主键：Alter table tabname drop primary key(col)         \n8、说明：创建索引：create [unique] index idxname on tabname(col….)       \n删除索引：drop index idxname      \n注：索引是不可更改的，想更改必须删除重新建。     \n9、说明：创建视图：create view viewname as select statement\n删除视图：drop view viewname       \n10、说明：几个简单的基本的sql语句       \n选择：select * from table1 where 范围     \n插入：insert into table1(field1,field2) values(value1,value2)     \n删除：delete from table1 where 范围更新：update table1 set field1=value1 where 范围      \n查找：select * from table1 where field1 like ’%value1%’ ---like的语法很精妙，查资料!\n排序：select * from table1 order by field1,field2 [desc]     \n总数：select count as totalcount from table1   \n求和：select sum(field1) as sumvalue from table1    \n平均：select avg(field1) as avgvalue from table1    \n最大：select max(field1) as maxvalue from table1    \n最小：select min(field1) as minvalue from table1     \n\n11、说明：几个高级查询运算词    \nA：UNION 运算符         \nUNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。     \nB：EXCEPT 运算符      \nEXCEPT运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。     \n\nC：INTERSECT 运算符     \n\nINTERSECT运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。      \n注：使用运算词的几个查询结果行必须是一致的。      \n12、说明：使用外连接      \nA、left （outer） join：      \n左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。        \nSQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c      \nB：right （outer） join:      \n右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。      \nC：full/cross （outer） join：      \n全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。     \n12、分组:Group by:     \n一张表，一旦分组 完成后，查询后只能得到组相关的信息。\n组相关的信息：（统计信息） count,sum,max,min,avg  分组的标准)     \n在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据      \n在selecte统计函数中的字段，不能和普通的字段放在一起；    \n \n\n13、对数据库进行操作：     \n\n\n\n分离数据库： sp_detach_db;\n\n附加数据库：sp_attach_db 后接表明，附加需要完整的路径名\n\n\n\n14.如何修改数据库的名称:\n\nsp_renamedb \'old_name\', \'new_name\'\n\n\n\n对了，我把 MySQL 相关的文章整理成了 PDF，有需要的关注微信公众号 Java后端，回复 666 下载。\n\n \n\n二、提升\n\n \n\n1、说明：复制表(只复制结构,源表名：a 新表名：b) (Access可用)\n\n\n\n法一：select * into b from a where 1<>1（仅用于SQlServer）\n\n法二：select top 0 * into b from a\n\n\n2、说明：拷贝表(拷贝数据,源表名：a 目标表名：b) (Access可用)\n\n\ninsert into b(a, b, c) select d,e,f from b;\n\n \n\n3、说明：跨数据库之间表的拷贝(具体数据使用绝对路径) (Access可用)\n\n\ninsert into b(a, b, c) select d,e,f from b in ‘具体数据库’ where 条件\n例子：..from b in \'\"&Server.MapPath(\".\")&\"\\data.mdb\" &\"\' where..\n\n \n\n4、说明：子查询(表名1：a 表名2：b)\n\n\nselect a,b,c from a where a IN (select d from b ) 或者: select a,b,c from a where a IN (1,2,3)\n\n \n\n5、说明：显示文章、提交人和最后回复时间\n\n\nselect a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b\n\n \n\n6、说明：外连接查询(表名1：a 表名2：b)\n\n\nselect a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c\n\n \n\n7、说明：在线视图查询(表名1：a )\nselect * from (SELECT a,b,c FROM a) T where t.a > 1;\n\n \n\n8、说明：between的用法,between限制查询数据范围时包括了边界值,not between不包括\n\n\nselect * from table1 where time between time1 and time2\nselect a,b,c, from table1 where a not between 数值1 and 数值2\n\n \n\n9、说明：in 的使用方法\n\n\nselect * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)\n\n \n\n10、说明：两张关联表，删除主表中已经在副表中没有的信息 \n\n\ndelete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )\n\n \n\n11、说明：四表联查问题：\n\n\nselect * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where .....\n\n \n\n12、说明：日程安排提前五分钟提醒 \n\n\nSQL: select * from 日程安排 where datediff(\'minute\',f开始时间,getdate())>5\n\n \n\n13、说明：一条sql 语句搞定数据库分页\n\n\n\nselect top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段\n\n\n\n具体实现：关于数据库分页：\n\n\n\ndeclare @start int,@end int\n  @sql  nvarchar(600)\n  set @sql=’select top’+str(@end-@start+1)+’+from T where rid not in(select top’+str(@str-1)+’Rid from T where Rid>-1)’\n  exec sp_executesql @sql\n \n\n注意：在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）\n\n \n\n14、说明：前10条记录\n\n\n\nselect top 10 * form table1 where 范围\n\n \n\n15、说明：选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)\n\n\nselect a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)\n\n \n\n16、说明：包括所有在 TableA中但不在 TableB和TableC中的行并消除所有重复行而派生出一个结果表\n\n\n(select a from tableA ) except (select a from tableB) except (select a from tableC)\n\n \n\n17、说明：随机取出10条数据\n\n\nselect top 10 * from tablename order by newid()\n\n \n\n18、说明：随机选择记录\n\n\nselect newid()\n\n \n\n19、说明：删除重复记录\n\n\n\n1) delete from tablename where id not in (select max(id) from tablename group by col1,col2,...)\n\n\n2) select distinct * into temp from tablename\n  delete from tablename\n  insert into tablename select * from temp\n\n\n评价：这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段\n\n \n\nalter table tablename\n--添加一个自增列\nadd  column_b int identity(1,1)\n delete from tablename where column_b not in(\nselect max(column_b) from tablename group by column1,column2,...)\nalter table tablename drop column column_b\n \n\n20、说明：列出数据库里所有的表名\n\nselect name from sysobjects where type=\'U\' // U代表用户\n\n \n\n21、说明：列出表里的所有的列名\n\nselect name from syscolumns where id=object_id(\'TableName\')\n\n \n\n22、说明：列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。\n\nselect type,sum(case vender when \'A\' then pcs else 0 end),sum(case vender when \'C\' then pcs else 0 end),sum(case vender when \'B\' then pcs else 0 end) FROM tablename group by type\n\n\n显示结果：\ntype vender pcs\n电脑 A 1\n电脑 A 1\n光盘 B 2\n光盘 A 2\n手机 B 3\n手机 C 3\n\n \n\n23、说明：初始化表table1\n\n \n\nTRUNCATE TABLE table1\n\n \n\n24、说明：选择从10到15的记录\n\nselect top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc\n\n \n\n三、技巧\n\n \n\n1、1=1，1=2的使用，在SQL语句组合时用的较多\n\n \n\n“where 1=1” 是表示选择全部    “where 1=2”全部不选，\n如：\nif @strWhere !=\'\' \nbegin\nset @strSQL = \'select count(*) as Total from [\' + @tblName + \'] where \' + @strWhere\nend\nelse \nbegin\nset @strSQL = \'select count(*) as Total from [\' + @tblName + \']\' \nend\n \n\n我们可以直接写成\n\n \n\nset @strSQL = \'select count(*) as Total from [\' + @tblName + \'] where 1=1 安定 \'+ @strWhere \n\n\n\n2、收缩数据库\n\n\n--重建索引\nDBCC REINDEX\nDBCC INDEXDEFRAG\n--收缩数据和日志\nDBCC SHRINKDB\nDBCC SHRINKFILE\n\n \n\n3、压缩数据库\n\n\ndbcc shrinkdatabase(dbname)\n\n \n\n4、转移数据库给新用户以已存在用户权限\n\n\nexec sp_change_users_login \'update_one\',\'newname\',\'oldname\'\ngo\n\n \n\n5、检查备份集\nRESTORE VERIFYONLY from disk=\'E:\\dvbbs.bak\'\n\n \n\n6、修复数据库\n\n\nALTER DATABASE [dvbbs] SET SINGLE_USER\nGO\nDBCC CHECKDB(\'dvbbs\',repair_allow_data_loss) WITH TABLOCK\nGO\nALTER DATABASE [dvbbs] SET MULTI_USER\nGO\n\n \n\n7、日志清除\n\n\nSET NOCOUNT ON\nDECLARE @LogicalFileName sysname,\n @MaxMinutes INT,\n @NewSize INT\n\n \n\nUSE tablename -- 要操作的数据库名\nSELECT  @LogicalFileName = \'tablename_log\', -- 日志文件名\n@MaxMinutes = 10, -- Limit on time allowed to wrap log.\n @NewSize = 1  -- 你想设定的日志文件的大小(M)\n\n \n\nSetup / initialize\nDECLARE @OriginalSize int\nSELECT @OriginalSize = size \n FROM sysfiles\n WHERE name = @LogicalFileName\nSELECT \'Original Size of \' + db_name() + \' LOG is \' + \n CONVERT(VARCHAR(30),@OriginalSize) + \' 8K pages or \' + \n CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + \'MB\'\n FROM sysfiles\n WHERE name = @LogicalFileName\nCREATE TABLE DummyTrans\n (DummyColumn char (8000) not null)\n\n \n\nDECLARE @Counter    INT,\n @StartTime DATETIME,\n @TruncLog   VARCHAR(255)\nSELECT @StartTime = GETDATE(),\n @TruncLog = \'BACKUP LOG \' + db_name() + \' WITH TRUNCATE_ONLY\'\n\n \n\nDBCC SHRINKFILE (@LogicalFileName, @NewSize)\nEXEC (@TruncLog)\n-- Wrap the log if necessary.\nWHILE @MaxMinutes > DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired\n AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName)  \n AND (@OriginalSize * 8 /1024) > @NewSize  \n BEGIN -- Outer loop.\nSELECT @Counter = 0\n WHILE   ((@Counter < @OriginalSize / 16) AND (@Counter < 50000))\n BEGIN -- update\n INSERT DummyTrans VALUES (\'Fill Log\') DELETE DummyTrans\n SELECT @Counter = @Counter + 1\n END\n EXEC (@TruncLog)  \n END\nSELECT \'Final Size of \' + db_name() + \' LOG is \' +\n CONVERT(VARCHAR(30),size) + \' 8K pages or \' + \n CONVERT(VARCHAR(30),(size*8/1024)) + \'MB\'\n FROM sysfiles \n WHERE name = @LogicalFileName\nDROP TABLE DummyTrans\nSET NOCOUNT OFF\n\n \n\n8、说明：更改某个表\n\n\nexec sp_changeobjectowner \'tablename\',\'dbo\'\n\n \n\n9、存储更改全部表\n\n \n\nCREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch\n@OldOwner as NVARCHAR(128),\n@NewOwner as NVARCHAR(128)\nAS\n\n \n\nDECLARE @Name    as NVARCHAR(128)\nDECLARE @Owner   as NVARCHAR(128)\nDECLARE @OwnerName   as NVARCHAR(128)\n\n \n\nDECLARE curObject CURSOR FOR \nselect \'Name\'    = name,\n   \'Owner\'    = user_name(uid)\nfrom sysobjects\nwhere user_name(uid)=@OldOwner\norder by name\n\n \n\nOPEN   curObject\nFETCH NEXT FROM curObject INTO @Name, @Owner\nWHILE(@@FETCH_STATUS=0)\nBEGIN     \nif @Owner=@OldOwner \nbegin\n   set @OwnerName = @OldOwner + \'.\' + rtrim(@Name)\n   exec sp_changeobjectowner @OwnerName, @NewOwner\nend\n-- select @name,@NewOwner,@OldOwner\n\n \n\nFETCH NEXT FROM curObject INTO @Name, @Owner\nEND\n\n \n\nclose curObject\ndeallocate curObject\nGO\n\n \n\n10、SQL SERVER中直接循环写入数据\n\n\ndeclare @i int\nset @i=1\nwhile @i<30\nbegin\n    insert into test (userid) values(@i)\n    set @i=@i+1\nend\n\n\n案例：\n\n\n有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格:\nName   scor\nZhangshan 80\nLishi 59\nWangwu 50\nSongquan 69\nwhile((select min(score) from tb_table)<60) \nbegin\n\nupdate tb_table set score =score*1.01\n\nwhere score<60\n\nif  (select min(score) from tb_table)>60\n\n  break\n\n else\n\n    continue\n\nend\n\n\n\n数据开发-经典\n\n \n\n1.按姓氏笔画排序:\n\n\n\nSelect * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多\n\n \n\n2.数据库加密:\n\n\n\nselect encrypt(\'原始密码\')\nselect pwdencrypt(\'原始密码\')\nselect pwdcompare(\'原始密码\',\'加密后密码\') = 1--相同；否则不相同 encrypt(\'原始密码\')\nselect pwdencrypt(\'原始密码\')\nselect pwdcompare(\'原始密码\',\'加密后密码\') = 1--相同；否则不相同\n\n \n\n3.取回表中字段:\ndeclare @list varchar(1000),\n@sql nvarchar(1000) \nselect @list=@list+\',\'+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name=\'表A\'\nset @sql=\'select \'+right(@list,len(@list)-1)+\' from 表A\' \nexec (@sql)\n\n \n\n4.查看硬盘分区:\nEXEC master..xp_fixeddrives\n\n \n\n5.比较A,B表是否相等:\nif (select checksum_agg(binary_checksum(*)) from A)\n     =\n    (select checksum_agg(binary_checksum(*)) from B)\nprint \'相等\'\nelse\nprint \'不相等\'\n\n \n\n6.杀掉所有的事件探察器进程:\nDECLARE hcforeach CURSOR GLOBAL FOR SELECT \'kill \'+RTRIM(spid) FROM master.dbo.sysprocesses\nWHERE program_name IN(\'SQL profiler\',N\'SQL 事件探查器\')\nEXEC sp_msforeach_worker \'?\'\n\n \n\n7.记录搜索:\n\n\n\n开头到N条记录Select Top N * From 表\n\n-------------------------------\nN到M条记录(要有主索引ID)\nSelect Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID   Desc\n----------------------------------\nN到结尾记录Select Top N * From 表 Order by ID Desc\n案例例如1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。\n\n \n\n select top 10 recid from A where recid not  in(select top 30 recid from A)\n\n \n\n分析：如果这样写会产生某些问题，如果recid在表中存在逻辑索引。\n\n \n\nselect top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。\n\n \n\n解决方案\n\n \n\n1，用order by select top 30 recid from A order by ricid 如果该字段不是自增长，就会出现问题\n\n \n\n2，在那个子查询中也加条件：select top 30 recid from A where recid>-1\n\n \n\n例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。\nset @s = \'select top 1 * from T   where pid not in (select top \' + str(@count-1) + \' pid  from  T)\'\n\n \n\nprint @s      exec  sp_executesql  @s\n\n \n\n9：获取当前数据库中的所有用户表\n\n\n\nselect Name from sysobjects where xtype=\'u\' and status>=0\n\n \n\n10：获取某一个表的所有字段\n\n\nselect name from syscolumns where id=object_id(\'表名\')\n\n \n\nselect name from syscolumns where id in (select id from sysobjects where type = \'u\' and name = \'表名\')\n\n \n\n两种方式的效果相同\n\n \n\n11：查看与某一个表相关的视图、存储过程、函数\n\n\n\nselect a.* from sysobjects a, syscomments b where a.id = b.id and b.text like \'%表名%\'\n\n \n\n12：查看当前数据库中所有存储过程\n\n\nselect name as 存储过程名称 from sysobjects where xtype=\'P\'\n\n \n\n13：查询用户创建的所有数据库\n\n\n\nselect * from master..sysdatabases D where sid not in(select sid from master..syslogins where name=\'sa\')\n或者\nselect dbid, name AS DB_NAME from master..sysdatabases where sid <> 0x01\n\n \n\n14：查询某一个表的字段和数据类型\n\n\nselect column_name,data_type from information_schema.columns\nwhere table_name = \'表名\'\n\n \n\n15：不同服务器数据库之间的数据操作\n\n\n\n--创建链接服务器\n\nexec sp_addlinkedserver \'ITSV \', \' \', \'SQLOLEDB \', \'远程服务器名或ip地址 \'\n\nexec sp_addlinkedsrvlogin \'ITSV \', \'false \',null, \'用户名 \', \'密码 \'\n\n--查询示例\n\nselect * from ITSV.数据库名.dbo.表名\n\n--导入示例\n\nselect * into 表 from ITSV.数据库名.dbo.表名\n\n--以后不再使用时删除链接服务器\n\nexec sp_dropserver \'ITSV \', \'droplogins \'\n\n--连接远程/局域网数据(openrowset/openquery/opendatasource)\n\n--1、openrowset\n\n--查询示例\n\nselect * from openrowset( \'SQLOLEDB \', \'sql服务器名 \'; \'用户名 \'; \'密码 \',数据库名.dbo.表名)\n\n--生成本地表\n\nselect * into 表 from openrowset( \'SQLOLEDB \', \'sql服务器名 \'; \'用户名 \'; \'密码 \',数据库名.dbo.表名)\n\n--把本地表导入远程表\n\ninsert openrowset( \'SQLOLEDB \', \'sql服务器名 \'; \'用户名 \'; \'密码 \',数据库名.dbo.表名)\n\nselect *from 本地表\n\n--更新本地表\n\nupdate b\n\nset b.列A=a.列A\n\n from openrowset( \'SQLOLEDB \', \'sql服务器名 \'; \'用户名 \'; \'密码 \',数据库名.dbo.表名)as a inner join 本地表 b\n\non a.column1=b.column1\n\n--openquery用法需要创建一个连接\n\n--首先创建一个连接创建链接服务器\n\nexec sp_addlinkedserver \'ITSV \', \' \', \'SQLOLEDB \', \'远程服务器名或ip地址 \'\n\n--查询\n\nselect * FROM openquery(ITSV, \'SELECT * FROM 数据库.dbo.表名 \')\n\n--把本地表导入远程表\n\ninsert openquery(ITSV, \'SELECT * FROM 数据库.dbo.表名 \')\n\nselect * from 本地表\n\n--更新本地表\n\nupdate b set b.列B=a.列B FROM openquery(ITSV, \'SELECT * FROM 数据库.dbo.表名 \') as a inner join 本地表 b on a.列A=b.列A\n\n--3、opendatasource/openrowset\n\nSELECT   * FROM   opendatasource( \'SQLOLEDB \', \'Data Source=ip/ServerName;User ID=登陆名;Password=密码 \' ).test.dbo.roy_ta\n\n--把本地表导入远程表\n\ninsert opendatasource( \'SQLOLEDB \', \'Data Source=ip/ServerName;User ID=登陆名;Password=密码 \').数据库.dbo.表名\n\nselect * from 本地表\n \n\nSQL Server基本函数\n\n \n\nSQL Server基本函数\n\n \n\n1.字符串函数 长度与分析用\n\n\n\n1,datalength(Char_expr) 返回字符串包含字符数,但不包含后面的空格\n\n2,substring(expression,start,length) 取子串，字符串的下标是从“1”，start为起始位置，length为字符串长度，实际应用中以len(expression)取得其长度\n\n3,right(char_expr,int_expr) 返回字符串右边第int_expr个字符，还用left于之相反\n\n4,isnull( check_expression , replacement_value )如果check_expression為空，則返回replacement_value的值，不為空，就返回check_expression字符操作类\n\n5,Sp_addtype自定義數據類型\n例如：EXEC sp_addtype birthday, datetime, \'NULL\'\n\n6,set nocount {on|off}\n\n使返回的结果中不包含有关受 Transact-SQL 语句影响的行数的信息。如果存储过程中包含的一些语句并不返回许多实际的数据，则该设置由于大量减少了网络流量，因此可显著提高性能。SET NOCOUNT 设置是在执行或运行时设置，而不是在分析时设置。\n\n\n\nSET NOCOUNT 为 ON 时，不返回计数（表示受 Transact-SQL 语句影响的行数）。\nSET NOCOUNT 为 OFF 时，返回计数\n\n\n\n常识\n\n \n\n在SQL查询中：from后最多可以跟多少张表或视图：256\n\n在SQL语句中出现 Order by,查询时，先排序，后取\n\n在SQL中，一个字段的最大容量是8000，而对于nvarchar(4000),由于nvarchar是Unicode码。 \n\n       \n\nSQLServer2000同步复制技术实现步骤\n\n\n\n一、 预备工作\n\n\n\n1.发布服务器,订阅服务器都创建一个同名的windows用户,并设置相同的密码,做为发布快照文件夹的有效访问用户\n\n--管理工具\n\n--计算机管理\n\n--用户和组\n\n--右键用户\n\n--新建用户\n\n--建立一个隶属于administrator组的登陆windows的用户（SynUser）\n\n\n\n2.在发布服务器上,新建一个共享目录,做为发布的快照文件的存放目录,操作:\n\n我的电脑--D:\\ 新建一个目录,名为: PUB\n\n--右键这个新建的目录\n\n--属性--共享\n\n--选择\"共享该文件夹\"\n\n--通过\"权限\"按纽来设置具体的用户权限,保证第一步中创建的用户(SynUser) 具有对该文件夹的所有权限\n\n--确定\n\n\n\n3.设置SQL代理(SQLSERVERAGENT)服务的启动用户(发布/订阅服务器均做此设置)\n\n开始--程序--管理工具--服务\n\n--右键SQLSERVERAGENT\n\n--属性--登陆--选择\"此账户\"\n\n--输入或者选择第一步中创建的windows登录用户名（SynUser）\n\n--\"密码\"中输入该用户的密码\n\n\n\n4.设置SQL Server身份验证模式,解决连接时的权限问题(发布/订阅服务器均做此设置)\n\n企业管理器\n\n--右键SQL实例--属性\n\n--安全性--身份验证\n\n--选择\"SQL Server 和 Windows\"\n\n--确定\n\n\n\n5.在发布服务器和订阅服务器上互相注册\n\n企业管理器\n\n--右键SQL Server组\n\n--新建SQL Server注册...\n\n--下一步--可用的服务器中,输入你要注册的远程服务器名 --添加\n\n--下一步--连接使用,选择第二个\"SQL Server身份验证\"\n\n--下一步--输入用户名和密码（SynUser）\n\n--下一步--选择SQL Server组,也可以创建一个新组\n\n--下一步--完成\n\n\n\n6.对于只能用IP,不能用计算机名的,为其注册服务器别名（此步在实施中没用到）\n\n (在连接端配置,比如,在订阅服务器上配置的话,服务器名称中输入的是发布服务器的IP)\n\n开始--程序--Microsoft SQL Server--客户端网络实用工具\n\n--别名--添加\n\n--网络库选择\"tcp/ip\"--服务器别名输入SQL服务器名\n\n--连接参数--服务器名称中输入SQL服务器ip地址\n\n--如果你修改了SQL的端口,取消选择\"动态决定端口\",并输入对应的端口号\n\n\n\n二、 正式配置\n\n\n\n1、配置发布服务器\n\n\n\n打开企业管理器，在发布服务器（B、C、D）上执行以下步骤:\n\n(1) 从[工具]下拉菜单的[复制]子菜单中选择[配置发布、订阅服务器和分发]出现配置发布和分发向导\n\n(2) [下一步] 选择分发服务器 可以选择把发布服务器自己作为分发服务器或者其他sql的服务器（选择自己）\n\n(3) [下一步] 设置快照文件夹\n\n采用默认\\\\servername\\Pub\n\n(4) [下一步] 自定义配置\n\n可以选择:是,让我设置分发数据库属性启用发布服务器或设置发布设置\n\n否,使用下列默认设置（推荐）\n\n(5) [下一步] 设置分发数据库名称和位置 采用默认值\n\n(6) [下一步] 启用发布服务器 选择作为发布的服务器\n\n(7) [下一步] 选择需要发布的数据库和发布类型\n\n(8) [下一步] 选择注册订阅服务器\n\n(9) [下一步] 完成配置\n\n\n\n2、创建出版物\n\n\n\n发布服务器B、C、D上\n\n(1)从[工具]菜单的[复制]子菜单中选择[创建和管理发布]命令\n\n(2)选择要创建出版物的数据库，然后单击[创建发布]\n\n(3)在[创建发布向导]的提示对话框中单击[下一步]系统就会弹出一个对话框。对话框上的内容是复制的三个类型。我们现在选第一个也就是默认的快照发布(其他两个大家可以去看看帮助)\n\n(4)单击[下一步]系统要求指定可以订阅该发布的数据库服务器类型,\n\nSQLSERVER允许在不同的数据库如 orACLE或ACCESS之间进行数据复制。\n\n但是在这里我们选择运行\"SQL SERVER 2000\"的数据库服务器\n\n(5)单击[下一步]系统就弹出一个定义文章的对话框也就是选择要出版的表\n\n注意: 如果前面选择了事务发布 则再这一步中只能选择带有主键的表\n\n(6)选择发布名称和描述\n\n(7)自定义发布属性 向导提供的选择:\n\n是 我将自定义数据筛选,启用匿名订阅和或其他自定义属性\n\n否 根据指定方式创建发布 （建议采用自定义的方式）\n\n(8)[下一步] 选择筛选发布的方式\n\n(9)[下一步] 可以选择是否允许匿名订阅\n\n1)如果选择署名订阅,则需要在发布服务器上添加订阅服务器\n\n方法: [工具]->[复制]->[配置发布、订阅服务器和分发的属性]->[订阅服务器] 中添加\n\n否则在订阅服务器上请求订阅时会出现的提示:改发布不允许匿名订阅\n\n如果仍然需要匿名订阅则用以下解决办法\n\n[企业管理器]->[复制]->[发布内容]->[属性]->[订阅选项] 选择允许匿名请求订阅\n\n2)如果选择匿名订阅,则配置订阅服务器时不会出现以上提示\n\n(10)[下一步] 设置快照 代理程序调度\n\n(11)[下一步] 完成配置\n\n当完成出版物的创建后创建出版物的数据库也就变成了一个共享数据库\n\n有数据\n\nsrv1.库名..author有字段:id,name,phone,\n\nsrv2.库名..author有字段:id,name,telphone,adress\n\n \n\n要求：\n\nsrv1.库名..author增加记录则srv1.库名..author记录增加\n\nsrv1.库名..author的phone字段更新，则srv1.库名..author对应字段telphone更新\n\n--*/\n\n \n\n--大致的处理步骤\n\n--1.在 srv1 上创建连接服务器,以便在 srv1 中操作 srv2,实现同步\n\nexec sp_addlinkedserver \'srv2\',\'\',\'SQLOLEDB\',\'srv2的sql实例名或ip\'\n\nexec sp_addlinkedsrvlogin \'srv2\',\'false\',null,\'用户名\',\'密码\'\n\ngo\n\n--2.在 srv1 和 srv2 这两台电脑中,启动 msdtc(分布式事务处理服务),并且设置为自动启动\n\n。我的电脑--控制面板--管理工具--服务--右键 Distributed Transaction Coordinator--属性--启动--并将启动类型设置为自动启动\n\ngo\n\n  \n\n--然后创建一个作业定时调用上面的同步处理存储过程就行了\n\n \n\n企业管理器\n\n--管理\n\n--SQL Server代理\n\n--右键作业\n\n--新建作业\n\n--\"常规\"项中输入作业名称\n\n--\"步骤\"项\n\n--新建\n\n--\"步骤名\"中输入步骤名\n\n--\"类型\"中选择\"Transact-SQL 脚本(TSQL)\"\n\n--\"数据库\"选择执行命令的数据库\n\n--\"命令\"中输入要执行的语句: exec p_process\n\n--确定\n\n--\"调度\"项\n\n--新建调度\n\n--\"名称\"中输入调度名称\n\n--\"调度类型\"中选择你的作业执行安排\n\n--如果选择\"反复出现\"\n\n--点\"更改\"来设置你的时间安排\n\n \n\n然后将SQL Agent服务启动,并设置为自动启动,否则你的作业不会被执行\n\n \n\n设置方法:\n\n\n\n我的电脑--控制面板--管理工具--服务--右键 SQLSERVERAGENT--属性--启动类型--选择\"自动启动\"--确定. \n\n--3.实现同步处理的方法2,定时同步\n\n--在srv1中创建如下的同步处理存储过程\ncreate proc p_process as\n\n--更新修改过的数据\n\nupdate b set name=i.name,telphone=i.telphone\n\nfrom srv2.库名.dbo.author b,author i\n\nwhere b.id=i.id and\n\n(b.name <> i.name or b.telphone <> i.telphone)\n\n--插入新增的数据\n\ninsert srv2.库名.dbo.author(id,name,telphone)\n\nselect id,name,telphone from author i\n\nwhere not exists(\n\nselect * from srv2.库名.dbo.author where id=i.id)\n\n\n--删除已经删除的数据(如果需要的话)\n\ndelete b\n\nfrom srv2.库名.dbo.author b\n\nwhere not exists(select * from author where id=b.id)\n\ngo', '2020-08-20 00:00:00', 'zjh', NULL, '转载\n-', 1, '0');
INSERT INTO `exception` VALUES (99063, 'websocket应用(springboot,js)', '## pom.xml\n\r\n```\n<dependencies>\n        <dependenc', '## pom.xml\n\r\n```\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-websocket</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n            <version>1.2.68</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <mainClass>cn.zjh.spring.websocket.WebSocketApplication</mainClass>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>2.19.1</version>\n                <configuration>\n                    <skipTests>true</skipTests>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\r\n```\n>websocket.java\n\r\n```\npackage cn.zjh.spring.websocket.server;\n\nimport cn.zjh.spring.websocket.pojo.Position;\nimport com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/websocket/{username}\")\n@Component\n@Slf4j\n@SuppressWarnings(\"unchecked\")\npublic class WebSocketServer {\n    private static int onlineCount = 0;\n    private static Map<String, WebSocketServer> clients = new ConcurrentHashMap();\n    private Session session;\n    private String username;\n    private static Integer threadStatus = 0;\n    public WebSocketServer() {\n\n    }\n\n    @OnOpen\n    public void onOpen(@PathParam(\"username\") String username, Session session) throws IOException {\n\n        this.username = username;\n        this.session = session;\n        addOnlineCount();\n        clients.put(username, this);\n        //连接逻辑处理\n        StringBuffer sb = new StringBuffer();\n        clients.forEach((key, value) -> sb.append(\"\\tusername:\").append(key));\n        log.info(\"【{}】已建立连接,当前连接ws连接池:{}\",username,sb);\n        log.info(\"开始推送坐标信息\\n------------------------------------\");\n        if (threadStatus == 0) {\n            log.info(\"线程初始化\");\n            TestThread testThread = new TestThread();\n            Thread thread = new Thread(testThread);\n            thread.start();\n            log.info(\"初始化完毕\");\n        }\n\n    }\n\n    @OnClose\n    public void onClose() throws IOException {\n        clients.remove(this.username);\n        subOnlineCount();\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) throws IOException {\n        synchronized(session) {\n            this.session.getAsyncRemote().sendText(message);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void sendMessageTo(String message, String To) throws IOException {\n        Iterator var3 = clients.values().iterator();\n\n        while(var3.hasNext()) {\n            WebSocketServer item = (WebSocketServer)var3.next();\n            if (item.username.equals(To)) {\n                item.session.getAsyncRemote().sendText(message);\n            }\n        }\n\n    }\n\n    public void sendMessageAll(String message) throws IOException {\n        Iterator var2 = clients.values().iterator();\n\n        while(var2.hasNext()) {\n            WebSocketServer item = (WebSocketServer)var2.next();\n            item.session.getAsyncRemote().sendText(message);\n        }\n\n    }\n\n    public static synchronized int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public static synchronized void addOnlineCount() {\n        ++onlineCount;\n    }\n\n    public static synchronized void subOnlineCount() {\n        --onlineCount;\n    }\n\n    public static synchronized Map<String, WebSocketServer> getClients() {\n        return clients;\n    }\n\n\n\n\n    /***\n     * 邱刚的临时内部类\n     * {id：1,course:180.5,altitude:2200,longitude:123.45,latitude:27.22}\n     */\n\n    private class TestThread implements Runnable {\n\n        /***\n         * 线程\n         */\n        @Override\n        public void run() {\n            log.info(\"线程启动\");\n            threadStatus=1;\n            int count=0;\n            for (int i = 0;  ; i++) {\n                if(clients.size()!=0){\n\n                    for (Map.Entry<String, WebSocketServer> item : clients.entrySet()) {\n\n                        log.info(\"当前线程还存在{}个webSocket客户端对象\",clients.size());\n                        try {\n                            Thread.sleep(3000/clients.size());\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        try {\n                            List<Position> list = new ArrayList<>();\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(106.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(108.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(9000.0).longitude(110.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(112.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(114.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(116.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(2200.0).longitude(118.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(7800.0).longitude(120.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(4500.0).longitude(122.1).latitude(27.123).build());\n                            list.add(Position.builder().id(1).course(353.5).altitude(8000.0).longitude(124.1).latitude(27.123).build());\n                            List<Position> list2 = new ArrayList<>();\n                            System.out.println(count);\n                            list2.add(list.get(count%10));\n                            ObjectMapper objectMapper = new ObjectMapper();\n                            sendMessageTo(  objectMapper.writeValueAsString(list2),item.getKey());\n                            count ++;\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n                    }\n\n                }else{\n                    log.info(\"告知线程休眠\");\n                    Thread.interrupted();\n                    break;\n                }\n\n            }\n            log.info(\"线程结束\\n---------------------------\");\n            threadStatus=0;\n        }\n    }\n\n\n    }\n\n\r\n```\n\n>html\n\r\n```\n<script>\nvar ws = new WebSocket(\"ws://localhost:13000/websocket/zjh\"); \n//申请一个WebSocket对象，参数是服务端地址，同http协议使用http://开头一样，WebSocket协议的url使用ws://开头，另外安全的WebSocket协议使用wss://开头\nws.onopen = function(){\n　　//当WebSocket创建成功时，触发onopen事件\n  \n}\nws.onmessage = function(e){\n　　//当客户端收到服务端发来的消息时，触发onmessage事件，参数e.data包含server传递过来的数据\n　　console.log(\"服务器返回\",e.data);\n}\nws.onclose = function(e){\n　　//当客户端收到服务端发送的关闭连接请求时，触发onclose事件\n　　console.log(\"close\");\n}\nws.onerror = function(e){\n　　//如果出现连接、处理、接收、发送数据失败的时候触发onerror事件\n　　console.log(error);\n}\n</script>\n\r\n```', '2020-08-20 00:00:00', 'zjh', NULL, '学习记录\n-', 1, '0');
INSERT INTO `exception` VALUES (99064, '分布式集群的名词，你懂多少呢', '##   前言:\n在“高并发，海量数据，分布式，NoSql，云计算......”概念满天飞的年代，相', '##   前言:\n在“高并发，海量数据，分布式，NoSql，云计算......”概念满天飞的年代，相信不少朋友都听说过甚至常与人提起“集群，负载均衡”等，\n\n但不是所有人都有机会真正接触到这些技术，也不是所有人都真正理解了这些“听起来很牛的”技术名词。下面简单解释一下吧。\n\n要了解这些概念首先要了解一下项目架构的演进，我这里应用一张Dubbo的文档图片如图\n\n##   一：项目架构的演进\n\nimg\n\n### ORM与MVC：\n\n早期的架构都集中在一台服务器上，这样对于小型的业务访问量是完全可以的，但是随着业务的增多，我们引进的MVC的架构，这种架构是将整个业务分成不同的层（表现层，业务层，数据访问层）维护也更加方面了，开发更加方便。\n\n### PRC架构：\n\n但是业务如果继续增大，项目会出现臃肿，一台服务器已经完全没办法支持了，所以出现了RPC分布式的架构，RPC架构就是将服务进行合理拆分，分别放入多台服务器执行，服务器与服务器之间通过远程调用的方式进行通信。\n\n1.服务提供者：运行在服务器端，提供服务接口与服务实现类\n\n2.服务中心：运行在服务器端，负责将本地服务发布成远程服务，\n\n3.管理远程服务，提供服务给消费者使用。\n\n4.服务消费者：运行在客户端，通过远程代理对象调用远程服务\n目前Java中常用的RPC框架：\n\n>1：Dubbo:  \n2：Spring Cloud  \n3：Thrift  \n\n### SOA架构：\n但是业务继续增加，对RPC架构来说，各个服务与服务之间的通信越来越多，依赖越来越多，越来越混乱，给开发带来了困难，于是SOA架构应运而生，SOA架构将服务与服务集中起来进行管理，加上一个服务治理中心。谁发布了服务来中心进行注册，谁需要依赖什么服务来中心进行请求。\n\n而最近很火的微服务，则是将业务拆分更加精细，每一个可以成为一个完整的服务。演变肯定会演变，但是过程得多久谁也不好说。\n\n## 二：名词解释\n接下来进入正题，解释让外行看起来高大上的名词\n\n### 1：集群\n集群(Cluster)\n所谓集群是指一组独立的计算机系统构成的一个松耦合的多处理器系统，它们之间通过网络实现进程间的通信。应用程序可以通过网络共享内存进行消息传送，实现分布式计算机。通俗一点来说，就是让若干台计算机联合起来工作(服务)，可以是并行的，也可以是做备份。\n\n大规模集群，通常具备以下一些特点：\n\n>(1)高可靠性(HA)  \n利用集群管理软件，当主服务器故障时，备份服务器能够自动接管主服务器的工作，并及时切换过去，以实现对用户的不间断服务。\n\n>(2)高性能计算(HP)  \n即充分利用集群中的每一台计算机的资源，实现复杂运算的并行处理，通常用于科学计算领域，比如基因分析、化学分析等。\n\n>(3)负载平衡(LB)  \n即把负载压力根据某种算法合理分配到集群中的每一台计算机上，以减轻主服务器的压力，降低对主服务器的硬件和软件要求。\n常用的集群又分以下几种：   \n>>load balance cluster(负载均衡集群)   \n\n>>一共有四兄弟开裁缝铺，生意特别多，一个人做不下来，老是延误工期，于是四个兄弟商量：老大接订单, 三个兄弟来干活。客户多起来之后，老大根据一定的原则(policy) 根据三兄弟手上的工作量来分派新任务。\n\n>>High availability cluster(高可用集群)    \n\n>>两兄弟开早餐铺，生意不大，但是每天早上7点到9点之间客户很多并且不能中断。为了保证2个小时内这个早餐铺能够保证持续提供服务，两兄弟商量几个方法:    \n\n>>>方法一：  \n平时老大做生意，老二这个时间段在家等候，一旦老大无法做生意了，老二就出来顶上，这个叫做 Active/Standby.(双机热备)   \n\n>>>方法二：    \n平时老大做生意，老二这个时候就在旁边帮工，一旦老大无法做生意，老二就马上顶上，这个叫做Active/Passive.(双机双工)   \n\n>>>方法三：\n平时老大卖包子，老二也在旁边卖豆浆，老大有问题，老二就又卖包子，又卖豆浆，老二不行了，老大就又卖包子，又卖豆浆.这个叫做Active/Active (dual Active)(双机互备)\n\n>>high computing clustering(高性能计算集群)   \n\n>>10个兄弟一起做手工家具生意，一个客户来找他们的老爹要求做一套非常复杂的仿古家具，一个人做也可以做，不过要做很久很久，为了1个星期就交出这一套家具，10个兄弟决定一起做。   \n   老爹把这套家具的不同部分分开交给儿子们作，然后每个儿子都在做木制家具的加工，最后拼在一起叫货。   \n   老爹是scheduler任务调度器，儿子们是compute node. 他们做的工作叫做作业。\n\n### 2：负载均衡\n\n>HTTP重定向负载均衡   \n\n当用户发来请求的时候，Web服务器通过修改HTTP响应头中的Location标记来返回一个新的url，然后浏览器再继续请求这个新url，实际上就是页面重定向。通过重定向，来达到“负载均衡”的目标。例如，我们在下载JAVA源码包的时候，点击下载链接时，为了解决不同国家和地域下载速度的问题，它会返回一个离我们近的下载地址。重定向的HTTP返回码是302。优点：比较简单。缺点：浏览器需要两次请求服务器才能完成一次访问，性能较差。重定向服务自身的处理能力有可能成为瓶颈，整个集群的伸缩性国模有限；使用HTTP302响应码重定向，有可能使搜索引擎判断为SEO作弊，降低搜索排名。   \n\n>DNS域名解析负载均衡\n\nDNS（Domain Name System）负责域名解析的服务，域名url实际上是服务器的别名，实际映射是一个IP地址，解析过程，就是DNS完成域名到IP的映射。而一个域名是可以配置成对应多个IP的。因此，DNS也就可以作为负载均衡服务。事实上，大型网站总是部分使用DNS域名解析，利用域名解析作为第一级负载均衡手段，即域名解析得到的一组服务器并不是实际提供Web服务的物理服务器，而是同样提供负载均衡服务的内部服务器，这组内部负载均衡服务器再进行负载均衡，将请求分发到真是的Web服务器上。优点：将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦，同时许多DNS还支持基于地理位置的域名解析，即会将域名解析成举例用户地理最近的一个服务器地址，这样可以加快用户访问速度，改善性能。缺点：不能自由定义规则，而且变更被映射的IP或者机器故障时很麻烦，还存在DNS生效延迟的问题。而且DNS负载均衡的控制权在域名服务商那里，网站无法对其做更多改善和更强大的管理。\n\n>反向代理负载均衡\n\n反向代理服务可以缓存资源以改善网站性能。实际上，在部署位置上，反向代理服务器处于Web服务器前面（这样才可能缓存Web相应，加速访问），这个位置也正好是负载均衡服务器的位置，所以大多数反向代理服务器同时提供负载均衡的功能，管理一组Web服务器，将请求根据负载均衡算法转发到不同的Web服务器上。Web服务器处理完成的响应也需要通过反向代理服务器返回给用户。由于web服务器不直接对外提供访问，因此Web服务器不需要使用外部ip地址，而反向代理服务器则需要配置双网卡和内部外部两套IP地址。优点：和反向代理服务器功能集成在一起，部署简单。缺点：反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。\n\n>负载均衡策略:    \n1、轮询   \n2、加权轮询    \n3、最少连接数    \n4、最快响应    \n5、Hash法     \n\n### 3：缓存    \n\n缓存就是将数据存放在距离计算最近的位置以加快处理速度。缓存是改善软件性能的第一手段，现在CPU越来越快的一个重要因素就是使用了更多的缓存，在复杂的软件设计中，缓存几乎无处不在。大型网站架构设计在很多方面都使用了缓存设计。   \n#### CDN缓存\n\n内容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商哪里，在这里缓存网站的一些静态资源（较少变化的数据），可以就近以最快速度返回给用户，如视频网站和门户网站会将用户访问量大的热点内容缓存在CDN中。\n#### 反向代理缓存\n\n反向代理属于网站前端架构的一部分，部署在网站的前端，当用户请求到达网站的数据中心时，最先访问到的就是反向代理服务器，这里缓存网站的静态资源，无需将请求继续转发给应用服务器就能返回给用户。\n#### 本地缓存\n\n在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而无需访问数据库。\n#### 分布式缓存\n\n大型网站的数据量非常庞大，即使只缓存一小部分，需要的内存空间也不是单机能承受的，所以除了本地缓存，还需要分布式缓存，将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据。\n### 4：流控（流量控制）\n>流量丢弃  \n\n通过单机内存队列来进行有限的等待，直接丢弃用户请求的处理方式显得简单而粗暴，并且如果是I/O密集型应用（包括网络I/O和磁盘I/O），瓶颈一般不再CPU和内存。因此，适当的等待，既能够替身用户体验，又能够提高资源利用率。\n通过分布式消息队列来将用户的请求异步化。', '2020-08-20 00:00:00', 'zjh', NULL, '转载\n-', 0, '0');
INSERT INTO `exception` VALUES (99065, 'bat中压缩rar zip的参数', '## bat中使用rar的参数\n\n\r\n```\n数据库备份，导出的dmp 文件比较大，需要压缩，压缩后', '## bat中使用rar的参数\n\n\r\n```\n数据库备份，导出的dmp 文件比较大，需要压缩，压缩后大小能变为原来十分之一左右吧。\n\n写的是批处理的语句，每天调用，自动导出dmp 文件，压缩删除原文件。\n\n首先写下路径\n\n先将压缩软件的路径写入系统的环境变量里，加入到path中。比如将“C:\\Program Files\\WinRAR\\”加入到path中。\n\n之后批处理中写好相应的处理命令：\n\nrar a -df %filename%.rar %filename%.dmp\n\n \n\n \n\n附： 压缩参数\n\n \n\n用法:     rar <命令> -<开关 1> -<开关 N> <压缩文件> <文件...>\n               <@列表文件...> <解压路径\\>\n\n<注释>\na             添加文件到压缩文件\nc             添加压缩文件注释\ncf            添加文件注释\nch            更改压缩文件参数\ncw            写入压缩文件注释到文件\nd             删除压缩文件中的文件\ne             解压压缩文件到当前目录\nf             刷新压缩文件中的文件\ni[参数]=<串> 在压缩文件中查找字符串\nk             锁定压缩文件\nl[t,b]        列出压缩文件[技术信息,简洁]\nm[f]          移动到压缩文件[仅对文件]\np             打印文件到标准输出设备\nr             修复压缩文件\nrc            重建丢失的卷\nrn            重命名压缩文件\nrr[N]         添加数据恢复记录\nrv[N]         创建恢复卷\ns[名字|-]     转换压缩文件为自解压格式或反之\nt             测试压缩文件\nu             更新压缩文件中的文件\nv[t,b]        详细列出压缩文件[技术信息,简洁]\nx             用绝对路径解压文件\n\n<开关>\n-             停止扫描\nac            压缩或解压后清除存档属性\nad            添加压缩文件名到目标路径\nag[格式]      使用当前日期生成压缩文件名\nao            添加具有存档属性的文件\nap<路径>      添加路径到压缩文件中\nas            同步压缩文件内容\nav            添加用户身份校验 (仅注册版)\nav-           禁用用户身份校验\nc-            禁用注释显示\ncfg-          禁用读取配置\ncl            名称转换为小写\ncu            名称转换为大写\ndf            压缩后删除文件\ndh            打开共享文件\nds            对固实压缩文件禁用名称排序\ne[+]<属性>    设置文件排除和包括属性\ned            不添加空目录\nen            不添加\"压缩文件结束\"标志\nep            从名称中排除路径\nep1           从名称中排除基本目录\nep2           展开为完整路径\nep3           扩展路径为包含盘符的完全路径\nf             刷新文件\nhp[密码]      同时加密文件数据和文件头\nid[c,d,p,q]   禁用信息显示\nieml[地址]    邮寄压缩文件\nierr          发送所有消息到标准错误设备\nilog[名称]    把错误写到日志文件 (仅注册版)\ninul          禁用所有消息\nioff          完成一个操作后关闭 PC 电源\nisnd          启用声音\nk             锁定压缩文件\nkb            保留损坏的已解压文件\nm<0..5>       设置压缩级别(0-存储...3-默认...5-最大)\nmc<参数>      设置高级压缩参数\nmd<大小>      以KB为单位的字典大小(64,128,256,512,1024,2048,4096 or A-G)\nms[ext;ext]   指定存储的文件类型\nmt<线程>      设置线程数\nn<文件>       仅包括指定文件\nn@            从标准输入设备读取要包括的文件名称\nn@<列表>      在指定列表文件包括文件\no+            覆盖已存在文件\no-            不覆盖已存在文件\noc            设置 NTFS 压缩属性\nor            自动重命名文件\nos            保存 NTFS 流\now            保存或恢复文件所有权和组\n[密码]        设置密码\np-            不询问密码\nr             包含子目录\nr0            仅包含通配符名称的子目录\nri<P>[:<S>]   设置优先级 (0-默认,1-最小..15-最大) 和休眠时间(毫秒)\nrr[N]         添加数据恢复记录\nrv[N]         创建恢复卷\ns[<N>,v[-],e] 创建固实压缩文件\ns-            禁用固实压缩文件\nsc<chr>[obj] 指定字符集\nsfx[名称]     创建自解压文件\nsi[名称]      从标准输入设备读取数据\nsl<大小>      处理小于指定大小的文件\nsm<大小>      处理大于指定大小的文件\nt             压缩后测试文件\nta<日期>      添加日期 <日期> 后修改的文件,日期格式 YYYYMMDDHHMMSS\ntb<日期>      添加日期 <日期> 前修改的文件,日期格式 YYYYMMDDHHMMSS\ntk            保留原始压缩文件时间\ntl            设置压缩文件时间为最新时间\ntn<时间>      添加 <时间> 以后的文件\nto<时间>      添加 <时间> 以前的文件\nts<m,c,a>[N] 保存或恢复文件时间(修改,创建,访问)\nu             更新文件\nv             自动检测创建卷的大小或者列出所有的卷\nv<大小>[k,b] 创建卷大小=<大小>*1000 [*1024, *1]\nvd            创建卷前清除磁盘内容\nver[n]        文件版本控制\nvn            使用旧样式卷命名方案\nvp            每卷之前暂停\nw<路径>       指定工作目录\nx<文件>       排除指定的文件\nx@            从标准输入设备读取要排除的文件名\nx@<列表>      排除指定列表文件中的文件\ny             假设对全部询问都回答是\nz[文件]       从文件读取压缩文件注释\n\n \n\n \n\n举个例子：    建立一个批处理BackFav.bat（名字可以随便起）文件内容：\n\nREM 这个批处理文件是用来自动备份我的收藏夹\n\nREM WinRAR <命令> -<开关1> -<开关N> <压缩文件> <文件> <@列表文件> <解压路径\\>\n\n\"D:\\Program Files\\WinRAR\\WinRAR.exe\" a -as -r -sfx -zsfxpara.txt -EP1 \"d:\\my documents\\Favorites.exe\" \"%USERPROFILE%\\Favorites\"\n\n＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝\n\n参数说明：\n\na:                   添加指定的文件（源目录，这里是\"%USERPROFILE%\\Favorites\"）和文件夹到压缩文件（目标文件，这里是\"d:\\my documents\\Favorites.exe\"）中。\n\n-as:                这是一个开关，指添加方式是“同步压缩文件内容”\n\n-r:                  表示“包含子文件夹”\n\n-sfx:               表示建立的是一个自解压文件\n\n-zsfxpara.txt: 从文件sfxpara.txt读取压缩文件注释，这注释有什么用后面解释\n\n-ep1:             表示不把路径%USERPROFILE%保存在压缩文件中\n\n \n\n2. 注释文件的作用\n\n建立压缩文件的时候不光要考虑压缩那些文件，还要考虑怎么解压缩。通过注释文件可以向压缩包传递许多有用的信息。\n\nsfxpara.txt内容：\n\nPATH=%USERPROFILE%\\\nSilent=1\n\n例：\n\"C:\\Program Files\\WinRAR\\Rar.exe\" a \"g:\\aa.rar\" \"f:\\11.txt\"     压缩\"f:\\11.txt\"到G盘，命名为“aa”\n\"C:\\Program Files\\WinRAR\\Rar.exe\" d \"g:\\aa.rar\" \"22.bat\"        删除压缩包\"g:\\aa.rar\"中的\"22.bat\" 文件\n\"C:\\Program Files\\WinRAR\\Rar.exe\" d \"g:\\aa.rar\" \"ABC\"           删除压缩包\"g:\\aa.rar\"中的\"ABC\" 文件夹\n\r\n```\n转载于：<a href=\"https://www.cnblogs.com/huangye-dream/p/3584965.html\">https://www.cnblogs.com/huangye-dream/p/3584965.html</a>', '2020-08-21 00:00:00', 'zjh', NULL, '常用工具\n-', 0, '0');
INSERT INTO `exception` VALUES (99066, 'jwt示例', '##     jwt前端axios示例，vue+element-ui\n\r\n```\n<!DOCTYPE', '##     jwt前端axios示例，vue+element-ui\n\r\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <!-- import CSS -->\n  <link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\">\n	<style type=\"text/css\">\n	.div_space{\n		padding-top:20px;\n		margin-bottom:20px;\n	}\n	</style>\n</head>\n<body>\n  <div id=\"app\">\n  \n  \n	\n	<div class=\"div_space\" style=\"width:20%;margin:0 auto;margin-top:100px;max-length:200px;\">\n	<el-col ><el-input clearable v-model=\"account.username\" placeholder=\"请输入账号\"></el-input></el-col>\n	</div>\n	\n	 <div class=\"div_space\" style=\"clear:both;width:20%;margin:20px auto;max-length:200px;\">\n	<el-col ><el-input clearable placeholder=\"请输入密码\" v-model=\"account.password\" show-password></el-input></el-col>\n	</div>\n	\n	<div class=\"div_space\" style=\"clear:both;text-align:center\">\n	<el-button type=\"primary\" @click=\"sign()\">登录</el-button>\n	<el-button type=\"warning\" @click=\"verify()\">验证</el-button>\n	\n	</div>\n  </div>\n</body>\n  <!-- import Vue before Element -->\n  <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n  <!-- import JavaScript -->\n  <script crossorigin=\"anonymous\" integrity=\"sha384-WbhdtWslh0AUD1Dhf8OExUvvjZ/VN6o2HHMsYlDXb6uf3IweMH13dGL4V/KgDc7y\" src=\"https://lib.baomitu.com/element-ui/2.13.2/index.js\"></script>\n  \n  <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n  <script src=\"https://cdn.bootcdn.net/ajax/libs/js-cookie/2.2.1/js.cookie.js\"></script>\n  <script>\n    new Vue({\n      el: \'#    app\',\n      data: function() {\n        return { \n		visible: false,\n		url:\"http://127.0.0.1:8601\",\n		auth:{\n			accessToken:\"\",\n			refreshToken:\"\"\n		},\n		account:{\n			username:\"\",\n			password:\"\"\n		}\n		\n      }\n	  },methods:{\n			sign(){\n				 axios({\n					url:this.url+\"/login\",\n					method: \'POST\',\n					data:{username:this.account.username,password:this.account.password}\n					\n				 })\n				   .then(response =>{\n				   console.log(response)\n					\n					 if(response.data.code==0)\n				  this.$message.success(\"登录成功！，分发token\")\n				 this.auth.accessToken =  response.data.data.accessToken\n				 this.auth.refreshToken = response.data.data.refreshToken\n				 \n				 this.setCookie(\"accessToken\",this.auth.accessToken)\n				 this.setCookie(\"refreshToken\",this.auth.refreshToken)\n				 console.log(this.getCookie(\"accessToken\"),\"------------------\")\n				 console.log(response.data)\n					\n				  })\n				   .catch((error) =>{ \n				  console.log(error)\n				   this.$message.error(error.response.data.msg+\":\"+error.response.data.data)\n				 })\n				 \n				\n			},\n			verify(){\n				axios({\n					url:this.url+\"/status\",\n					headers: {\n						\'token\': this.auth.accessToken\n					}\n				}).then(response =>{\n				   console.log(response.data)\n				   if(response.data.code==0)\n				   this.$message.success(\"权限验证通过\")\n				   else{\n				    this.refreshAuth(this.auth.accessToken)\n				   }\n				  })\n				   .catch((error) =>{\n					this.$message.error(error)\n				 })\n			},refreshAuth(accessToken){\n			\n				axios({\n					url:this.url+\"/auth\",\n					headers: {\n						\'accessToken\': accessToken,\n						\'refreshToken\': this.auth.refreshToken\n					}\n\n				}).then(response =>{\n				   console.log(response.data)\n				   if(response.data.code==0){\n					this.$message.success(\"refreshToken success!\")\n					this.auth.accessToken =  response.data.data.accessToken\n				  }\n				   else{\n				    this.$message.error(response.data.msg)\n				   }\n				  })\n				   .catch((error) =>{\n					this.$message.error(error)\n				 })\n			},setCookie(key,value){\n			 	return Cookies.set(key,value);\n			},getCookie(key){\n				return Cookies.get(key);\n			},getUrlPara(name){\n			\n			var reg = new RegExp(\"(^|\\\\?|&)\"+ name +\"=([^&]*)(\\\\s|&|$)\", \"i\");   \n\n			return reg.test(location.href+\"?name=1\") ? unescape(RegExp.$2.replace(/\\+/g, \" \")) : \"\"; \n		\n			//***************\n	  }\n	  },\n	  created:function(){\n		var url = \"http://localhost:8080/1?name=啊啊啊\"\n		console.log(url.toString().substr(url.indexOf(\"?\")+1).split(\"=\")[1])\n	}\n    })\n	\n	\n  </script>\n</html>\n\n\r\n```\n##     jwt后端示例：springboot\n###     依赖\n>pom.xml\n\r\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.2.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>cn.zjh.spring</groupId>\n    <artifactId>server-auto</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>server-auto</name>\n    <description>shrio+jwt in springboot</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n\n        <!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt -->\n        <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.8.3</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.3.2</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->\n        <dependency>\n            <groupId>org.hibernate.validator</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>6.1.5.Final</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.10</version>\n        </dependency>\n        <dependency>\n            <groupId>ch.qos.logback</groupId>\n            <artifactId>logback-core</artifactId>\n            <version>1.2.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-aop -->\n        <dependency>\n            <groupId>org.aspectj</groupId>\n            <artifactId>aspectjweaver</artifactId>\n            <version>1.9.5</version>\n        </dependency>\n\n\n\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n\r\n```\n###  controller:\n>AuthController.java\n\r\n```\nimport cn.zjh.spring.serverauth.auth.dto.AutoDTO;\nimport cn.zjh.spring.serverauth.auth.dto.TokenDTO;\nimport cn.zjh.spring.serverauth.auth.utils.JwtUtil;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport lombok.extern.slf4j.Slf4j;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.validation.Valid;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\n\n@RestController\n@CrossOrigin\n@Slf4j\npublic class AuthController {\n    private final static Logger logger = LoggerFactory.getLogger(\"accountSignServiceLog\");\n    @PostMapping(\"/login\")\n    public ResponseEntity<R<TokenDTO>> login(@Valid @RequestBody AutoDTO autoDTO, HttpServletRequest request) {\n        //登录成功\n        String accessToken,refreshToken;\n        TokenDTO tokenDTO=null;\n        try {\n            //accessToken为2分钟\n            accessToken = JwtUtil.sign(autoDTO.getUsername() + \"\"+autoDTO.getPassword(),1000*5);\n            //refreshToken过期时间为七天\n            refreshToken = JwtUtil.sign(autoDTO.getUsername() + \"\"+autoDTO.getPassword(),1000*60*60*24*7);\n            //builder模式重构\n            tokenDTO=TokenDTO.builder().accessToken(accessToken).refreshToken(refreshToken).build();\n        } catch (Exception e) {\n           log.error(\"api in /login has exception about\"+e);\n        }\n        //异步存储登陆日志\n        logger.info(\"\\r\\n登录日志 \\t\\t-->\"+new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date())+\"\\t\\t-->ip:\"+request.getRemoteHost()+\"\\t\\t-->\"+autoDTO.getUsername()+\"已登入\");\n        return ResponseEntity.status(HttpStatus.OK).body(R.ok(tokenDTO));\n    }\n    @GetMapping(\"/status\")\n    public R<Boolean> status( @RequestHeader String token){\n        boolean verify = JwtUtil.verify(token);\n        return verify?R.ok(true):R.failed(\"验证失败\");\n    }\n\n    @GetMapping(\"/auth\")\n    public R<TokenDTO> refreshToken(     @RequestHeader String accessToken,@RequestHeader String refreshToken){\n        if(JwtUtil.verify(refreshToken)){\n        String accessTokenUsername;\n       try {\n\n           accessTokenUsername = JwtUtil.getUsername(accessToken);\n       }catch (Exception ex){\n           //accessToken无效\n           return R.failed(\"认证失败，token格式错误\");\n       }\n            //对比accessToken 和 refreshToken的用户信息\n            if(accessToken.equals(JwtUtil.getUsername(refreshToken))){\n            accessToken = JwtUtil.sign(accessTokenUsername, 1000 * 5);\n        TokenDTO tokenDTO = new TokenDTO(accessToken,refreshToken);\n        return R.ok(tokenDTO);\n            }else{\n                return R.failed(\"非法参数！（accessInfo != refreshInfo）\");\n            }\n        }else{\n            //refreshToken 过期\n            return R.failed(\"认证失败，请重新登录\");\n        }\n    }\n\n    @GetMapping(\"/getCookie\")\n    public void getCookie(HttpServletRequest request){\n        Cookie[] cookies =  request.getCookies();\n        if(cookies != null){\n            for(Cookie cookie : cookies){\n                    System.out.println(cookie.getValue());\n            }\n        }\n\n    }\n\n}\n\r\n```\n###     DTO:\n>AuthDTO.java\n\r\n```\nimport lombok.Builder;\nimport lombok.Data;\n\nimport javax.validation.constraints.NotBlank;\n\n@Data\n\npublic class AutoDTO {\n    @NotBlank(message = \"用户名不能为空\")\n    private String username;\n    @NotBlank(message = \"密码不能为空\")\n    private String password;\n    @Builder\n    public AutoDTO() {\n    }\n    @Builder\n    public AutoDTO(@NotBlank(message = \"用户名不能为空\") String username, @NotBlank(message = \"密码不能为空\") String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\n\n\r\n```\n>TokenDTO.java\n\r\n```\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\npublic class TokenDTO {\n    private String accessToken;\n    private String refreshToken;\n\n    public TokenDTO() {\n\n    }\n    public TokenDTO(String accessToken, String refreshToken) {\n        this.accessToken = accessToken;\n        this.refreshToken = refreshToken;\n    }\n}\n\n\r\n```\n### Utils:\n>JwtUtil.java\n\r\n```\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.JWTVerifier;\nimport com.auth0.jwt.algorithms.Algorithm;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n@Slf4j\n@Component\npublic class JwtUtil {\n    /**\n     *  过期时长\n     */\n//    private static final long EXPIRE_TIME=30 *1000;\n\n    /**\n     * 私钥，使用它生成token，最好进行下加密\n     */\n    private static  String TOKEN_SECRET=\"poadh981gndo1xdobvIT!*(GEOB!({sH)SH!SH!GDadad\";\n\n    private static final String EXP = \"exp\";\n    private static final String PAYLOAD = \"payload\";\n\n\n    public static String sign(String useName,long exprieTime){\n        try{\n            Date date=new Date(System.currentTimeMillis()+exprieTime);\n            //私钥及加密算法\n            Algorithm algorithm=Algorithm.HMAC256(TOKEN_SECRET);\n            //设置头部信息\n            Map<String,Object> header=new HashMap<>();\n            header.put(\"typ\",\"JWT\");\n            header.put(\"alg\",\"HS256\");\n            //附带username和userid信息,存储到token中，生成签名\n            return JWT.create()\n                    .withHeader(header)\n                    //存储自己想要留存给客户端浏览器的内容\n                    .withClaim(\"username\",useName)\n                    .withExpiresAt(date)\n                    .sign(algorithm);\n\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    //解密，传入一个加密后的token字符串和解密后的类型\n    public static boolean verify(String token){\n\n        try {\n            Algorithm algorithm=Algorithm.HMAC256(TOKEN_SECRET);\n            JWTVerifier verifier =JWT.require(algorithm).build();\n            //此方法若token验证失败会抛错的，所以直接return true没问题\n            verifier.verify(token);\n            return true;\n        }catch (Exception e){\n            log.info(\"token验证失效\");\n            return false;\n        }\n\n    }\n\n\n    /**\n     * 获取token中信息 userName\n     * @param token\n     * @return\n     */\n    public static String getUsername(String token) {\n            DecodedJWT jwt = JWT.decode(token);\n            return jwt.getClaim(\"username\").asString();\n    }\n\n\n\n}\n\r\n```\n', '2020-08-27 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99067, 'springmvc报 415 not support Midea Type ', '##  springmvc报错\n>415not support Midea Type \n>>环境： ', '##  springmvc报错\n>415not support Midea Type \n>>环境：   \nspring-mvc:5.0.2.RELEASE   \nspring:5.0.2.RELEASE \n\n## 原因分析\n找了一遍源码，打了个断点发现，application/json 传输的payload体，需要手动加上application的注解\n\n但是如果直接设置三次` fastJsonHttpMessageConverter.setSupportedMediaTypes()`，就会覆盖掉其他的，选择自定义list装MideaType会报`/`之类的符号是非法字符串,然后就选择使用了`MediaType.parseMediaTypes()`方法，\n源码如下：\n\r\n```\npublic static List<MediaType> parseMediaTypes(@Nullable String mediaTypes) {\n        if (!StringUtils.hasLength(mediaTypes)) {\n            return Collections.emptyList();\n        } else {\n            String[] tokens = StringUtils.tokenizeToStringArray(mediaTypes, \",\");\n            List<MediaType> result = new ArrayList(tokens.length);\n            String[] var3 = tokens;\n            int var4 = tokens.length;\n\n            for(int var5 = 0; var5 < var4; ++var5) {\n                String token = var3[var5];\n                result.add(parseMediaType(token));\n            }\n\n            return result;\n        }\n    }\n\r\n```\n他会帮你拆分符号，让Type和MideaType分开，不用你自己手动去设置\n\n## 修改点如下：\n\r\n```\n@ComponentScan(\"xyz.zjhwork\")\n@EnableWebMvc\n@Configuration\npublic class MvcConf implements WebMvcConfigurer {\n\n\n\n    @Override\n    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n//        字符转换  包括解决中文乱码\n        FastJsonHttpMessageConverter fastJsonHttpMessageConverter = new FastJsonHttpMessageConverter();\n        fastJsonHttpMessageConverter.setSupportedMediaTypes(MediaType.parseMediaTypes(\"text/html;charset=utf-8,application/json,application/json;charset=utf-8\"));\n        converters.add(fastJsonHttpMessageConverter);\n    }\n\r\n```', '2020-08-27 00:00:00', 'zjh', NULL, '改bug\n-', 0, '0');
INSERT INTO `exception` VALUES (99068, 'bat命令合集', '## 基于svn的springboot后台批量打包+按时间建文件夹+按时间命名+挪动jar包位置\n\r', '## 基于svn的springboot后台批量打包+按时间建文件夹+按时间命名+挪动jar包位置\n\r\n```\n@echo off\n\nset bh=E:\\workplace\\source\\package\\package_directory_java_bh\\\nset jar_path=E:\\workplace\\source\\package\\package_bat\\jar\\\n\nset YMD=%date:~,10%\nset YMD=%YMD:/=-%\nset HMS=%time:~,8%\nset HMS=%HMS: =0%\nset HMS=%HMS::=.%\nset directory=\"bh_java_directory_%YMD%-%HMS%\"\n\n\necho \"-------------------svn up to date-------------------\"\ncd /d %bh%\ncall svn up\necho \"svn success\"\n\necho \"-------------------guarbasicinfo install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarbasicinfo\"\ncall mvn clean install \necho \"guarbasicinfo success!\"\n\necho \"-------------------guarlettermgr install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarlettermgr\"\ncall mvn clean install \necho \"guarlettermgr success!\"\n\necho \"-------------------guarprocessmgr install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarprocessmgr\"\ncall mvn clean install \necho \"guarprocessmgr success!\"\n\necho \"-------------------createDirectory start-------------------\"\ncall md %jar_path%%directory% \necho \"createDirectory finished\"\n\necho \"-------------------guarbasicinfo.jar copy start-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarbasicinfo\\target\\base.biz.svc.guarbasicinfo-0.0.1-release.jar\" %jar_path%%directory%\"\\base.biz.svc.guarbasicinfo-%YMD% %HMS%.jar\"\necho \"guarbasicinfo.jar copy finished\"\n\necho \"-------------------guarlettermgr.jar copy start\"-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarlettermgr\\target\\base.biz.svc.guarlettermgr-0.0.1-release.jar\" \"%jar_path%%directory%\\base.biz.svc.guarlettermgr-%YMD% %HMS%.jar\"\necho \"guarlettermgr.jar copy finished\"\n\necho \"-------------------guarprocessmgr.jar copy start\"-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarprocessmgr\\target\\base.biz.svc.guarprocessmgr-0.0.1-release.jar\" \"%jar_path%%directory%\\base.biz.svc.guarprocessmgr-%YMD% %HMS%.jar\"\necho \"guarprocessmgr.jar copy finished\"\n\npause\necho \"success\"\n\r\n```\n>基于git的vue前端批量打包+挪动build文件夹位置+按时间命名并压缩成zip包\n\r\n```\n@echo off\n\nset YMD=%date:~,10%\nset YMD=%YMD:/=-%\nset HMS=%time:~,8%\nset HMS=%HMS: =0%\nset HMS=%HMS::=.%\n\nset bh=E:\\workplace\\source\\package\\package_directory_web_bh\\guaranteeLetter-web\\\nset package_path=E:\\workplace\\source\\package\\package_bat\\web\\\nset zipPath=\"C:\\Program Files\\WinRAR\\WinRAR.exe\"\n\necho \"-------------------git up to date-------------------\"\ncd /d %bh%\ncall git checkout develop_20200623\ncall git pull\necho \"git success\"\necho \"-------------------npm install-------------------\"\ncall npm install\necho \"npm install success!\"\n\n\necho \"-------------------npm run build-------------------\"\ncall npm run build:prod\necho \"npm run build success!\"\n\necho \"-------------------web copy start\"-------------------\"\ncall xcopy /s /y \"%bh%dist\\*.*\" \"%package_path%\"\necho \"web copy finished\"\n\necho \"-------------------zip start\"-------------------\"\ncd %package_path%\n%zipPath% -x\"*.zip\" a -r  \"dist-%YMD% %HMS%-bh-web.zip\" -df\necho \"zip finished\"\n\npause\necho \"success\"\n\r\n```\n\n>由于后端搬到git管理了,每个子module是单独的仓库地址，修改打包相关的批处理bat\n\r\n```\n@echo off\n\nset bh=E:\\workplace\\source\\package\\package_directory_java_bh_svn\\\nset jar_path=E:\\workplace\\source\\package\\package_bat\\jar\\\n\nset YMD=%date:~,10%\nset YMD=%YMD:/=-%\nset HMS=%time:~,8%\nset HMS=%HMS: =0%\nset HMS=%HMS::=.%\nset directory=\"git_bh_java_directory_%YMD%-%HMS%\"\n\n\necho \"---------------git up dating---------------\"\nset bh=\"E:\\workplace\\source\\package\\package_directory_java_bh_git\\\"\n\necho \">>>>>>>>>guarbasicinfo updating<<<<<<<<<\"\ncd /d %bh%\\base.biz.svc.guarbasicinfo\ncall git checkout develop_20200826\ncall git pull -f\necho \"guarbasicinfo up to update\"\n\necho \">>>>>>>>>guarlettermgr updating<<<<<<<<<\"\ncd /d %bh%\\base.biz.svc.guarlettermgr\ncall git checkout develop_20200826\ncall git pull -f\necho \"guarlettermgr up to update\"\n\necho \">>>>>>>>>guarprocessmgr updating<<<<<<<<<\"\ncd /d %bh%\\base.biz.svc.guarprocessmgr\ncall git checkout develop_20200826\ncall git pull -f\necho \"guarprocessmgr up to update\"\n\necho \"git up to date success\"\n\necho \"-------------------guarbasicinfo install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarbasicinfo\"\ncall mvn clean install \necho \"guarbasicinfo success!\"\n\necho \"-------------------guarlettermgr install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarlettermgr\"\ncall mvn clean install \necho \"guarlettermgr success!\"\n\necho \"-------------------guarprocessmgr install -------------------\"\ncd /d \"%bh%\\base.biz.svc.guarprocessmgr\"\ncall mvn clean install \necho \"guarprocessmgr success!\"\n\necho \"-------------------createDirectory start-------------------\"\ncall md %jar_path%%directory% \necho \"createDirectory finished\"\n\necho \"-------------------guarbasicinfo.jar copy start-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarbasicinfo\\target\\base.biz.svc.guarbasicinfo-0.0.1-release.jar\" %jar_path%%directory%\"\\base.biz.svc.guarbasicinfo-%YMD% %HMS%.jar\"\necho \"guarbasicinfo.jar copy finished\"\n\necho \"-------------------guarlettermgr.jar copy start\"-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarlettermgr\\target\\base.biz.svc.guarlettermgr-0.0.30.8-release.jar\" \"%jar_path%%directory%\\base.biz.svc.guarlettermgr-%YMD% %HMS%.jar\"\necho \"guarlettermgr.jar copy finished\"\n\necho \"-------------------guarprocessmgr.jar copy start\"-------------------\"\ncall copy /y \"%bh%\\base.biz.svc.guarprocessmgr\\target\\base.biz.svc.guarprocessmgr-0.0.1-release.jar\" \"%jar_path%%directory%\\base.biz.svc.guarprocessmgr-%YMD% %HMS%.jar\"\necho \"guarprocessmgr.jar copy finished\"\n\npause\necho \"success\"\n\r\n```\n\n##  bat杀指定端口进程\n\r\n```\n@echo off\nsetlocal enabledelayedexpansion\nset /p port=pls input port need to kill=\nfor /f \"tokens=1-5\" %%a in (\'netstat -ano ^| find \":%port%\"\') do (\n    if \"%%e%\" == \"0\" (\n        set pid=%%d\n		echo no task has used port 【%port%】\n    ) else (\n        set pid=%%e\n		echo find %port% in pid =!pid!\n		taskkill /f /pid !pid!\n		pause\n    )\n)\n\n\n\n\r\n```\n', '2020-08-31 00:00:00', 'zjh', NULL, '打包实战\n-', 0, '0');
INSERT INTO `exception` VALUES (99069, 'SSM整合springfox-Swagger', '## 注意事项\n如果ssm项目中使用的fastJson包进行@ResponseBody包的导入，那么', '## 注意事项\n如果ssm项目中使用的fastJson包进行@ResponseBody包的导入，那么，一定记得把前端项目中的所有的JSON.parse给放开，因为Jackson会自动把返回格式给你解析出来，再加一次会报语法错误\n## 实现\npom.xml\n\r\n```\n<dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.11.0</version>\n        </dependency>\n\r\n```\nSwagger2Config.java\n\r\n```\npackage xyz.zjhwork.springApplicationStarter.mvcConf;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\n\n@Configuration\npublic class Swagger2Config {\n    @Bean\n    public Docket createRestApi() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"xyz.zjhwork.controller\"))\n                .paths(PathSelectors.any())\n                .build();\n    }\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"Chester Blog swagger\")\n                .description(\"everything will be better!\")\n                .termsOfServiceUrl(\"http://zjhxyy.cn\")\n                .version(\"2.0\")\n                .build();\n    }\n}\n\n\r\n```\n使用\n\r\n```\n@Api(tags = \"Approve Service Interfaces\")\n@ApiOperation(value = \"查询是否点赞接口\", notes = \"查询当前文章是否被当前用户赞过，权限控制\")\n\r\n```', '2020-09-01 00:00:00', 'zjh', NULL, '学习记录\n-', 2, '0');
INSERT INTO `exception` VALUES (99070, 'CentOS7安装mysql8.0.12', '# 一、配置yum源\n## 1.下载mysql源安装包\n本次下载目录为：/home/目录，因此进入：', '# 一、配置yum源\n## 1.下载mysql源安装包\n本次下载目录为：/home/目录，因此进入：cd /home\n\n执行下载命令：\n\r\n```\nwget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\n\r\n```\n## 2.安装mysql源\n下载完成后使用下面命令安装源：\n\r\n```\nyum localinstall mysql80-community-release-el7-1.noarch.rpm\n\r\n```\n## 3.检查是否安装成功\n\r\n```\nyum repolist enabled | grep \"mysql.*-community.*\"\n\r\n```\n## 4.修改安装版本（非必须）\n如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。\n\n例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：\n\n![换版本](https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n# 二、安装mysql\n直接使用命令：yum install mysql-community-server即可。\n\r\n```\nyum install mysql-community-server\n# 三、启动mysql服务\n\r\n```\n## 1.启动\n\r\n```\nsystemctl start mysqld\n# 或者\nservice mysqld start\n\r\n```\n## 2.查看启动状态\n\r\n```\nsystemctl status mysqld\n# 或者\nservice mysqld status\n\r\n```\n![启动状态](https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 3.设置开机启动\n\r\n```\nsystemctl enable mysqld\nsystemctl daemon-reload\n\r\n```\n# 四、配置及部分命令\n## 1.修改登录密码\nmysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：\n\r\n```\ngrep \'temporary password\' /var/log/mysqld.log\n\r\n```\n然后修改密码：\n\r\n```\nALTER USER \'root\'@\'localhost\' IDENTIFIED BY \'TestBicon@123\';\n# 或者\nset password for \'root\'@\'localhost\'=password(\'TestBicon@123\');\n\r\n```\n### 修改密码策略\n\r\n```\n# 查看密码策略\nshow variables like \'%validate_password.policy%\';\nshow variables like \'%validate_password.length%\';\n# 修改密码策略\nset global validate_password.policy=0;  # 设置为弱口令\nset global validate_password.length=1;  # 密码最小长度为1\n\r\n```\n## 2.添加远程登录用户\n\r\n```\nGRANT ALL ON *.* TO \'root\'@\'%\';\n\n# 如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT\nupdate user set host=\'%\' where user =\'root\';\n\n# 刷新权限\nflush privileges;\n\r\n```\n3.sqlyog/navicate链接时出现2058异常\n\r\n```\nALTER USER \'root\'@\'localhost\' IDENTIFIED WITH mysql_native_password BY \'password\';\n# 如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for \'root\'@\'localhost\'则使用下面命令：\nALTER USER \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'password\';\n\r\n```\n# 五、彻底卸载mysql\n## 1.卸载软件\n\r\n```\nyum remove mysql-community-server\n\r\n```\n### 完成后使用rpm -qa|grep mysql命令查看，如果有查询结果，则使用yum remove 名称清理掉。如图：\n![](https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n### 再使用命令rpm -qa | grep -i mysql查看，如果有结果使用rpm -e 名称卸载。例如：\n![](https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n## 2.删除文件\n\r\n```\nrm -rf /var/lib/mysql\nrm /etc/my.cnf\nrm -rf /usr/share/mysql-8.0\n\r\n```\n### 如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：\n\r\n```\nchmod -R 777 /var/lib/mysql\n\r\n```', '2020-09-03 00:00:00', 'zjh', NULL, '学习记录\n-', 1, '0');
INSERT INTO `exception` VALUES (99071, 'Druid数据连接池', '## 导入\nPom.xml\n\r\n```\n <!-- https://mvnrepository.co', '## 导入\nPom.xml\n\r\n```\n <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid</artifactId>\n            <version>1.1.12</version>\n        </dependency>\n\r\n```\n## 使用\n@EnableWebMvc\n\r\n```\n  DruidDataSource dataSource = new DruidDataSource();\n        try {\n            dataSource.setDriverClassName(pop.getProperty(\"jdbc.driver\"));\n            dataSource.setUsername(pop.getProperty(\"jdbc.username\"));\n            dataSource.setPassword(pop.getProperty(\"jdbc.password\"));\n            dataSource.setUrl(pop.getProperty(\"jdbc.url\"));\n            dataSource.setDefaultAutoCommit(true);\n            dataSource.setMinIdle(0);\n            dataSource.setMaxActive(10);\n            dataSource.setName(\"hikariDataSource in Hikari System\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return dataSource;\n\r\n```', '2020-09-03 00:00:00', 'zjh', NULL, '学习记录\n--', 1, '0');
INSERT INTO `exception` VALUES (99072, 'hikari连接池参数详情', '## 选型\n为什么选这个版本呢，因为公司目前用的这个加载挺快的，使用3.x版本的\n>hikariDa', '## 选型\n为什么选这个版本呢，因为公司目前用的这个加载挺快的，使用3.x版本的\n>hikariDataSource in Hikari System - Starting...  \n>>这个命令跑的太久了，高达十多秒\n>>>好的我错怪连接池了，是mysql自己的锅，详情查看<a href=\"http://blog.zjhwork.xyz/markdownDetail.html?id=98875\">http://blog.zjhwork.xyz/markdownDetail.html?id=98875</a>\n\r\n```\n <dependency>\n            <groupId>com.zaxxer</groupId>\n            <artifactId>HikariCP</artifactId>\n            <version>2.7.9</version>\n        </dependency>\n\r\n```\n## 配置\n\n\r\n```\n<!-- Hikari Datasource -->\n    <bean id=\"dataSourceHikari\" class=\"com.zaxxer.hikari.HikariDataSource\"\n        destroy-method=\"shutdown\">\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\" />\n        <property name=\"jdbcUrl\" value=\"${jdbc.url}\" />\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <!-- 连接只读数据库时配置为true， 保证安全 -->\n        <property name=\"readOnly\" value=\"false\" />\n        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->\n        <property name=\"connectionTimeout\" value=\"30000\" />\n        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->\n        <property name=\"idleTimeout\" value=\"600000\" />\n        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL \n            wait_timeout参数（show variables like \'%timeout%\';） -->\n        <property name=\"maxLifetime\" value=\"1800000\" />\n        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->\n        <property name=\"maximumPoolSize\" value=\"60\" />\n        <property name=\"minimumIdle\" value=\"10\" />\n    </bean>\n\r\n```\n\n\nname	|描述	|构造器默认值	|默认配置validate之后的值	|validate重置\n--|:--:|:--:|:--:|:--:\nautoCommit|	自动提交从池中返回的连接	|true	|true	|-\nconnectionTimeout|	等待来自池的连接的最大毫秒数	|SECONDS.toMillis(30) = 30000|	30000|	如果小于250毫秒，则被重置回30秒\nidleTimeout	|连接允许在池中闲置的最长时间	|MINUTES.toMillis(10) = 600000|	600000|	如果idleTimeout+1秒>maxLifetime 且 maxLifetime>0，则会被重置为0（代表永远不会退出）；如果idleTimeout!=0且小于10秒，则会被重置为10秒\nmaxLifetime|	池中连接最长生命周期	|MINUTES.toMillis(30) = 1800000	|1800000	|如果不等于0且小于30秒则会被重置回30分钟\nconnectionTestQuery|	如果您的驱动程序支持JDBC4，我们强烈建议您不要设置此属性	|null	|null|	-\nminimumIdle|	池中维护的最小空闲连接数	|-1	|10	|minIdle<0或者minIdle>maxPoolSize,则被重置为maxPoolSize\nmaximumPoolSize|	池中最大连接数，包括闲置和使用中的连接|	-1|	10	|如果maxPoolSize小于1，则会被重置。当minIdle<=0被重置为DEFAULT_POOL_SIZE则为10;如果minIdle>0则重置为minIdle的值\nmetricRegistry	|该属性允许您指定一个 Codahale / Dropwizard MetricRegistry 的实例，供池使用以记录各种指标	|null|	null|	-\nhealthCheckRegistry|	该属性允许您指定池使用的Codahale / Dropwizard HealthCheckRegistry的实例来报告当前健康信息|	null	|null	|-\npoolName	|连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置|	null	|HikariPool-1	|-\ninitializationFailTimeout|	如果池无法成功初始化连接，则此属性控制池是否将 fail fast|	1	|1	|-\nisolateInternalQueries	|是否在其自己的事务中隔离内部池查询，例如连接活动测试	|false	|false|	-\nallowPoolSuspension|	控制池是否可以通过JMX暂停和恢复	|false	|false	|-\nreadOnly	|从池中获取的连接是否默认处于只读模式	|false|	false|	-\nregisterMbeans	|是否注册JMX管理Bean（MBeans）|	false|	false	|-\ncatalog	|为支持 catalog 概念的数据库设置默认 catalog	|driver default	|null|	-\nconnectionInitSql	|该属性设置一个SQL语句，在将每个新连接创建后，将其添加到池中之前执行该语句。|	null	|null	|-\ndriverClassName	|HikariCP将尝试通过仅基于jdbcUrl的DriverManager解析驱动程序，但对于一些较旧的驱动程序，还必须指定driverClassName|	null|	null|	-\ntransactionIsolation	|控制从池返回的连接的默认事务隔离级别	|null|	null	|-\nvalidationTimeout	|连接将被测试活动的最大时间量	|SECONDS.toMillis(5) = 5000	|5000	|如果小于250毫秒，则会被重置回5秒\nleakDetectionThreshold	|记录消息之前连接可能离开池的时间量，表示可能的连接泄漏|	0	|0	|如果大于0且不是单元测试，则进一步判断：(leakDetectionThreshold < SECONDS.toMillis(2) or (leakDetectionThreshold > maxLifetime && maxLifetime > 0)，会被重置为0 . 即如果要生效则必须>0，而且不能小于2秒，而且当maxLifetime > 0时不能大于maxLifetime\ndataSource	|这个属性允许你直接设置数据源的实例被池包装，而不是让HikariCP通过反射来构造它|	null|	null	|-\nschema	|该属性为支持模式概念的数据库设置默认模式	|driver default	|null|	-\nthreadFactory	|此属性允许您设置将用于创建池使用的所有线程的java.util.concurrent.ThreadFactory的实例。|	null	|null|	-\nscheduledExecutor	|此属性允许您设置将用于各种内部计划任务的java.util.concurrent.ScheduledExecutorService实例	|null	|null	|-', '2020-09-03 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99073, 'mysql连接延迟的问题', '##                            解决方案\n需要把mysql配置文件内的m', '##                            解决方案\n需要把mysql配置文件内的mysqld项下面加上关闭DNS解析的配置，否则会初始化很近\n##                            实现\n用select  @@datadir找到配置文件的路径\n\r\n```\nselect @@datadir\n\r\n```\nmysql.ini或者其他\n\r\n```\n#                            For advice on how to change settings please see\n#                            http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html\n#                            *** DO NOT EDIT THIS FILE. It\'s a template which will be copied to the\n#                            *** default location during install, and will be replaced if you\n#                            *** upgrade to a newer version of MySQL.\n \n[mysqld]\ncharacter-set-server = utf8\nbasedir = /usr/apps/mysql\ndatadir = /usr/apps/mysql/data\nport = 3306\nsocket = /usr/apps/mysql/tmp/mysql.sock\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\nskip-name-resolve\n \n [client]\ndefault-character-set=utf8\nsocket=/usr/apps/mysql/tmp/mysql.sock\n \n[mysql]\ndefault-character-set=utf8\nsocket=/usr/apps/mysql/tmp/mysql.sock\n#                            Remove leading #                            and set to the amount of RAM for the most important data\n#                            cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.\n#                            innodb_buffer_pool_size = 128M\n \n#                            Remove leading #                            to turn on a very important data integrity option: logging\n#                            changes to the binary log between backups.\n#                            log_bin\n \n#                            These are commonly set, remove the #                            and set as required.\n#                            basedir = .....\n#                            datadir = .....\n#                            port = .....\n#                            server_id = .....\n#                            socket = .....\n \n#                            Remove leading #                            to set options mainly useful for reporting servers.\n#                            The server defaults are faster for transactions and fast SELECTs.\n#                            Adjust sizes as needed, experiment to find the optimal values.\n#                            join_buffer_size = 128M\n#                            sort_buffer_size = 2M\n#                            read_rnd_buffer_size = 2M\n\r\n```', '2020-09-03 00:00:00', 'zjh', NULL, '学习记录\n-', 3, '0');
INSERT INTO `exception` VALUES (99074, 'I O示例，文件输入输出', '##    I/O输出示例\n\r\n```\n File file = new File(\"E:\\\\wor', '##    I/O输出示例\n\r\n```\n File file = new File(\"E:\\\\workplace\\\\my_notes\\\\work_log\\\\\"+fileName);\n        OutputStreamWriter os=null;\n        if (!file.exists()) {\n            try {\n                file.createNewFile();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        try {\n            os = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8);\n            os.write(\"#    \"+thisYear+\"_\"+fileName+\"工作日志   \\r\\n\\r\\n##    任务\\r\\n\\r\\n\\r\\n\\r\\n##    详细\");\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            try {\n                if(os!=null)\n                    os.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\r\n```', '2020-09-04 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99075, 'spring读取yml文件,动态配置原理', '## 用spring读取yml配置文件\n>pom.xml\n\r\n```\n <dependency>\n ', '## 用spring读取yml配置文件\n>pom.xml\n\r\n```\n <dependency>\n            <groupId>org.yaml</groupId>\n            <artifactId>snakeyaml</artifactId>\n            <version>1.25</version>\n        </dependency>\n\n\r\n```\n>读取\n\r\n```\n   YamlPropertiesFactoryBean yamlPropertiesFactoryBean = new YamlPropertiesFactoryBean();\n   yamlPropertiesFactoryBean.setResources(new ClassPathResource(\"application.yml\"));\n   Properties properties = yamlPropertiesFactoryBean.getObject();\n   properties.get(\"tomcat.context-path\")\n\r\n```\n## 巧妙利用yml实现动态配置原理\n>xxx.yml\n\r\n```\ntomcat:\n  current-system: linux\nconfig:\n  windows:\n    context-path: /\n    doc-base: C://test/\n    port: 9001\n  linux:\n    context-path: /\n    doc-base: /usr/local/project/tomcatDoc\n    port: 80\n\r\n```\n>使用\ntomcatStarter.java\n\r\n```\nimport lombok.Builder;\nimport org.apache.catalina.LifecycleException;\nimport org.apache.catalina.startup.Tomcat;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\nimport org.springframework.core.io.ClassPathResource;\n\nimport java.io.IOException;\nimport java.util.Properties;\n@Builder\npublic class BootStarter {\n    private static YamlPropertiesFactoryBean yamlPropertiesFactoryBean ;\n    private static Properties properties;\n    private static String currentSystem;\n    static{\n        yamlPropertiesFactoryBean = new YamlPropertiesFactoryBean();\n        yamlPropertiesFactoryBean.setResources(new ClassPathResource(\"application.yml\"));\n        properties = yamlPropertiesFactoryBean.getObject();\n        currentSystem = properties.getProperty(\"tomcat.current-system\");\n    }\n    public  void run(){\n        Tomcat tomcat = new Tomcat();\n        tomcat.setPort(Integer.parseInt(properties.getProperty(\"config.\"+currentSystem+\".port\")));\n        // 标识tomcat启动为webapp\n        tomcat.addWebapp(properties.get(\"config.\"+currentSystem+\".context-path\").toString(),properties.get(\"config.\"+currentSystem+\".doc-base\").toString());\n        try {\n//            tomcat启动\n            tomcat.start();\n//            tomcat监听用户接入\n            tomcat.getServer().await();\n        } catch (LifecycleException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        BootStarter.builder().build().run();\n    }\n}\n\n\r\n```', '2020-09-04 00:00:00', 'zjh', NULL, '学习记录\n-', 0, '0');
INSERT INTO `exception` VALUES (99076, 'java实现压缩文件并下载（删除原文件），java实用工具类', '## 压缩下载工具类\n```\nimport javax.servlet.http.HttpServl', '## 压缩下载工具类\n```\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/**\n * Describe:\n * Author:zjhChester\n * Date:\n */\npublic class ZipUtils {\n\n    /**\n     * 把文件打成压缩包并输出到客户端浏览器中\n     */\n    public static void downloadZipFiles(HttpServletResponse response, List<String> srcFiles, String zipFileName) {\n        try {\n            response.reset(); // 重点突出\n            response.setCharacterEncoding(\"UTF-8\"); // 重点突出\n            response.setContentType(\"application/x-msdownload\"); // 不同类型的文件对应不同的MIME类型 // 重点突出\n            // 对文件名进行编码处理中文问题\n            zipFileName = new String(zipFileName.getBytes(), StandardCharsets.UTF_8);\n            // inline在浏览器中直接显示，不提示用户下载\n            // attachment弹出对话框，提示用户进行下载保存本地\n            // 默认为inline方式\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + zipFileName);\n\n            // --设置成这样可以不用保存在本地，再输出， 通过response流输出,直接输出到客户端浏览器中。\n            ZipOutputStream zos = new ZipOutputStream(response.getOutputStream());\n            zipFile(srcFiles, zos);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 压缩文件\n     *\n     * @param filePaths 需要压缩的文件路径集合\n     * @throws IOException\n     */\n    private static void zipFile(List<String> filePaths, ZipOutputStream zos) {\n        //设置读取数据缓存大小\n        byte[] buffer = new byte[4096];\n        try {\n            //循环读取文件路径集合，获取每一个文件的路径\n            for (String filePath : filePaths) {\n                File inputFile = new File(filePath);\n                //判断文件是否存在\n                if (inputFile.exists()) {\n                    //判断是否属于文件，还是文件夹\n                    if (inputFile.isFile()) {\n                        //创建输入流读取文件\n                        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inputFile));\n                        //将文件写入zip内，即将文件进行打包\n                        zos.putNextEntry(new ZipEntry(inputFile.getName()));\n                        //写入文件的方法，同上\n                        int size = 0;\n                        //设置读取数据缓存大小\n                        while ((size = bis.read(buffer)) > 0) {\n                            zos.write(buffer, 0, size);\n                        }\n                        //关闭输入输出流\n                        zos.closeEntry();\n                        bis.close();\n                    } else {  //如果是文件夹，则使用穷举的方法获取文件，写入zip\n                        File[] files = inputFile.listFiles();\n                        List<String> filePathsTem = new ArrayList();\n                        for (File fileTem : files) {\n                            filePathsTem.add(fileTem.toString());\n                        }\n                        zipFile(filePathsTem, zos);\n                    }\n                }\n                //删除已打包的文件\n                inputFile.delete();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != zos) {\n                try {\n                    zos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n\n}\n\n```', '2020-09-07 00:00:00', 'zjh', NULL, '开发整理\n-', 2, '0');
INSERT INTO `exception` VALUES (99077, 'JDK1.8新知识', '## 集合流的使用\nInteger数组转String集合\n\n```\nArrays.stream(id', '## 集合流的使用\n### Integer数组转String集合\n\n```\nArrays.stream(ids).map(Object::toString).collect(Collectors.toList())\n# 或者是\nArrays.stream(ids).map(integer -> integer.toString()).collect(Collectors.toList());\n\n```\n### 集合转指定类型数组\n```\nList<Integer> list = new ArrayList<>();\nInteger[] integers = list.toArray(new Integer[0]);\n```\n### String的join操作\n```\n//id是Integet[]\n List<String> collect = Arrays.stream(id).map(Object::toString).collect(Collectors.toList());\n        String join = String.join(\",\",collect);\n```\n### 流操作，把对象的某个属性组成数组\n```\n String[] ids = notificationDaoPage.stream().map(Notification::getExceptionId).toArray(String[]::new);\n```\n', '2020-09-07 00:00:00', 'zjh', NULL, '学习记录\n-', 4, '0');
INSERT INTO `exception` VALUES (99078, '多线程实战，高速公路收费窗口模拟', '## 题目\n\n>高速公路入口有5个收费口, 3个ETC口, 1个人工口(Manual), 1个ETC', '## 题目\n\n>高速公路入口有5个收费口, 3个ETC口, 1个人工口(Manual), 1个ETC/人工混合口(Mix).\nETC车辆在收费口的通过时间是10-20分钟(程序内模拟时间), 人工车辆在收费口的通过时间是15-25分钟(程序内模拟时间).\n前面车辆未放行时, 后面车辆会依次在收费口外排队.\n每一个新到收费站的车辆, 都会选择到时间最短的队伍后面进行排队.\n\n>>要求写出模拟程序, 模拟60分钟(程序内模拟时间)内, 30辆ETC车和10辆人工车到达和通过收费口的场景, 模拟程序运行时长在15~40秒(真实时间)左右, 并达到如下效果:\n\n>>>0) 60分钟(程序内模拟时间)内, 40辆车, 到达时间完全随机, 且每1分钟至多只有1辆车到达. 比如整个程序模拟车辆到达时间范围是[0, 60], 对于任意一个程序模拟时间n, 0 <= n < 60, 在[n, n+1)这个区间范围内, 只能有一辆车到达.\n\n>>>1) 车辆通过收费口的时间在各个类型(ETC或人工)的时间范围内完全随机.\n\n## 实现\n\r\n```\nimport java.util.Collections;\nimport java.util.Random;\nimport java.util.Vector;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n\npublic class Exam implements Runnable{\n\n    //初始化属性列表\n\n    //车辆窗口办理数量集合，用于判断新到车辆选择的最短时间的办理通道\n    private static CopyOnWriteArrayList<Integer> queue = new CopyOnWriteArrayList<>();\n    //etc办理车辆的总数\n    private static AtomicInteger etcCarCount = new AtomicInteger(30);\n    //manual办理车辆的总数\n    private static AtomicInteger manualCarCount = new AtomicInteger(10);\n    //办理通过的车辆总数\n    private static AtomicInteger passCarCount = new AtomicInteger(0);\n\n    //线程内成员变量\n    //到达车辆类型，用于判断窗口办理的时间\n    private String carType;\n    //收费窗口的下标，用于日志记录\n    private AtomicInteger chargeWindow;\n\n    //构造函数，初始化每个线程开启时，车辆类型和办理窗口\n    public Exam(String carType, AtomicInteger chargeWindow){\n        this.carType = carType;\n        this.chargeWindow = chargeWindow;\n\n        //自增通过车辆总数\n        passCarCount.incrementAndGet();\n    }\n\n    @Override\n    public void run() {\n        //当前车辆序号，用于存储当前次线程办理的车辆序号\n        int currNumber = passCarCount.get();\n        //日志记录\n        System.out.println(String.format(\"当前是第【%s】辆车，车辆类型为【%s】，当前到达【%s】收费窗口，当前收费窗口排队数量【%s】\", currNumber, carType, chargeWindow.get()+1,queue.get(chargeWindow.get())));\n        //定义随机对象\n        Random random = new Random();\n        //如果车辆类型为manual\n        if(\"manual\".equals(carType)){\n            //人工车辆数量-1\n                manualCarCount.decrementAndGet();\n            //计算办理处理时间\n            int time = random.nextInt(2500)%(1000+1)+1500;\n            try {\n                //模拟正在办理人工车辆通行\n                Thread.sleep(time);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            //窗口等待数量更新\n            queue.set(chargeWindow.get(),queue.get(chargeWindow.get())-1);\n            //日志记录办理时间\n            System.out.println(String.format(\"- - - - 办理时间为【%s】- - - - \",time));\n        }else{\n            //如果车辆类型为etc\n            //etc车辆数量-1\n                etcCarCount.decrementAndGet();\n                //计算办理处理时间\n                int time = random.nextInt(2000)%(1000+1)+1000;\n                try {\n                    //模拟正在办理etc车辆通行\n                    Thread.sleep(time);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                //窗口等待数量更新\n                queue.set(chargeWindow.get(),queue.get(chargeWindow.get())-1);\n                //日志记录办理时间\n                System.out.println(String.format(\"- - - - 办理时间为【%s】- - - - \",time));\n        }\n        //通过车辆的日志记录\n        System.out.println(String.format(\">>>>>第【%s】车辆通过，车辆类型为【%s】<<<<<\",currNumber,carType));\n    }\n\n    public static void main(String[] args) {\n        //赋值初始值 5个通道的实时车辆数\n        for (int i = 0; i < 5; i++) {\n            queue.add(0);\n        }\n        //定义随机变量\n        Random random = new Random();\n\n        for (int j = 0; j < 50; j++) {\n            //找到当前排队数量最少的窗口，规定，index为0,1,2为ETC专用窗口口，index为3的为mix窗口，index为4为人工窗口\n            //创建临时集合用于存放当前窗口的办理时间\n            Vector<Integer> tempList = new Vector<>();\n            for (int i = 0; i < queue.size(); i++) {\n                if(i<3){\n                    //etc办理时间\n                    tempList.add(queue.get(i)*1000);\n                }else{\n                    //人工办理时间\n                    tempList.add(queue.get(i)*1500);\n                }\n            }\n            //定义时间最短的窗口下标\n            int index=0;\n            //找到临时集合里面的最小值\n            int minTime =  Collections.min(tempList);\n            //寻找时间最短的下标并赋值给index\n            for (int i = 0; i <tempList.size() ; i++) {\n                if(minTime==tempList.get(i)){\n                    index=i;\n                    break;\n                }\n            }\n            //日志记录\n            System.out.println(String.format(\"当前时间最短的窗口为【%s】号窗口\",index+1));\n            //增加指定下标窗口处理的数量\n            queue.set(index,queue.get(index)+1);\n\n            //随机选择1s来的车辆类型，规定随机值为 1,2,3 的为etc车辆，随机值为 4 的为人工车辆\n            int nextCarIndex = random.nextInt(4)%(3+1)+1;\n            //nextCarIndex =1/2/3 并且剩余ETC车辆的数量大于0\n            if(nextCarIndex<=3&&etcCarCount.get()>0){\n                //etc车辆数量不为0\n                etcService(random,index);\n            }else if(manualCarCount.get()>0&&nextCarIndex==4){\n                //人工车辆数量不为0\n              manualService(random,index);\n            }else{\n                if(etcCarCount.get()>0){\n                    //etc车辆数量不为0\n                    etcService(random,index);\n                }else if(manualCarCount.get()>0){\n                    //人工车辆数量不为0\n                    manualService(random,index);\n                }\n                else{\n                    //全部车辆通过完毕\n                    System.out.println(String.format(\"当前执行次数【%s】,当前nextCarIndex【%s】,【ETC】数量【%s】,【人工】数量【%s】\",j,nextCarIndex,etcCarCount,manualCarCount));\n                    break;\n                }\n            }\n\n            //一秒内最多来一辆车，随机模拟大于等于1s来一辆车\n            try {\n                Thread.sleep(new Random().nextInt(5000)%(4000+1)+1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        }\n        //日志记录\n        System.out.println(String.format(\"车辆已到达完毕，【ETC】剩余数量【%s】，【人工】剩余数量【%s】\",etcCarCount.get(),manualCarCount.get()));\n\n\n\n    }\n    //etc车辆办理业务\n    private static void etcService(Random random,Integer index){\n        //日志记录\n        System.out.println(\"******** 来了一辆【ETC】车辆 ********\");\n        //起线程跑\n        Thread thread1 = new Thread(new Exam(\"etc\",new AtomicInteger(index)));\n        //线程开始\n        thread1.start();\n\n\n    }\n    //人工车辆办理业务\n    private static void manualService(Random random,Integer index){\n        //日志记录\n        System.out.println(\"******** 来了一辆【人工】车辆 ********\");\n        //起线程跑\n        Thread thread1 = new Thread(new Exam(\"manual\",new AtomicInteger(index)));\n        //线程开始\n        thread1.start();\n    }\n}\n\n\n\r\n```\n## 执行结果\n>### 这是主线程（车辆到来的空隙时间）>=1000ms的执行日志\n\r\n```\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【1】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1075】- - - - \n>>>>>第【1】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【2】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【2025】- - - - \n>>>>>第【2】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【3】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1894】- - - - \n>>>>>第【3】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【4】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1475】- - - - \n>>>>>第【4】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【5】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1854】- - - - \n>>>>>第【5】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【6】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1465】- - - - \n>>>>>第【6】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【7】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1372】- - - - \n>>>>>第【7】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【8】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1646】- - - - \n>>>>>第【8】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【9】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1681】- - - - \n>>>>>第【9】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【10】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【11】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1962】- - - - \n>>>>>第【10】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1821】- - - - \n>>>>>第【11】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【12】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1270】- - - - \n>>>>>第【12】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【13】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【14】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1742】- - - - \n>>>>>第【13】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1078】- - - - \n>>>>>第【14】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【15】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1515】- - - - \n>>>>>第【15】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【16】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1654】- - - - \n>>>>>第【16】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【17】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【2284】- - - - \n>>>>>第【17】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【18】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1627】- - - - \n>>>>>第【18】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【19】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【20】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1917】- - - - \n>>>>>第【19】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1508】- - - - \n>>>>>第【20】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【21】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1643】- - - - \n>>>>>第【21】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【22】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1853】- - - - \n>>>>>第【22】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【23】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【24】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1233】- - - - \n>>>>>第【23】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1052】- - - - \n>>>>>第【24】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【25】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1989】- - - - \n>>>>>第【25】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【26】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1904】- - - - \n>>>>>第【26】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【27】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1150】- - - - \n>>>>>第【27】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【28】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1958】- - - - \n>>>>>第【28】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【29】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1065】- - - - \n>>>>>第【29】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【30】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1289】- - - - \n>>>>>第【30】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【31】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1439】- - - - \n>>>>>第【31】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【32】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【2206】- - - - \n>>>>>第【32】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【33】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【34】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1874】- - - - \n>>>>>第【33】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【35】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【2311】- - - - \n>>>>>第【34】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1501】- - - - \n>>>>>第【35】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【36】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1975】- - - - \n>>>>>第【36】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【37】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1315】- - - - \n>>>>>第【37】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【38】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1988】- - - - \n>>>>>第【38】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【39】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n- - - - 办理时间为【1887】- - - - \n>>>>>第【39】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【40】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n当前执行次数【40】,当前nextCarIndex【3】,【ETC】数量【0】,【人工】数量【0】\n车辆已到达完毕，【ETC】剩余数量【0】，【人工】剩余数量【0】\n- - - - 办理时间为【2025】- - - - \n>>>>>第【40】车辆通过，车辆类型为【manual】<<<<<\n\n\r\n```\n>这是主线程（车辆到来的空隙时间）为100ms的执行日志\n\r\n```\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【1】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【2】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【3】辆车，车辆类型为【manual】，当前到达【3】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【4】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【5】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【6】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【7】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【8】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【9】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【10】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【11】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【12】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【13】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【14】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1292】- - - - \n>>>>>第【2】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【15】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【16】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【17】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1187】- - - - \n>>>>>第【6】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【18】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1431】- - - - \n>>>>>第【4】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1033】- - - - \n>>>>>第【8】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【19】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【2】\n- - - - 办理时间为【1102】- - - - \n>>>>>第【9】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【20】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【2】\n- - - - 办理时间为【1334】- - - - \n>>>>>第【7】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【21】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【22】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1723】- - - - \n>>>>>第【5】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1997】- - - - \n>>>>>第【3】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【23】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【2】\n- - - - 办理时间为【1151】- - - - \n>>>>>第【12】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【24】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【2412】- - - - \n>>>>>第【1】车辆通过，车辆类型为【manual】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【25】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【26】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【27】辆车，车辆类型为【manual】，当前到达【4】收费窗口，当前收费窗口排队数量【3】\n- - - - 办理时间为【1243】- - - - \n>>>>>第【15】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1171】- - - - \n>>>>>第【16】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1712】- - - - \n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n>>>>>第【11】车辆通过，车辆类型为【etc】<<<<<\n当前是第【28】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【3】\n- - - - 办理时间为【1825】- - - - \n>>>>>第【10】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【29】辆车，车辆类型为【manual】，当前到达【5】收费窗口，当前收费窗口排队数量【2】\n- - - - 办理时间为【1616】- - - - \n>>>>>第【13】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【30】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【31】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1319】- - - - \n>>>>>第【18】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【32】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1877】- - - - \n>>>>>第【14】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1101】- - - - \n>>>>>第【22】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【33】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【34】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1764】- - - - \n>>>>>第【17】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【35】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【3】\n- - - - 办理时间为【1546】- - - - \n>>>>>第【20】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1295】- - - - \n>>>>>第【23】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【36】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【2】\n- - - - 办理时间为【1256】- - - - \n>>>>>第【24】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1777】- - - - \n>>>>>第【19】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【37】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【38】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n- - - - 办理时间为【1806】- - - - \n>>>>>第【21】车辆通过，车辆类型为【etc】<<<<<\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【39】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【40】辆车，车辆类型为【manual】，当前到达【3】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【4】号窗口\n当前执行次数【40】,当前nextCarIndex【2】,【ETC】数量【0】,【人工】数量【0】\n车辆已到达完毕，【ETC】剩余数量【0】，【人工】剩余数量【0】\n- - - - 办理时间为【1542】- - - - \n>>>>>第【27】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1688】- - - - \n>>>>>第【26】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1594】- - - - \n>>>>>第【28】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1737】- - - - \n>>>>>第【30】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1537】- - - - \n>>>>>第【32】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1353】- - - - \n>>>>>第【34】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1258】- - - - \n>>>>>第【36】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【2416】- - - - \n>>>>>第【25】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1813】- - - - \n>>>>>第【31】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1633】- - - - \n>>>>>第【33】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【2211】- - - - \n>>>>>第【29】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1945】- - - - \n>>>>>第【35】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1668】- - - - \n>>>>>第【39】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1965】- - - - \n>>>>>第【37】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1923】- - - - \n>>>>>第【38】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2194】- - - - \n>>>>>第【40】车辆通过，车辆类型为【manual】<<<<<\n\r\n```\n>这是主线程（车辆到来的空隙时间）为1ms的执行日志\n\r\n```\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【1】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【2】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【3】辆车，车辆类型为【manual】，当前到达【3】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【4】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【5】辆车，车辆类型为【manual】，当前到达【5】收费窗口，当前收费窗口排队数量【1】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【6】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【7】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【8】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【9】辆车，车辆类型为【manual】，当前到达【4】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【10】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【2】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【11】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【12】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【13】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【14】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【15】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【16】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【17】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【18】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【3】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【19】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【5】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【20】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【5】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【21】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【5】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【22】辆车，车辆类型为【etc】，当前到达【4】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【23】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【4】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【24】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【6】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【25】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【6】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【26】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【6】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【27】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【7】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【28】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【7】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【29】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【7】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【30】辆车，车辆类型为【manual】，当前到达【4】收费窗口，当前收费窗口排队数量【5】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【31】辆车，车辆类型为【manual】，当前到达【5】收费窗口，当前收费窗口排队数量【5】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【32】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【8】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【33】辆车，车辆类型为【etc】，当前到达【2】收费窗口，当前收费窗口排队数量【8】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【34】辆车，车辆类型为【etc】，当前到达【3】收费窗口，当前收费窗口排队数量【8】\n当前时间最短的窗口为【4】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【35】辆车，车辆类型为【manual】，当前到达【4】收费窗口，当前收费窗口排队数量【6】\n当前时间最短的窗口为【5】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【36】辆车，车辆类型为【etc】，当前到达【5】收费窗口，当前收费窗口排队数量【6】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【ETC】车辆 ********\n当前是第【37】辆车，车辆类型为【etc】，当前到达【1】收费窗口，当前收费窗口排队数量【9】\n当前时间最短的窗口为【2】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【38】辆车，车辆类型为【manual】，当前到达【2】收费窗口，当前收费窗口排队数量【9】\n当前时间最短的窗口为【3】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【39】辆车，车辆类型为【manual】，当前到达【3】收费窗口，当前收费窗口排队数量【9】\n当前时间最短的窗口为【1】号窗口\n******** 来了一辆【人工】车辆 ********\n当前是第【40】辆车，车辆类型为【manual】，当前到达【1】收费窗口，当前收费窗口排队数量【10】\n当前时间最短的窗口为【2】号窗口\n当前执行次数【40】,当前nextCarIndex【3】,【ETC】数量【0】,【人工】数量【0】\n车辆已到达完毕，【ETC】剩余数量【0】，【人工】剩余数量【0】\n- - - - 办理时间为【1040】- - - - \n>>>>>第【1】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1007】- - - - \n>>>>>第【21】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1006】- - - - \n>>>>>第【32】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1045】- - - - \n>>>>>第【19】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1076】- - - - \n>>>>>第【27】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1208】- - - - \n>>>>>第【17】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1270】- - - - \n>>>>>第【23】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1271】- - - - \n>>>>>第【33】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1318】- - - - \n>>>>>第【13】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1437】- - - - \n>>>>>第【4】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1429】- - - - \n>>>>>第【10】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1431】- - - - \n>>>>>第【11】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1439】- - - - \n>>>>>第【7】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1461】- - - - \n>>>>>第【15】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1466】- - - - \n>>>>>第【20】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1448】- - - - \n>>>>>第【34】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1486】- - - - \n>>>>>第【18】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1476】- - - - \n>>>>>第【26】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1494】- - - - \n>>>>>第【25】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1603】- - - - \n>>>>>第【37】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1622】- - - - \n>>>>>第【31】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1745】- - - - \n>>>>>第【6】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1761】- - - - \n>>>>>第【24】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1787】- - - - \n>>>>>第【22】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1859】- - - - \n>>>>>第【8】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1854】- - - - \n>>>>>第【12】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1820】- - - - \n>>>>>第【36】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1854】- - - - \n>>>>>第【38】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1937】- - - - \n>>>>>第【5】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【1936】- - - - \n>>>>>第【14】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1944】- - - - \n>>>>>第【28】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1969】- - - - \n>>>>>第【29】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1997】- - - - \n>>>>>第【16】车辆通过，车辆类型为【etc】<<<<<\n- - - - 办理时间为【1979】- - - - \n>>>>>第【30】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2036】- - - - \n>>>>>第【35】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2135】- - - - \n>>>>>第【2】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2100】- - - - \n>>>>>第【40】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2247】- - - - \n>>>>>第【39】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2384】- - - - \n>>>>>第【3】车辆通过，车辆类型为【manual】<<<<<\n- - - - 办理时间为【2480】- - - - \n>>>>>第【9】车辆通过，车辆类型为【manual】<<<<<\n\r\n```', '2020-09-07 00:00:00', 'zjh', NULL, 'java笔试\n-', 2, '0');
INSERT INTO `exception` VALUES (99079, '时间日期工具类,DateUtils', '## 时间日期工具类（还在更新...）\n```\nimport java.text.ParseExce', '## 时间日期工具类（还在更新...）\n```\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateUtils {\n    public final static String CURRENT_TIME = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());\n    public final static String TODAY = new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n    public static String  getFormat(Date date){\n        String time = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(date);\n        return time;\n    }\n    public static String  formatYearMonthDay(String time){\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        try {\n           time=dateFormat.format( dateFormat.parse(time));\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return time;\n    }\n}\n```', '2020-09-07 00:00:00', 'zjh', NULL, '开发整理\n-', 3, '0');
INSERT INTO `exception` VALUES (99080, '记一次被黑客把数据库黑了的奇妙经历', '论数据库被黑客删除后如何恢复', '# 论，被黑客把数据库删了，而且没留下任何勒索信息改怎么从gitPage的文档里恢复仅有的备份文件\n## 前言\n由于操作失误和不仔细把密码泄露在git的master分支了，导致某个黑客的网络爬虫检测到了，不过我看提交记录，居然28天才扫描到，emmmm，好言归正传不提这个，主要是黑客把我的数据库删的只剩个warning表，   \n\n![mysql1](http://img.zjhwork.xyz/mysql1.png)    \n\n由于mysql会有binlog记录所有的mysql操作，我就去查看了binlog的记录,    \n\n![mysql2](http://img.zjhwork.xyz/mysql2.png)    \n\n![mysql3](http://img.zjhwork.xyz/mysql3.png)      \n\n发现黑客是把我库删了又新建了库，新建了表，直接把磁盘底层数据给覆盖了。\n\n那就没什么办法，本来是前几天把数据同步到103的，结果我给mysql卸载了，头疼，以后一定定时把数据给备份下来。下面是我卑卑微微从前几天的md文档导入到gitPage里拉下来的文件，现在把他反写回去，主表数据有的恢复，附表却没了（历史记录，收藏，评论，点赞信息等等）\n## 数据恢复，从gitPage的md文档恢复\n```\nimport io.swagger.annotations.Api;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport xyz.zjhwork.dao.ExceptionDao;\nimport xyz.zjhwork.entity.Exception;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Describe:\n * Author:zjhChester\n * Date:\n */\n@RestController\n@Api(tags = \"dataBase rebuild \")\npublic class DbRebuild {\n    @Autowired\n    private ExceptionDao exceptionDao;\n\n    @GetMapping(\"/rebuild\")\n    public int reBuild(){\n        List<Exception> list = fileScan();\n        list.forEach(l->exceptionDao.insertException(l));\n\n        return list.size();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new DbRebuild().fileScan().size());\n    }\n    private  List<Exception> fileScan(){\n        String path = \"E:\\\\workplace\\\\my_notes\\\\personal_directory\\\\posts_\";\n        File directory = new File(path);\n        File[] files = directory.listFiles();\n        List<Exception> commentList = new ArrayList<>();\n        String content = \"\";\n        String prefix = \"\";\n        String type=\"\";\n        String title=\"\";\n        String date=\"\";\n        String author=\"\";\n        String desc = \"\";\n        int index=0;\n        for (File f : files) {\n            index++;\n            try {\n               InputStreamReader is = new InputStreamReader(new FileInputStream(f), StandardCharsets.UTF_8);\n//                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));\n                String data ;\n                StringBuilder sb = new StringBuilder();\n//                while((data = br.readLine())!=null)\n//                {\n//                    sb.append(data);\n//                }\n                int count =0;\n                while ((count=is.read())!=-1){\n                    sb.append((char)count);\n                }\n                title = f.getName().substring(11,f.getName().length()-3);\n                date = f.getName().substring(0,10)+\" 00:00:00\";\n                prefix = sb.substring(0,sb.indexOf(\"#\"));\n                type = prefix.substring(prefix.indexOf(\"- \")+2,prefix.length()-3);\n                content= sb.substring(sb.indexOf(\"#\"),sb.length());\n                author = prefix.substring(prefix.indexOf(\"author:\")+\"author:\".length(),prefix.indexOf(\"header-img\")).trim();\n                desc = content.substring(0,50);\n                commentList.add(Exception.builder().title(title).createTime(date).type(type).content(content).author(author).desc(desc).build());\n//                br.close();\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return commentList;\n    }\n}\n\n```', '2020-09-14 15:18:03', 'zjh', '', '学习记录', 15, '0');
INSERT INTO `exception` VALUES (99081, 'js控制滚动条，双窗口滚动条绑定', '滚动条，scroll，js', '## 绑定两个容器窗口的滚动条\n> 适用场景：\n>> 编辑画面的编辑区和预览区，超出一页范围会增加翻页的损耗，所以绑定编辑区和预览区，编辑区滚动引起预览器的滚动，但是不要双向绑定，会引起递归循环的调用\n\n```\n//绑定滚动条\n$(\"#oriContent\").scroll(function () {\n //console.log(\"写入区\",$(\"#oriContent\").scrollTop(),$(\"#oriContent\")[0].scrollHeight,$(\"#oriContent\").scrollTop()/$(\"#oriContent\")[0].scrollHeight*100+\"%\")\n //console.log(\"预览区\",$(\"#result\").scrollTop(),$(\"#result\")[0].scrollHeight,$(\"#result\").scrollTop()/$(\"#result\")[0].scrollHeight*100+\"%\")\ndocument.getElementById(\'result\').scrollTop=($(\"#oriContent\").scrollTop()*$(\"#result\")[0].scrollHeight)/$(\"#oriContent\")[0].scrollHeight;\n                    })\n```\n## 其他示例\n```\n //获取当前滚动条的位置\nvar long1 = $(\"#dd2\").scrollTop();\n//获取滚动条的长度\nvar long2=$(\'#dd2\').height();\n//alert(h);\n//设置滚动条的位置\n// document.getElementById(\'dd2\').scrollTop=100;\n//获取滚动条的高度\n var long3 = $(\"#dd2\")[0].scrollHeight;\ndocument.getElementById(\'dd2\').scrollTop=(long2+long3)*nows-200;\n```', '2020-09-15 14:39:30', 'zjh', '', '学习记录', 21, '0');
INSERT INTO `exception` VALUES (99082, ' axios文件流下载示例', '文件流下载', '## 注意事项\njquery的ajax是不支持blob形式的，所以要么自己封装jq的ajax,要么用原生的xhr发ajax,要么用axios，个人推荐用axios，方便快捷\n## 源码\n```\n axios({\n            url: \"file/fileoutput?ids=\"+id,\n            method: \"GET\",\n            responseType: \'blob\'\n        }).then(response => {\n        var prefix = response.headers[\"content-disposition\"];\n        var fileName = prefix.substr(prefix.indexOf(\"=\")+1,prefix.length-prefix.indexOf(\"=\")+1)\n        var a = document.createElement(\"a\");\n        var blob =new Blob([response.data])\n        a.setAttribute(\"download\",fileName)\n        a.setAttribute(\"href\",window.URL.createObjectURL(blob))\n        a.setAttribute(\"target\",\"_blank\");\n        a.click()\n    })\n    .catch((error) => {\n            alert(\"导出失败,因为：\"+error);\n\n    })\n```', '2020-09-16 11:21:54', 'zjh', '', '学习记录', 14, '0');
INSERT INTO `exception` VALUES (99083, '文章标题xxxxx', '在java开发中的问题集锦', '# 在web项目开发中遇到的问题\n```\njava代码\npublic static void main(){\n\n}\n```', '2020-09-18 20:03:52', 'z1', '', '学习记录', 3, '1');
INSERT INTO `exception` VALUES (99084, 'java（基础函数及基本数据类型）', 'java基础函数与方法、包装类以及实例化', '## java（基础函数及基本数据类型）：\n\n### java基本函数与方法：\n\n#### java重载与重写：\n\n##### 重载：在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。\n\n每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。\n\n最常用的地方就是构造器的重载。\n\n##### 重写：子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。\n\n重载例子：\n\n![1600529493155](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600529493155.png)\n\n重载结果：\n\n![1600529525437](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600529525437.png)\n\n重写例子：\n\n![1600530335823](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600530335823.png)\n\n重写结果：\n![1600530356660](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600530356660.png)\n\n#### 构造函数：\n\n主要为对象成员变量赋初始值。\n\n与new运算符一起使用，不能直接被调用。\n\n特别的一个类可以有多个构造函数 \n\n#### 包装类：\n\nJava中的基本数据类型没有方法和属性，而包装类就是为了让这些拥有方法和属性，实现对象化交互。\n\n数值型包装类都继承至Number，而字符型和布尔型继承至Object。\n\n基本的数据类型：数据型（整数类型（byte、short、int、long）、浮点类型（float、double））、字符类型（char）、布尔型（boolean）\n\nint的基本类型默认值为0 \n\ninteger是int的包装类。\n\n##### 装箱：基本数据类型转换为包装类；\n\n##### 拆箱：包装类转换为基本数据类型。　\n\n通过包装类Integer.toString()将整型转换为字符串；\n\n通过Integer.parseInt()将字符串转换为int类型；\n\n通过valueOf()方法把字符串转换为包装类然后通过自动拆箱。\n\n##### 包装类对象的初始值为null（是一个对象）；\n\n##### 包装类对象之间的比较：\n\n#### 类的实例过程：\n\n类的实例化：实例化在堆内开辟一片空间存储当前类的对象，new一个对象是实例化的一种方式。\n\n##### 实例对象\n\nnew，就是对类的实例化，创建这个类对应的实际对象，类只是对事物的描述，而实例化就相当于为这个描述新开辟了一块内存，可以改变这块区域里的各种属性（成员变量），当然，也可以实例化多块区域，只是不同的对象而已。s\n\n例如\n\n```java\nDate date=new Date();\n```\n\n\n\n##### 反射实现实例对象：\n\n不使用new关键字\n\n使用newInstance()方法来创建对象\n\n1、使用.properties配置文件创建对象\n\n![1600584020938](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600584020938.png)\n\n2、新建一个文件夹rescources，在里面创建文件phone.properties\n\n![1600584077701](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600584077701.png)\n\n3、myphone是后面getString()方法中需要用到的key，后面是test.Phone是类的实际路径\n\n```java\npublic class Test {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException {\n        String name = ResourceBundle.getBundle(\"phone\").getString(\"myphone\");\n        Phone phone = (Phone) Class.forName(name).newInstance();\n        System.out.println(phone);\n\n    }\n\n```\n\n输出结果：\n\n![1600584154071](C:\\Users\\hp\\AppData\\Roaming\\Typora\\typora-user-images\\1600584154071.png)\n\n#### 空指针异常报错：\n\n是空对象调用方法。\n\n如果没有调用是直接打印null。\n\n', '2020-09-21 11:26:57', 'lzx', '', 'java', 6, '0');
INSERT INTO `exception` VALUES (99085, '优雅的异常处理机制', '表现层的优雅异常处理', '# 优雅的异常处理机制\n> 1、 在web系统开发过程中，前后端分离架构模式下，后台的逻辑判断和异常处理（例如非空验证，长度验证等等）直接抛给前端总是一个比较痛苦的事情，可能需要前端对后端返回的某一个值进行判断，再进行异常的输出。  这种模式下，如果判断信息太多，接口的出参DTO数据结构还需要不断地重新构建，拓展性十分差劲。  \n\n> 2、如果能够以全局的形式处理，后端有逻辑判断只抛异常，前端对于httpStatus进行判断（500时自动走异常分支），这样一来，前端不需要做频繁的参数校验，后端也不需要对接口结构进行不断调整，这样的架构，是每个程序员乐于接受的。   \n\n>3、先上图看效果   \n>> 后端进行逻辑判断时，只需要这样抛出异常，全局异常处理器会相应返回固定的数据格式       \n<a target=\"_blank\" href=\"http://img.zjhwork.xyz/exceptionHandler1.png\"><img src=\"http://img.zjhwork.xyz/exceptionHandler1.png\" /></a>\n\n>> 前端接收是只需要在异常catch或者判断HttpStatus的范围即可进行异常拦截，减少了大量的代码      \n\n<a target=\"_blank\" href=\"http://img.zjhwork.xyz/exceptionHandler.png\"><img src=\"http://img.zjhwork.xyz/exceptionHandler.png\" /></a>\n\n\n## 定义优雅的全局自定义系统异常类\n## BlogSystemException.java 定义自定义的异常类\n最好是继承自RuntimeException ，不然会在编译期，需要你手动在方法上抛出\n```\n/**\n * @Describe: 主动抛出的异常，用于控制器处理\n * @Author: zjhChester\n * @Date: 14:47 2020/9/29\n */\npublic class BlogSystemException extends RuntimeException {\n    public BlogSystemException() {\n        super();\n    }\n\n    public BlogSystemException(String message) {\n        super(\"系统出现异常：\"+message);\n    }\n\n    public BlogSystemException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public BlogSystemException(Throwable cause) {\n        super(cause);\n    }\n\n    protected BlogSystemException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n\n```\n## SystemExceptionHandler.java   异常处理器\n通过ResponseEntity<ResponseModel> 将封装的所有信息当成异常处理的自定义结构抛出\n```\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseBody;\nimport xyz.zjhwork.conf.exception.BlogSystemException;\nimport xyz.zjhwork.resmodel.ResponseModel;\n\nimport java.util.Objects;\n\n/**\n * @Describe: 处理系统自定义总线异常的处理\n * @Author: zjhChester\n * @Date: 14:54 2020/9/29\n */\n@Slf4j\n@Component\n@ControllerAdvice\npublic class SystemExceptionHandler {\n    @ResponseBody\n    @ExceptionHandler({BlogSystemException.class})\n//此处的入参只需要写自定义异常类的父类即\n    public ResponseEntity<ResponseModel> handleValidException(RuntimeException e) {\n        //日志记录错误信息\n        log.error(Objects.requireNonNull(e.getMessage()));\n        //将错误信息返回给前台\n        return ResponseEntity.status(500).body( ResponseModel.failResModel(99999999,Objects.requireNonNull(e.getMessage()), e.getStackTrace()));\n    }\n}\n\n```\n## 测试\n```\n@GetMapping(\"/{id}\")\n    public ResponseModel get(@PathVariable(\"id\") Integer id){\n        throw new BlogSystemException(\"测试主动抛出异常2\");\n    }\n```\n## 结果\n\n<a target=\"_blank\" href=\"http://img.zjhwork.xyz/exceptionHandler.png\"><img src=\"http://img.zjhwork.xyz/exceptionHandler.png\" /></a>\n', '2020-09-29 16:15:36', 'zjh', '', '学习记录', 9, '0');

-- ----------------------------
-- Table structure for favorite
-- ----------------------------
DROP TABLE IF EXISTS `favorite`;
CREATE TABLE `favorite`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exceptionId` int(11) NULL DEFAULT NULL,
  `userId` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of favorite
-- ----------------------------
INSERT INTO `favorite` VALUES (27, 99080, 'zjh', '2020-09-14 15:18:08', '');
INSERT INTO `favorite` VALUES (28, 99082, 'zjh', '2020-09-16 11:12:02', '');
INSERT INTO `favorite` VALUES (29, 99077, 'zjh', '2020-09-30 17:08:59', '');

-- ----------------------------
-- Table structure for history
-- ----------------------------
DROP TABLE IF EXISTS `history`;
CREATE TABLE `history`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `exceptionId` int(11) NULL DEFAULT NULL,
  `userId` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `time` datetime(0) NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 169 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of history
-- ----------------------------
INSERT INTO `history` VALUES (122, 98955, 'zjh', '2020-09-14 14:44:57', '');
INSERT INTO `history` VALUES (123, 98954, 'zjh', '2020-09-14 14:45:08', '');
INSERT INTO `history` VALUES (124, 98953, 'zjh', '2020-09-14 14:45:14', '');
INSERT INTO `history` VALUES (125, 99017, 'zjh', '2020-09-14 14:56:45', '');
INSERT INTO `history` VALUES (126, 99016, 'zjh', '2020-09-14 14:56:50', '');
INSERT INTO `history` VALUES (127, 99010, 'zjh', '2020-09-14 14:57:04', '');
INSERT INTO `history` VALUES (128, 99014, 'zjh', '2020-09-14 14:57:29', '');
INSERT INTO `history` VALUES (129, 99079, 'zjh', '2020-09-14 14:59:04', '');
INSERT INTO `history` VALUES (130, 99076, 'zjh', '2020-09-14 14:59:08', '');
INSERT INTO `history` VALUES (131, 99080, 'zjh', '2020-09-18 20:09:40', '');
INSERT INTO `history` VALUES (132, 99043, 'zjh', '2020-09-14 15:59:04', '');
INSERT INTO `history` VALUES (133, 99081, 'zjh', '2020-09-16 14:28:54', '');
INSERT INTO `history` VALUES (134, 99082, 'zjh', '2020-09-29 18:13:17', '');
INSERT INTO `history` VALUES (135, 99081, '吴豪,;#', '2020-09-16 14:31:39', '');
INSERT INTO `history` VALUES (136, 99028, '吴豪,;#', '2020-09-16 14:32:12', '');
INSERT INTO `history` VALUES (137, 99034, 'zjh', '2020-09-16 14:33:30', '');
INSERT INTO `history` VALUES (138, 99035, 'zjh', '2020-09-16 14:33:37', '');
INSERT INTO `history` VALUES (139, 99042, 'zjh', '2020-09-16 14:33:40', '');
INSERT INTO `history` VALUES (140, 99031, 'zjh', '2020-09-16 14:34:46', '');
INSERT INTO `history` VALUES (141, 99056, 'zjh', '2020-09-16 14:34:49', '');
INSERT INTO `history` VALUES (142, 99028, 'zjh', '2020-09-16 14:34:52', '');
INSERT INTO `history` VALUES (143, 99018, 'zjhChester', '2020-09-16 14:36:32', '');
INSERT INTO `history` VALUES (144, 99019, 'zjhChester', '2020-09-16 14:37:15', '');
INSERT INTO `history` VALUES (145, 99018, 'zjh', '2020-09-18 20:11:59', '');
INSERT INTO `history` VALUES (146, 99021, 'zjh', '2020-09-16 14:42:36', '');
INSERT INTO `history` VALUES (147, 99022, 'zjh', '2020-09-16 14:42:39', '');
INSERT INTO `history` VALUES (148, 99023, 'zjh', '2020-09-16 15:01:57', '');
INSERT INTO `history` VALUES (149, 99024, 'zjh', '2020-09-16 22:40:00', '');
INSERT INTO `history` VALUES (150, 99080, 'fwh', '2020-09-16 22:29:00', '');
INSERT INTO `history` VALUES (151, 99078, 'zjh', '2020-09-16 23:39:59', '');
INSERT INTO `history` VALUES (152, 99069, 'zjh', '2020-09-18 21:40:47', '');
INSERT INTO `history` VALUES (153, 99076, 'z1', '2020-09-18 20:02:55', '');
INSERT INTO `history` VALUES (154, 99083, 'z1', '2020-09-18 20:08:40', '');
INSERT INTO `history` VALUES (155, 99082, 'z1', '2020-09-18 20:08:58', '');
INSERT INTO `history` VALUES (156, 99077, 'zjh', '2020-09-30 17:24:02', '');
INSERT INTO `history` VALUES (157, 99070, 'zjh', '2020-09-18 21:40:37', '');
INSERT INTO `history` VALUES (158, 99063, 'zjh', '2020-09-18 21:40:57', '');
INSERT INTO `history` VALUES (159, 99058, 'zjh', '2020-09-18 21:41:02', '');
INSERT INTO `history` VALUES (160, 99057, 'zjh', '2020-09-18 21:41:07', '');
INSERT INTO `history` VALUES (161, 99053, 'zjh', '2020-09-18 21:41:15', '');
INSERT INTO `history` VALUES (162, 99051, 'zjh', '2020-09-18 21:41:19', '');
INSERT INTO `history` VALUES (163, 99084, 'lzx', '2020-09-21 12:35:23', '');
INSERT INTO `history` VALUES (164, 99084, 'zjh', '2020-09-26 22:35:25', '');
INSERT INTO `history` VALUES (165, 99085, 'zjh', '2020-09-30 13:58:50', '');
INSERT INTO `history` VALUES (166, 99073, 'zjh', '2020-09-29 18:16:26', '');
INSERT INTO `history` VALUES (167, 99062, 'zjh', '2020-09-29 18:16:36', '');
INSERT INTO `history` VALUES (168, 99071, 'zjh', '2020-09-29 18:18:08', '');

-- ----------------------------
-- Table structure for notification
-- ----------------------------
DROP TABLE IF EXISTS `notification`;
CREATE TABLE `notification`  (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `receiver` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '接受者',
  `sender` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '创建者',
  `createTime` datetime(0) NOT NULL COMMENT '创建时间',
  `exceptionId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '文章id',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '推送类型',
  `delStatus` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '已读/删除状态',
  `modifyTime` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of notification
-- ----------------------------
INSERT INTO `notification` VALUES (1, 'zjh', 'zjh', '2020-09-29 18:18:08', '99071', 'APPRECIATE', '1', '2020-09-29 18:21:47');
INSERT INTO `notification` VALUES (2, 'zjh', 'zjh', '2020-09-30 13:58:50', '99085', 'COMMENT', '1', '2020-09-30 15:59:41');
INSERT INTO `notification` VALUES (3, 'zjh', 'zjh', '2020-09-30 14:00:12', '99085', 'COMMENT', '0', '2020-09-30 14:00:12');
INSERT INTO `notification` VALUES (4, 'zjh', 'zjh', '2020-09-30 15:59:41', '99085', 'COMMENT', '1', '2020-09-30 16:02:24');
INSERT INTO `notification` VALUES (5, 'zjh', 'zjh', '2020-09-30 16:02:24', '99085', 'COMMENT', '0', '2020-09-30 16:02:24');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `nickName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `age` int(11) NULL DEFAULT NULL,
  `gender` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `createTime` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `remark` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `username`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 9 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES (3, 'zjh', 'adcd7048512e64b48da55b027577886ee5a36350', 'zjh', 18, '男', '2020-09-14 14:44:37', '358737741@qq.com', NULL);
INSERT INTO `user` VALUES (4, '吴豪,;#', 'adcd7048512e64b48da55b027577886ee5a36350', '吴豪,;#', 18, '男', '2020-09-16 14:29:45', '1', NULL);
INSERT INTO `user` VALUES (6, 'fwh', 'adcd7048512e64b48da55b027577886ee5a36350', 'fwh', 18, '男', '2020-09-16 22:28:22', '876811855@qq.com', NULL);
INSERT INTO `user` VALUES (7, 'z1', 'adcd7048512e64b48da55b027577886ee5a36350', 'z1', 18, '男', '2020-09-18 20:02:40', 'zjhChester@gmail.com', NULL);
INSERT INTO `user` VALUES (8, 'lzx', '63982e54a7aeb0d89910475ba6dbd3ca6dd4e5a1', 'lzx', 18, '男', '2020-09-20 22:50:16', '2953763519@qq.com', NULL);

SET FOREIGN_KEY_CHECKS = 1;
